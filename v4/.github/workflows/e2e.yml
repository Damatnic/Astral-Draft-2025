name: End-to-End Testing

on:
  push:
    branches: [ main, master, develop ]
    paths:
      - 'v4/src/**'
      - 'v4/tests/e2e/**'
      - 'v4/playwright.config.ts'
      - '.github/workflows/e2e.yml'
  pull_request:
    branches: [ main, master, develop ]
    paths:
      - 'v4/src/**'
      - 'v4/tests/e2e/**'
      - 'v4/playwright.config.ts'
      - '.github/workflows/e2e.yml'
  schedule:
    # Run E2E tests nightly at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to test against'
        required: true
        default: 'staging'
        type: choice
        options:
          - local
          - staging
          - production
      test_suite:
        description: 'Test suite to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - smoke
          - regression
          - mobile
          - accessibility
          - performance

permissions:
  contents: read
  actions: read
  checks: write

# Allow only one E2E run per environment
concurrency:
  group: e2e-${{ github.workflow }}-${{ github.ref }}-${{ inputs.environment || 'staging' }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18.17.0'
  CACHE_DEPENDENCY_PATH: 'v4/package-lock.json'

defaults:
  run:
    working-directory: ./v4

jobs:
  # Job 1: Setup and Build
  setup-application:
    name: Setup Application
    runs-on: ubuntu-latest
    outputs:
      base-url: ${{ steps.setup-url.outputs.base-url }}
      environment: ${{ steps.setup-url.outputs.environment }}
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: astral_draft_e2e
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Generate Prisma client
        run: npm run db:generate

      - name: Setup test database
        if: inputs.environment == 'local' || github.event_name != 'workflow_dispatch'
        run: npm run db:push
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/astral_draft_e2e

      - name: Build application
        if: inputs.environment == 'local' || github.event_name != 'workflow_dispatch'
        run: npm run build
        env:
          SKIP_ENV_VALIDATION: true
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/astral_draft_e2e
          REDIS_URL: redis://localhost:6379

      - name: Start application
        if: inputs.environment == 'local' || github.event_name != 'workflow_dispatch'
        run: |
          npm start &
          echo $! > app.pid
        env:
          NODE_ENV: test
          PORT: 3000
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/astral_draft_e2e
          REDIS_URL: redis://localhost:6379

      - name: Wait for application to be ready
        if: inputs.environment == 'local' || github.event_name != 'workflow_dispatch'
        run: |
          for i in {1..30}; do
            if curl -f http://localhost:3000/api/health; then
              echo "Application is ready"
              break
            fi
            echo "Waiting for application... ($i/30)"
            sleep 2
          done

      - name: Determine base URL
        id: setup-url
        run: |
          if [[ "${{ inputs.environment }}" == "production" ]]; then
            echo "base-url=https://astraldraft.com" >> $GITHUB_OUTPUT
            echo "environment=production" >> $GITHUB_OUTPUT
          elif [[ "${{ inputs.environment }}" == "staging" ]]; then
            echo "base-url=https://staging.astraldraft.com" >> $GITHUB_OUTPUT
            echo "environment=staging" >> $GITHUB_OUTPUT
          else
            echo "base-url=http://localhost:3000" >> $GITHUB_OUTPUT
            echo "environment=local" >> $GITHUB_OUTPUT
          fi

      - name: Upload build artifacts
        if: inputs.environment == 'local' || github.event_name != 'workflow_dispatch'
        uses: actions/upload-artifact@v4
        with:
          name: e2e-build-${{ github.sha }}
          path: |
            v4/.next/
            v4/app.pid
          retention-days: 1

  # Job 2: Cross-browser E2E Tests
  cross-browser-tests:
    name: Cross-browser E2E Tests
    runs-on: ubuntu-latest
    needs: [setup-application]
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
        shard: [1, 2, 3, 4]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Download build artifacts
        if: needs.setup-application.outputs.environment == 'local'
        uses: actions/download-artifact@v4
        with:
          name: e2e-build-${{ github.sha }}
          path: v4/

      - name: Start local application
        if: needs.setup-application.outputs.environment == 'local'
        run: |
          if [ -f app.pid ]; then
            npm start &
            echo $! > app.pid
          fi
        env:
          NODE_ENV: test
          PORT: 3000

      - name: Run E2E tests
        run: |
          if [[ "${{ inputs.test_suite }}" == "smoke" ]]; then
            npx playwright test --project=${{ matrix.browser }} --shard=${{ matrix.shard }}/4 --grep="@smoke"
          elif [[ "${{ inputs.test_suite }}" == "regression" ]]; then
            npx playwright test --project=${{ matrix.browser }} --shard=${{ matrix.shard }}/4 --grep="@regression"
          else
            npx playwright test --project=${{ matrix.browser }} --shard=${{ matrix.shard }}/4
          fi
        env:
          PLAYWRIGHT_TEST_BASE_URL: ${{ needs.setup-application.outputs.base-url }}
          CI: true

      - name: Upload Playwright Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ matrix.browser }}-${{ matrix.shard }}-${{ github.sha }}
          path: v4/playwright-report/
          retention-days: 30

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.browser }}-${{ matrix.shard }}-${{ github.sha }}
          path: v4/test-results/
          retention-days: 30

  # Job 3: Mobile E2E Tests
  mobile-tests:
    name: Mobile E2E Tests
    runs-on: ubuntu-latest
    needs: [setup-application]
    if: inputs.test_suite == 'mobile' || inputs.test_suite == 'all' || github.event_name != 'workflow_dispatch'
    strategy:
      fail-fast: false
      matrix:
        device: ['Mobile Chrome', 'Mobile Safari']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Download build artifacts
        if: needs.setup-application.outputs.environment == 'local'
        uses: actions/download-artifact@v4
        with:
          name: e2e-build-${{ github.sha }}
          path: v4/

      - name: Start local application
        if: needs.setup-application.outputs.environment == 'local'
        run: |
          if [ -f app.pid ]; then
            npm start &
            echo $! > app.pid
          fi
        env:
          NODE_ENV: test
          PORT: 3000

      - name: Run Mobile E2E tests
        run: npx playwright test --project="${{ matrix.device }}" --grep="@mobile|@responsive"
        env:
          PLAYWRIGHT_TEST_BASE_URL: ${{ needs.setup-application.outputs.base-url }}
          CI: true

      - name: Upload Mobile test reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: mobile-test-report-${{ matrix.device }}-${{ github.sha }}
          path: v4/playwright-report/
          retention-days: 30

  # Job 4: Accessibility E2E Tests
  accessibility-tests:
    name: Accessibility E2E Tests
    runs-on: ubuntu-latest
    needs: [setup-application]
    if: inputs.test_suite == 'accessibility' || inputs.test_suite == 'all' || github.event_name != 'workflow_dispatch'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Download build artifacts
        if: needs.setup-application.outputs.environment == 'local'
        uses: actions/download-artifact@v4
        with:
          name: e2e-build-${{ github.sha }}
          path: v4/

      - name: Start local application
        if: needs.setup-application.outputs.environment == 'local'
        run: |
          if [ -f app.pid ]; then
            npm start &
            echo $! > app.pid
          fi
        env:
          NODE_ENV: test
          PORT: 3000

      - name: Run Accessibility tests
        run: npx playwright test --project=chromium --grep="@accessibility|@a11y"
        env:
          PLAYWRIGHT_TEST_BASE_URL: ${{ needs.setup-application.outputs.base-url }}
          CI: true

      - name: Upload Accessibility report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: accessibility-test-report-${{ github.sha }}
          path: |
            v4/playwright-report/
            v4/accessibility-results/
          retention-days: 30

  # Job 5: Performance E2E Tests
  performance-tests:
    name: Performance E2E Tests
    runs-on: ubuntu-latest
    needs: [setup-application]
    if: inputs.test_suite == 'performance' || inputs.test_suite == 'all' || github.event_name == 'schedule'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Download build artifacts
        if: needs.setup-application.outputs.environment == 'local'
        uses: actions/download-artifact@v4
        with:
          name: e2e-build-${{ github.sha }}
          path: v4/

      - name: Start local application
        if: needs.setup-application.outputs.environment == 'local'
        run: |
          if [ -f app.pid ]; then
            npm start &
            echo $! > app.pid
          fi
        env:
          NODE_ENV: test
          PORT: 3000

      - name: Run Performance tests
        run: npx playwright test --project=chromium --grep="@performance"
        env:
          PLAYWRIGHT_TEST_BASE_URL: ${{ needs.setup-application.outputs.base-url }}
          CI: true

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x

      - name: Run Lighthouse CI
        run: |
          lhci autorun --upload.target=filesystem
        env:
          LHCI_BUILD_CONTEXT__CURRENT_HASH: ${{ github.sha }}
          LHCI_BUILD_CONTEXT__CURRENT_BRANCH: ${{ github.ref_name }}

      - name: Upload Performance reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-report-${{ github.sha }}
          path: |
            v4/playwright-report/
            v4/.lighthouseci/
          retention-days: 30

  # Job 6: Visual Regression Tests
  visual-regression-tests:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    needs: [setup-application]
    if: github.event_name == 'pull_request' || inputs.test_suite == 'all'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Download build artifacts
        if: needs.setup-application.outputs.environment == 'local'
        uses: actions/download-artifact@v4
        with:
          name: e2e-build-${{ github.sha }}
          path: v4/

      - name: Start local application
        if: needs.setup-application.outputs.environment == 'local'
        run: |
          if [ -f app.pid ]; then
            npm start &
            echo $! > app.pid
          fi
        env:
          NODE_ENV: test
          PORT: 3000

      - name: Run Visual Regression tests
        run: npx playwright test --project=chromium --grep="@visual"
        env:
          PLAYWRIGHT_TEST_BASE_URL: ${{ needs.setup-application.outputs.base-url }}
          CI: true

      - name: Upload Visual test reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: visual-regression-report-${{ github.sha }}
          path: |
            v4/playwright-report/
            v4/test-results/
          retention-days: 30

  # Job 7: Load Testing
  load-tests:
    name: Load Testing
    runs-on: ubuntu-latest
    needs: [setup-application]
    if: github.event_name == 'schedule' || inputs.test_suite == 'performance'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.CACHE_DEPENDENCY_PATH }}

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Install k6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Run Load tests
        run: |
          k6 run tests/load/load-test.js
        env:
          BASE_URL: ${{ needs.setup-application.outputs.base-url }}

      - name: Upload Load test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: load-test-results-${{ github.sha }}
          path: v4/load-test-results.json
          retention-days: 30

  # Job 8: Test Report Generation
  test-report:
    name: Generate Test Report
    runs-on: ubuntu-latest
    needs: [cross-browser-tests, mobile-tests, accessibility-tests, performance-tests, visual-regression-tests]
    if: always()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all test artifacts
        uses: actions/download-artifact@v4
        with:
          path: test-artifacts

      - name: Generate comprehensive test report
        run: |
          echo "# E2E Test Report" > e2e-test-report.md
          echo "Generated on: $(date)" >> e2e-test-report.md
          echo "Commit: ${{ github.sha }}" >> e2e-test-report.md
          echo "Environment: ${{ needs.setup-application.outputs.environment }}" >> e2e-test-report.md
          echo "Base URL: ${{ needs.setup-application.outputs.base-url }}" >> e2e-test-report.md
          echo "" >> e2e-test-report.md
          
          echo "## Test Results Summary" >> e2e-test-report.md
          echo "- **Cross-browser Tests**: ${{ needs.cross-browser-tests.result }}" >> e2e-test-report.md
          echo "- **Mobile Tests**: ${{ needs.mobile-tests.result }}" >> e2e-test-report.md
          echo "- **Accessibility Tests**: ${{ needs.accessibility-tests.result }}" >> e2e-test-report.md
          echo "- **Performance Tests**: ${{ needs.performance-tests.result }}" >> e2e-test-report.md
          echo "- **Visual Regression**: ${{ needs.visual-regression-tests.result }}" >> e2e-test-report.md
          echo "" >> e2e-test-report.md
          
          echo "## Artifacts Generated" >> e2e-test-report.md
          echo "- Playwright HTML reports" >> e2e-test-report.md
          echo "- Test result screenshots" >> e2e-test-report.md
          echo "- Performance metrics" >> e2e-test-report.md
          echo "- Accessibility scan results" >> e2e-test-report.md

      - name: Upload comprehensive test report
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-report-${{ github.sha }}
          path: e2e-test-report.md
          retention-days: 90

      - name: Comment on PR with test results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const pr_number = context.payload.pull_request.number;
            
            const testResults = {
              'Cross-browser': '${{ needs.cross-browser-tests.result }}',
              'Mobile': '${{ needs.mobile-tests.result }}',
              'Accessibility': '${{ needs.accessibility-tests.result }}',
              'Performance': '${{ needs.performance-tests.result }}',
              'Visual Regression': '${{ needs.visual-regression-tests.result }}'
            };
            
            let body = `## 🧪 E2E Test Results\n\n`;
            body += `**Environment**: ${{ needs.setup-application.outputs.environment }}\n`;
            body += `**Base URL**: ${{ needs.setup-application.outputs.base-url }}\n\n`;
            
            body += `### Test Suite Results:\n`;
            for (const [test, result] of Object.entries(testResults)) {
              const icon = result === 'success' ? '✅' : result === 'failure' ? '❌' : '⏭️';
              body += `- ${icon} **${test}**: ${result}\n`;
            }
            
            body += `\n[📊 View detailed test reports](https://github.com/${owner}/${repo}/actions/runs/${{ github.run_id }})`;
            
            github.rest.issues.createComment({
              owner,
              repo,
              issue_number: pr_number,
              body
            });

      - name: Notify on test failures
        if: needs.cross-browser-tests.result == 'failure' || needs.mobile-tests.result == 'failure' || needs.accessibility-tests.result == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#testing'
          text: |
            🚨 **E2E Test Failures Detected**
            
            **Repository**: ${{ github.repository }}
            **Commit**: ${{ github.sha }}
            **Branch**: ${{ github.ref_name }}
            **Environment**: ${{ needs.setup-application.outputs.environment }}
            
            **Failed Test Suites:**
            ${{ needs.cross-browser-tests.result == 'failure' && '- Cross-browser Tests' || '' }}
            ${{ needs.mobile-tests.result == 'failure' && '- Mobile Tests' || '' }}
            ${{ needs.accessibility-tests.result == 'failure' && '- Accessibility Tests' || '' }}
            
            [🔍 View Test Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}