{"version":3,"file":"SeasonContestView-CPrxJK1m.js","sources":["../../services/seasonContestService.ts","../../views/SeasonContestView.tsx"],"sourcesContent":["/**\n * Season Contest Service\n * Manages season-long prediction contests with cumulative scoring and championship brackets\n */\n\nexport interface SeasonContest {\n  id: string;\n  name: string;\n  description: string;\n  season: number;\n  status: 'UPCOMING' | 'ACTIVE' | 'COMPLETED';\n  contestType: 'WEEKLY_PREDICTIONS' | 'PLAYOFF_BRACKET' | 'SEASON_AWARDS' | 'MILESTONE_PREDICTIONS';\n  startDate: Date;\n  endDate: Date;\n  entryFee?: number;\n  prizePool: number;\n  maxParticipants?: number;\n  participants: ContestParticipant[];\n  rules: ContestRules;\n  scoring: ContestScoring;\n  leaderboard: ContestLeaderboard;\n  weeks?: WeeklyContest[];\n  bracket?: PlayoffBracket;\n  awards?: AwardsPredictions;\n  milestones?: MilestonePredictions;\n}\n\nexport interface ContestParticipant {\n  userId: string;\n  userName: string;\n  avatar: string;\n  joinDate: Date;\n  totalScore: number;\n  weeklyScores: { [week: number]: number };\n  currentRank: number;\n  badges: ContestBadge[];\n  predictions: { [week: number]: WeeklyPrediction };\n  bracketPicks?: BracketPick[];\n  awardPicks?: AwardPick[];\n  milestonePicks?: MilestonePick[];\n}\n\nexport interface ContestRules {\n  scoringSystem: 'POINTS' | 'ACCURACY' | 'CONFIDENCE' | 'HYBRID';\n  allowLateEntries: boolean;\n  requireAllPredictions: boolean;\n  tiebreaker: 'TOTAL_POINTS' | 'WEEKLY_WINS' | 'RECENT_PERFORMANCE' | 'HEAD_TO_HEAD';\n  bonusCategories: BonusCategory[];\n  penalties: PenaltyRule[];\n}\n\nexport interface ContestScoring {\n  correctPrediction: number;\n  partialCredit: number;\n  confidenceMultiplier: boolean;\n  streakBonus: StreakBonus;\n  categoryWeights: { [category: string]: number };\n  weeklyBonuses: WeeklyBonus[];\n  playoffMultiplier: number;\n  championshipBonus: number;\n}\n\nexport interface ContestLeaderboard {\n  rankings: ContestRanking[];\n  weeklyWinners: { [week: number]: string };\n  streakLeaders: StreakLeader[];\n  categoryLeaders: { [category: string]: string };\n  recentMovers: RankingChange[];\n  projectedFinish: ProjectedFinish[];\n}\n\nexport interface WeeklyContest {\n  week: number;\n  theme: string;\n  predictions: PredictionCategory[];\n  bonusQuestions: BonusQuestion[];\n  deadline: Date;\n  status: 'UPCOMING' | 'OPEN' | 'LOCKED' | 'COMPLETED';\n  results?: WeeklyResults;\n}\n\nexport interface PredictionCategory {\n  id: string;\n  name: string;\n  type: 'GAME_OUTCOME' | 'PLAYER_PERFORMANCE' | 'TEAM_STATS' | 'PROP_BET';\n  question: string;\n  options: PredictionOption[];\n  points: number;\n  confidenceEnabled: boolean;\n  difficulty: 'EASY' | 'MEDIUM' | 'HARD' | 'EXPERT';\n}\n\nexport interface PredictionOption {\n  id: string;\n  label: string;\n  odds?: number;\n  description?: string;\n}\n\nexport interface WeeklyPrediction {\n  week: number;\n  predictions: { [categoryId: string]: PredictionSubmission };\n  submittedAt: Date;\n  score?: number;\n  bonusPoints?: number;\n  weeklyRank?: number;\n}\n\nexport interface PredictionSubmission {\n  categoryId: string;\n  selectedOptionId: string;\n  confidence?: number; // 1-5 scale\n  reasoning?: string;\n  isCorrect?: boolean;\n  pointsEarned?: number;\n}\n\nexport interface PlayoffBracket {\n  id: string;\n  name: string;\n  rounds: BracketRound[];\n  seedingComplete: boolean;\n  currentRound: number;\n  status: 'SEEDING' | 'ROUND_1' | 'DIVISIONAL' | 'CONFERENCE' | 'SUPER_BOWL' | 'COMPLETED';\n  scoringRules: BracketScoring;\n}\n\nexport interface BracketRound {\n  round: number;\n  name: string;\n  games: BracketGame[];\n  pointValue: number;\n  deadline: Date;\n  status: 'UPCOMING' | 'OPEN' | 'LOCKED' | 'COMPLETED';\n}\n\nexport interface BracketGame {\n  id: string;\n  round: number;\n  team1: string;\n  team2: string;\n  seed1?: number;\n  seed2?: number;\n  winner?: string;\n  predicted?: boolean;\n  pointValue: number;\n}\n\nexport interface BracketPick {\n  gameId: string;\n  predictedWinner: string;\n  confidence?: number;\n  reasoning?: string;\n  isCorrect?: boolean;\n  pointsEarned?: number;\n}\n\nexport interface AwardsPredictions {\n  categories: AwardCategory[];\n  deadline: Date;\n  status: 'OPEN' | 'LOCKED' | 'COMPLETED';\n  results?: { [categoryId: string]: string };\n}\n\nexport interface AwardCategory {\n  id: string;\n  name: string;\n  description: string;\n  nominees: AwardNominee[];\n  pointValue: number;\n}\n\nexport interface AwardNominee {\n  id: string;\n  name: string;\n  team: string;\n  stats?: { [key: string]: number };\n  odds?: number;\n}\n\nexport interface AwardPick {\n  categoryId: string;\n  nomineeId: string;\n  confidence?: number;\n  reasoning?: string;\n  isCorrect?: boolean;\n  pointsEarned?: number;\n}\n\nexport interface MilestonePredictions {\n  categories: MilestoneCategory[];\n  status: 'OPEN' | 'LOCKED' | 'COMPLETED';\n}\n\nexport interface MilestoneCategory {\n  id: string;\n  name: string;\n  description: string;\n  type: 'OVER_UNDER' | 'EXACT_NUMBER' | 'FIRST_TO_ACHIEVE' | 'BINARY';\n  target: number | string;\n  pointValue: number;\n  deadline: Date;\n}\n\nexport interface MilestonePick {\n  categoryId: string;\n  prediction: number | string | boolean;\n  confidence?: number;\n  reasoning?: string;\n  isCorrect?: boolean;\n  pointsEarned?: number;\n}\n\nexport interface BonusQuestion {\n  id: string;\n  question: string;\n  type: 'MULTIPLE_CHOICE' | 'NUMERIC' | 'TRUE_FALSE';\n  options?: string[];\n  correctAnswer?: string | number | boolean;\n  pointValue: number;\n  difficulty: 'EASY' | 'MEDIUM' | 'HARD';\n}\n\nexport interface BonusCategory {\n  id: string;\n  name: string;\n  description: string;\n  multiplier: number;\n  condition: string;\n}\n\nexport interface PenaltyRule {\n  id: string;\n  name: string;\n  description: string;\n  penalty: number;\n  condition: string;\n}\n\nexport interface StreakBonus {\n  minStreak: number;\n  bonusPerCorrect: number;\n  maxBonus: number;\n  resetOnIncorrect: boolean;\n}\n\nexport interface WeeklyBonus {\n  week: number;\n  name: string;\n  description: string;\n  bonus: number;\n  condition: string;\n}\n\nexport interface ContestRanking {\n  rank: number;\n  userId: string;\n  userName: string;\n  totalScore: number;\n  weeklyAverage: number;\n  accuracy: number;\n  streak: number;\n  trend: 'UP' | 'DOWN' | 'STABLE';\n  rankChange: number;\n  badges: ContestBadge[];\n}\n\nexport interface StreakLeader {\n  userId: string;\n  userName: string;\n  currentStreak: number;\n  longestStreak: number;\n  streakType: 'CORRECT_PREDICTIONS' | 'WEEKLY_WINS' | 'TOP_10_FINISHES';\n}\n\nexport interface RankingChange {\n  userId: string;\n  userName: string;\n  previousRank: number;\n  currentRank: number;\n  change: number;\n  reason: string;\n}\n\nexport interface ProjectedFinish {\n  userId: string;\n  userName: string;\n  currentRank: number;\n  projectedRank: number;\n  probability: number;\n  trend: 'IMPROVING' | 'DECLINING' | 'STABLE';\n}\n\nexport interface ContestBadge {\n  id: string;\n  name: string;\n  description: string;\n  icon: string;\n  rarity: 'COMMON' | 'RARE' | 'EPIC' | 'LEGENDARY';\n  earnedDate: Date;\n  criteria: string;\n}\n\nexport interface WeeklyResults {\n  week: number;\n  correctAnswers: { [categoryId: string]: string };\n  topPerformers: string[];\n  averageScore: number;\n  difficultyActual: { [categoryId: string]: number };\n  surprises: string[];\n  analysis: string;\n}\n\nexport interface BracketScoring {\n  wildCardRound: number;\n  divisionalRound: number;\n  conferenceChampionship: number;\n  superBowl: number;\n  perfectBracketBonus: number;\n  upsetBonus: number;\n}\n\nclass SeasonContestService {\n  private readonly contests: Map<string, SeasonContest> = new Map();\n  private readonly userParticipation: Map<string, string[]> = new Map(); // userId -> contestIds\n\n  /**\n   * Create a new season contest\n   */\n  createContest(contestData: Omit<SeasonContest, 'id' | 'participants' | 'leaderboard'>): SeasonContest {\n    const contest: SeasonContest = {\n      id: this.generateContestId(),\n      participants: [],\n      leaderboard: {\n        rankings: [],\n        weeklyWinners: {},\n        streakLeaders: [],\n        categoryLeaders: {},\n        recentMovers: [],\n        projectedFinish: []\n      },\n      ...contestData\n    };\n\n    this.contests.set(contest.id, contest);\n    return contest;\n  }\n\n  /**\n   * Join a contest\n   */\n  joinContest(contestId: string, userId: string, userName: string, avatar: string): boolean {\n    const contest = this.contests.get(contestId);\n    if (!contest) return false;\n\n    // Check if contest is full\n    if (contest.maxParticipants && contest.participants.length >= contest.maxParticipants) {\n      return false;\n    }\n\n    // Check if user already joined\n    if (contest.participants.some(p => p.userId === userId)) {\n      return false;\n    }\n\n    // Add participant\n    const participant: ContestParticipant = {\n      userId,\n      userName,\n      avatar,\n      joinDate: new Date(),\n      totalScore: 0,\n      weeklyScores: {},\n      currentRank: contest.participants.length + 1,\n      badges: [],\n      predictions: {}\n    };\n\n    contest.participants.push(participant);\n\n    // Update user participation tracking\n    const userContests = this.userParticipation.get(userId) || [];\n    userContests.push(contestId);\n    this.userParticipation.set(userId, userContests);\n\n    this.updateLeaderboard(contestId);\n    return true;\n  }\n\n  /**\n   * Submit weekly predictions\n   */\n  submitWeeklyPredictions(\n    contestId: string, \n    userId: string, \n    week: number, \n    predictions: { [categoryId: string]: PredictionSubmission }\n  ): boolean {\n    const contest = this.contests.get(contestId);\n    if (!contest) return false;\n\n    const participant = contest.participants.find(p => p.userId === userId);\n    if (!participant) return false;\n\n    const weeklyContest = contest.weeks?.find(w => w.week === week);\n    if (!weeklyContest || weeklyContest.status !== 'OPEN') return false;\n\n    // Validate predictions\n    for (const prediction of Object.values(predictions)) {\n      const category = weeklyContest.predictions.find(p => p.id === prediction.categoryId);\n      if (!category) return false;\n      \n      const option = category.options.find(o => o.id === prediction.selectedOptionId);\n      if (!option) return false;\n    }\n\n    // Store predictions\n    participant.predictions[week] = {\n      week,\n      predictions,\n      submittedAt: new Date()\n    };\n\n    return true;\n  }\n\n  /**\n   * Submit bracket predictions\n   */\n  submitBracketPredictions(contestId: string, userId: string, picks: BracketPick[]): boolean {\n    const contest = this.contests.get(contestId);\n    if (!contest?.bracket) return false;\n\n    const participant = contest.participants.find(p => p.userId === userId);\n    if (!participant) return false;\n\n    participant.bracketPicks = picks;\n    return true;\n  }\n\n  /**\n   * Submit award predictions\n   */\n  submitAwardPredictions(contestId: string, userId: string, picks: AwardPick[]): boolean {\n    const contest = this.contests.get(contestId);\n    if (!contest?.awards) return false;\n\n    const participant = contest.participants.find(p => p.userId === userId);\n    if (!participant) return false;\n\n    participant.awardPicks = picks;\n    return true;\n  }\n\n  /**\n   * Process weekly results and update scores\n   */\n  processWeeklyResults(\n    contestId: string, \n    week: number, \n    results: { [categoryId: string]: string }\n  ): void {\n    const contest = this.contests.get(contestId);\n    if (!contest) return;\n\n    const weeklyContest = contest.weeks?.find(w => w.week === week);\n    if (!weeklyContest) return;\n\n    // Score each participant's predictions\n    for (const participant of contest.participants) {\n      const weeklyPrediction = participant.predictions[week];\n      if (!weeklyPrediction) continue;\n\n      let weeklyScore = 0;\n      let correctCount = 0;\n      let currentStreak = this.getCurrentStreak(participant, week - 1);\n\n      // Score each prediction\n      for (const [categoryId, prediction] of Object.entries(weeklyPrediction.predictions)) {\n        const category = weeklyContest.predictions.find(p => p.id === categoryId);\n        if (!category) continue;\n\n        const correctAnswer = results[categoryId];\n        const isCorrect = prediction.selectedOptionId === correctAnswer;\n        \n        prediction.isCorrect = isCorrect;\n        \n        if (isCorrect) {\n          let points = category.points;\n          \n          // Apply confidence multiplier\n          if (category.confidenceEnabled && prediction.confidence && contest.scoring.confidenceMultiplier) {\n            points *= prediction.confidence;\n          }\n          \n          // Apply category weight\n          const weight = contest.scoring.categoryWeights[categoryId] || 1;\n          points *= weight;\n          \n          prediction.pointsEarned = points;\n          weeklyScore += points;\n          correctCount++;\n          currentStreak++;\n        } else {\n          prediction.pointsEarned = 0;\n          if (contest.scoring.streakBonus.resetOnIncorrect) {\n            currentStreak = 0;\n          }\n        }\n      }\n\n      // Apply streak bonus\n      if (currentStreak >= contest.scoring.streakBonus.minStreak) {\n        const streakBonus = Math.min(\n          currentStreak * contest.scoring.streakBonus.bonusPerCorrect,\n          contest.scoring.streakBonus.maxBonus\n        );\n        weeklyScore += streakBonus;\n      }\n\n      // Apply weekly bonuses\n      const weeklyBonuses = contest.scoring.weeklyBonuses.filter(b => b.week === week);\n      for (const bonus of weeklyBonuses) {\n        if (this.evaluateBonusCondition(bonus.condition, participant, weeklyPrediction)) {\n          weeklyScore += bonus.bonus;\n        }\n      }\n\n      // Update participant scores\n      participant.weeklyScores[week] = weeklyScore;\n      participant.totalScore += weeklyScore;\n      weeklyPrediction.score = weeklyScore;\n    }\n\n    // Mark weekly contest as completed\n    weeklyContest.status = 'COMPLETED';\n    weeklyContest.results = {\n      week,\n      correctAnswers: results,\n      topPerformers: this.getWeeklyTopPerformers(contest, week),\n      averageScore: this.calculateWeeklyAverage(contest, week),\n      difficultyActual: this.calculateActualDifficulty(weeklyContest, results),\n      surprises: this.identifySurprises(weeklyContest, results),\n      analysis: this.generateWeeklyAnalysis(weeklyContest, results)\n    };\n\n    this.updateLeaderboard(contestId);\n    this.awardWeeklyBadges(contestId, week);\n  }\n\n  /**\n   * Get contest by ID\n   */\n  getContest(contestId: string): SeasonContest | undefined {\n    return this.contests.get(contestId);\n  }\n\n  /**\n   * Get user's contests\n   */\n  getUserContests(userId: string): SeasonContest[] {\n    const contestIds = this.userParticipation.get(userId) || [];\n    return contestIds.map(id => this.contests.get(id)).filter((contest): contest is SeasonContest => contest !== undefined);\n  }\n\n  /**\n   * Get active contests\n   */\n  getActiveContests(): SeasonContest[] {\n    return Array.from(this.contests.values()).filter(contest => contest.status === 'ACTIVE');\n  }\n\n  /**\n   * Get leaderboard for contest\n   */\n  getLeaderboard(contestId: string): ContestLeaderboard | undefined {\n    const contest = this.contests.get(contestId);\n    return contest?.leaderboard;\n  }\n\n  /**\n   * Generate weekly contest template\n   */\n  generateWeeklyContest(week: number, theme: string): WeeklyContest {\n    return {\n      week,\n      theme,\n      predictions: this.generateWeeklyPredictions(week),\n      bonusQuestions: this.generateBonusQuestions(week),\n      deadline: this.getWeekDeadline(week),\n      status: 'UPCOMING'\n    };\n  }\n\n  /**\n   * Create playoff bracket template\n   */\n  createPlayoffBracket(): PlayoffBracket {\n    return {\n      id: this.generateId(),\n      name: 'NFL Playoff Bracket',\n      rounds: this.generateBracketRounds(),\n      seedingComplete: false,\n      currentRound: 1,\n      status: 'SEEDING',\n      scoringRules: {\n        wildCardRound: 10,\n        divisionalRound: 15,\n        conferenceChampionship: 25,\n        superBowl: 50,\n        perfectBracketBonus: 500,\n        upsetBonus: 5\n      }\n    };\n  }\n\n  private updateLeaderboard(contestId: string): void {\n    const contest = this.contests.get(contestId);\n    if (!contest) return;\n\n    // Sort participants by total score\n    const sortedParticipants = [...contest.participants].sort((a, b) => b.totalScore - a.totalScore);\n\n    // Update rankings\n    contest.leaderboard.rankings = sortedParticipants.map((participant, index) => {\n      const previousRank = participant.currentRank;\n      const newRank = index + 1;\n      const rankChange = previousRank - newRank;\n      \n      participant.currentRank = newRank;\n\n      return {\n        rank: newRank,\n        userId: participant.userId,\n        userName: participant.userName,\n        totalScore: participant.totalScore,\n        weeklyAverage: this.calculateWeeklyAverage(contest, undefined, participant.userId),\n        accuracy: this.calculateAccuracy(participant),\n        streak: this.getCurrentStreak(participant),\n        trend: this.determineTrend(participant),\n        rankChange,\n        badges: participant.badges\n      };\n    });\n\n    // Update streak leaders\n    contest.leaderboard.streakLeaders = this.calculateStreakLeaders(contest);\n\n    // Update recent movers\n    contest.leaderboard.recentMovers = this.calculateRecentMovers(contest);\n\n    // Update projected finishes\n    contest.leaderboard.projectedFinish = this.calculateProjectedFinishes(contest);\n  }\n\n  private generateContestId(): string {\n    return `contest_${Date.now()}_${Math.random().toString(36).substring(2, 11)}`;\n  }\n\n  private generateId(): string {\n    return `${Date.now()}_${Math.random().toString(36).substring(2, 11)}`;\n  }\n\n  private getCurrentWeek(): number {\n    // Calculate current NFL week based on season start date\n    const now = new Date();\n    const seasonStart = new Date(now.getFullYear(), 8, 8); // Approximate NFL season start (September 8)\n    const daysSinceStart = Math.floor((now.getTime() - seasonStart.getTime()) / (1000 * 60 * 60 * 24));\n    \n    // NFL regular season is typically 18 weeks (17 games + 1 bye)\n    const week = Math.min(Math.max(1, Math.ceil(daysSinceStart / 7)), 18);\n    return week;\n  }\n\n  private getCurrentStreak(participant: ContestParticipant, week?: number): number {\n    // Calculate current streak of correct predictions\n    const currentWeek = week || this.getCurrentWeek();\n    let streak = 0;\n    \n    for (let w = currentWeek; w >= 1; w--) {\n      const weeklyPrediction = participant.predictions[w];\n      if (!weeklyPrediction) break;\n      \n      // Check if all predictions for this week are correct\n      const predictions = Object.values(weeklyPrediction.predictions);\n      if (predictions.length === 0) break;\n      \n      const allCorrect = predictions.every(p => p.isCorrect);\n      if (allCorrect) {\n        streak++;\n      } else {\n        break;\n      }\n    }\n    \n    return streak;\n  }\n\n  private evaluateBonusCondition(condition: string, participant: ContestParticipant, prediction: WeeklyPrediction): boolean {\n    // Evaluate bonus conditions based on prediction patterns and performance\n    switch (condition.toLowerCase()) {\n      case 'perfect_week':\n        // All predictions correct for the week\n        return Object.values(prediction.predictions).every(p => p.isCorrect);\n      \n      case 'high_confidence':\n        // All predictions made with high confidence (80%+)\n        return Object.values(prediction.predictions).every(p => (p.confidence || 0) >= 80);\n      \n      case 'contrarian_pick': {\n        // Made prediction against majority - simplified check for now\n        return Object.values(prediction.predictions).some(p => p.confidence != null && p.confidence < 60);\n      }\n      \n      case 'streak_active':\n        // Currently on a streak of 3+ correct weeks\n        return this.getCurrentStreak(participant) >= 3;\n      \n      case 'upset_special': {\n        // Correctly predicted an upset (low confidence prediction that was correct)\n        return Object.values(prediction.predictions).some(p => \n          p.isCorrect && p.confidence != null && p.confidence < 50\n        );\n      }\n      \n      case 'early_bird': {\n        // Made prediction before deadline\n        const deadline = this.getWeekDeadline(prediction.week);\n        return prediction.submittedAt < deadline;\n      }\n      \n      default:\n        return false;\n    }\n  }\n\n  private getWeeklyTopPerformers(contest: SeasonContest, week: number): string[] {\n    return contest.participants\n      .filter(p => p.weeklyScores[week] !== undefined)\n      .sort((a, b) => (b.weeklyScores[week] || 0) - (a.weeklyScores[week] || 0))\n      .slice(0, 3)\n      .map(p => p.userId);\n  }\n\n  private calculateWeeklyAverage(contest: SeasonContest, week?: number, userId?: string): number {\n    if (userId) {\n      const participant = contest.participants.find(p => p.userId === userId);\n      if (!participant) return 0;\n      \n      const scores = Object.values(participant.weeklyScores);\n      return scores.length > 0 ? scores.reduce((a, b) => a + b, 0) / scores.length : 0;\n    }\n\n    if (week) {\n      const weeklyScores = contest.participants\n        .map(p => p.weeklyScores[week])\n        .filter((score): score is number => score !== undefined);\n      \n      return weeklyScores.length > 0 ? weeklyScores.reduce((a, b) => a + b, 0) / weeklyScores.length : 0;\n    }\n\n    return 0;\n  }\n\n  private calculateActualDifficulty(weeklyContest: WeeklyContest, results: { [categoryId: string]: string }): { [categoryId: string]: number } {\n    // Calculate actual difficulty based on prediction accuracy across all participants\n    const difficulty: { [categoryId: string]: number } = {};\n    \n    for (const category of weeklyContest.predictions) {\n      const correctAnswerIndex = results[category.id];\n      if (!correctAnswerIndex) continue;\n      \n      // Calculate percentage of participants who got this correct\n      // This would need to be calculated from actual participant predictions\n      // For now, use category difficulty as baseline\n      let baseDifficulty: number;\n      switch (category.difficulty) {\n        case 'EASY':\n          baseDifficulty = 0.8;\n          break;\n        case 'MEDIUM':\n          baseDifficulty = 0.5;\n          break;\n        case 'HARD':\n          baseDifficulty = 0.3;\n          break;\n        case 'EXPERT':\n          baseDifficulty = 0.1;\n          break;\n        default:\n          baseDifficulty = 0.5;\n      }\n      \n      // Add some variance based on random factors\n      const variance = (Math.random() - 0.5) * 0.3;\n      const actualDifficulty = Math.max(0.1, Math.min(0.9, baseDifficulty + variance));\n      \n      difficulty[category.id] = Math.round(actualDifficulty * 100);\n    }\n    \n    return difficulty;\n  }\n\n  private identifySurprises(weeklyContest: WeeklyContest, results: { [categoryId: string]: string }): string[] {\n    // Identify surprising results based on predicted vs actual difficulty\n    const surprises: string[] = [];\n    const actualDifficulty = this.calculateActualDifficulty(weeklyContest, results);\n    \n    for (const category of weeklyContest.predictions) {\n      const expectedDifficulty = this.getDifficultyPercentage(category.difficulty);\n      const actualDiff = actualDifficulty[category.id] || 50;\n      \n      // If actual difficulty varies significantly from expected (>30% difference)\n      const diffVariance = Math.abs(expectedDifficulty - actualDiff);\n      if (diffVariance > 30) {\n        const surpriseType = actualDiff > expectedDifficulty ? 'easier' : 'harder';\n        surprises.push(`${category.name} was much ${surpriseType} than expected`);\n      }\n    }\n    \n    return surprises;\n  }\n\n  private getDifficultyPercentage(difficulty: 'EASY' | 'MEDIUM' | 'HARD' | 'EXPERT'): number {\n    switch (difficulty) {\n      case 'EASY': return 80;\n      case 'MEDIUM': return 50;\n      case 'HARD': return 30;\n      case 'EXPERT': return 10;\n      default: return 50;\n    }\n  }\n\n  private generateWeeklyAnalysis(weeklyContest: WeeklyContest, results: { [categoryId: string]: string }): string {\n    // Generate comprehensive weekly analysis\n    const surprises = this.identifySurprises(weeklyContest, results);\n    const totalQuestions = weeklyContest.predictions.length;\n    const bonusQuestions = weeklyContest.bonusQuestions?.length || 0;\n    \n    let analysis = `Week ${weeklyContest.week} Analysis:\\n\\n`;\n    \n    // Overall difficulty assessment\n    const difficulties = this.calculateActualDifficulty(weeklyContest, results);\n    const avgDifficulty = Object.values(difficulties).reduce((a, b) => a + b, 0) / Object.values(difficulties).length;\n    \n    if (avgDifficulty > 70) {\n      analysis += \"This was an easier week with several predictable outcomes. \";\n    } else if (avgDifficulty < 40) {\n      analysis += \"This was a challenging week with many upsets and surprising results. \";\n    } else {\n      analysis += \"This week provided a balanced mix of predictable and challenging predictions. \";\n    }\n    \n    // Surprise analysis\n    if (surprises.length > 0) {\n      const topSurprises = surprises.slice(0, 3).map(s => '• ' + s).join('\\n');\n      analysis += '\\n\\nKey surprises:\\n' + topSurprises;\n    }\n    \n    // Participation analysis\n    analysis += `\\n\\nContest featured ${totalQuestions} main predictions`;\n    if (bonusQuestions > 0) {\n      analysis += ` and ${bonusQuestions} bonus questions`;\n    }\n    analysis += `.`;\n    \n    // Performance insights\n    analysis += `\\n\\nParticipants who focused on fundamental analysis and avoided overthinking likely performed best this week.`;\n    \n    return analysis;\n  }\n\n  private awardWeeklyBadges(contestId: string, week: number): void {\n    // Implementation for awarding weekly badges\n  }\n\n  private calculateAccuracy(participant: ContestParticipant): number {\n    let totalPredictions = 0;\n    let correctPredictions = 0;\n\n    for (const weeklyPrediction of Object.values(participant.predictions)) {\n      for (const prediction of Object.values(weeklyPrediction.predictions)) {\n        totalPredictions++;\n        if (prediction.isCorrect) {\n          correctPredictions++;\n        }\n      }\n    }\n\n    return totalPredictions > 0 ? (correctPredictions / totalPredictions) * 100 : 0;\n  }\n\n  private determineTrend(participant: ContestParticipant): 'UP' | 'DOWN' | 'STABLE' {\n    // Determine trend based on recent performance (last 3 weeks)\n    const currentWeek = this.getCurrentWeek();\n    const recentWeeks = Math.min(3, currentWeek);\n    const scores: number[] = [];\n    \n    for (let i = currentWeek - recentWeeks + 1; i <= currentWeek; i++) {\n      const weeklyScore = participant.weeklyScores[i];\n      if (weeklyScore !== undefined) {\n        scores.push(weeklyScore);\n      }\n    }\n    \n    if (scores.length < 2) return 'STABLE';\n    \n    // Calculate trend based on linear regression slope\n    const n = scores.length;\n    const sumX = scores.reduce((sum, _, index) => sum + index, 0);\n    const sumY = scores.reduce((sum, score) => sum + score, 0);\n    const sumXY = scores.reduce((sum, score, index) => sum + index * score, 0);\n    const sumXX = scores.reduce((sum, _, index) => sum + index * index, 0);\n    \n    const slope = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);\n    \n    if (slope > 0.5) return 'UP';\n    if (slope < -0.5) return 'DOWN';\n    return 'STABLE';\n  }\n\n  private calculateStreakLeaders(contest: SeasonContest): StreakLeader[] {\n    // Calculate streak leaders from participants\n    return contest.participants\n      .map(participant => ({\n        userId: participant.userId,\n        userName: participant.userName || 'Unknown User',\n        currentStreak: this.getCurrentStreak(participant),\n        longestStreak: this.getLongestStreak(participant),\n        streakType: this.getStreakType(participant)\n      }))\n      .filter(leader => leader.currentStreak > 0)\n      .sort((a, b) => b.currentStreak - a.currentStreak)\n      .slice(0, 10);\n  }\n\n  private getLongestStreak(participant: ContestParticipant): number {\n    // Calculate longest streak for participant across all weeks\n    let longestStreak = 0;\n    let currentStreak = 0;\n    \n    const weeks = Object.keys(participant.predictions)\n      .map(Number)\n      .sort((a, b) => a - b);\n    \n    for (const week of weeks) {\n      const weeklyPrediction = participant.predictions[week];\n      if (!weeklyPrediction) continue;\n      \n      const predictions = Object.values(weeklyPrediction.predictions);\n      if (predictions.length === 0) continue;\n      \n      const allCorrect = predictions.every(p => p.isCorrect);\n      if (allCorrect) {\n        currentStreak++;\n        longestStreak = Math.max(longestStreak, currentStreak);\n      } else {\n        currentStreak = 0;\n      }\n    }\n    \n    return longestStreak;\n  }\n\n  private getStreakType(participant: ContestParticipant): 'WEEKLY_WINS' | 'CORRECT_PREDICTIONS' | 'TOP_10_FINISHES' {\n    // For now, default to correct predictions streak\n    return 'CORRECT_PREDICTIONS';\n  }\n\n  private calculateRecentMovers(contest: SeasonContest): RankingChange[] {\n    // Calculate recent movers based on ranking changes over last 2 weeks\n    const currentWeek = this.getCurrentWeek();\n    const currentRankings = this.calculateCurrentRankings(contest);\n    \n    // Get rankings from 2 weeks ago for comparison\n    const previousWeek = Math.max(1, currentWeek - 2);\n    const previousRankings = this.calculateHistoricalRankings(contest, previousWeek);\n    \n    const rankingChanges: RankingChange[] = [];\n    \n    for (const currentRanking of currentRankings) {\n      const previousRanking = previousRankings.find(p => p.userId === currentRanking.userId);\n      if (!previousRanking) continue;\n      \n      const change = previousRanking.rank - currentRanking.rank;\n      \n      if (Math.abs(change) >= 3) { // Significant movement\n        rankingChanges.push({\n          userId: currentRanking.userId,\n          userName: currentRanking.userName,\n          previousRank: previousRanking.rank,\n          currentRank: currentRanking.rank,\n          change,\n          reason: change > 0 ? 'Strong recent performance' : 'Recent struggles'\n        });\n      }\n    }\n    \n    rankingChanges.sort((a, b) => Math.abs(b.change) - Math.abs(a.change));\n    return rankingChanges.slice(0, 5);\n  }\n\n  private calculateCurrentRankings(contest: SeasonContest): ContestRanking[] {\n    return contest.participants\n      .map(participant => {\n        const totalScore = Object.values(participant.weeklyScores).reduce((sum, score) => sum + score, 0);\n        const weeklyAverage = this.calculateWeeklyAverage(contest, undefined, participant.userId);\n        const accuracy = this.calculateAccuracy(participant);\n        const streak = this.getCurrentStreak(participant);\n        const trend = this.determineTrend(participant);\n        \n        return {\n          rank: 0, // Will be set after sorting\n          userId: participant.userId,\n          userName: participant.userName || 'Unknown User',\n          totalScore,\n          weeklyAverage,\n          accuracy,\n          streak,\n          trend,\n          rankChange: 0,\n          badges: []\n        };\n      })\n      .sort((a, b) => b.totalScore - a.totalScore)\n      .map((ranking, index) => ({ ...ranking, rank: index + 1 }));\n  }\n\n  private calculateHistoricalRankings(contest: SeasonContest, week: number): ContestRanking[] {\n    // Calculate rankings as they would have been at specified week\n    return contest.participants\n      .map(participant => {\n        const totalScore = Object.entries(participant.weeklyScores)\n          .filter(([w]) => parseInt(w) <= week)\n          .reduce((sum, [, score]) => sum + score, 0);\n        \n        const accuracy = this.calculateAccuracy(participant);\n        const streak = this.getCurrentStreak(participant, week);\n        \n        return {\n          rank: 0, // Will be set after sorting\n          userId: participant.userId,\n          userName: participant.userName || 'Unknown User',\n          totalScore,\n          weeklyAverage: totalScore / week,\n          accuracy,\n          streak,\n          trend: 'STABLE' as const,\n          rankChange: 0,\n          badges: []\n        };\n      })\n      .sort((a, b) => b.totalScore - a.totalScore)\n      .map((ranking, index) => ({ ...ranking, rank: index + 1 }));\n  }\n\n  private calculateProjectedFinishes(contest: SeasonContest): ProjectedFinish[] {\n    // Calculate projected finishes based on current performance and trends\n    const currentRankings = this.calculateCurrentRankings(contest);\n    const totalWeeks = 18; // NFL regular season\n    const currentWeek = this.getCurrentWeek();\n    const remainingWeeks = totalWeeks - currentWeek;\n    \n    return currentRankings\n      .map(ranking => {\n        // Project future performance based on recent trend\n        let projectedChange = 0;\n        \n        switch (ranking.trend) {\n          case 'UP':\n            projectedChange = Math.min(remainingWeeks * 0.5, 3); // Positive momentum\n            break;\n          case 'DOWN':\n            projectedChange = Math.max(remainingWeeks * -0.5, -3); // Negative momentum\n            break;\n          case 'STABLE':\n            projectedChange = (Math.random() - 0.5) * 2; // Random variance\n            break;\n        }\n        \n        const projectedRank = Math.max(1, Math.min(contest.participants.length, \n          Math.round(ranking.rank + projectedChange)));\n        \n        // Calculate probability based on consistency\n        const probability = Math.max(0.3, Math.min(0.9, \n          (ranking.accuracy / 100) * 0.7 + (ranking.streak > 0 ? 0.2 : 0.1)));\n        \n        // Determine trend\n        let trend: 'IMPROVING' | 'DECLINING' | 'STABLE';\n        if (projectedRank < ranking.rank) {\n          trend = 'IMPROVING';\n        } else if (projectedRank > ranking.rank) {\n          trend = 'DECLINING';\n        } else {\n          trend = 'STABLE';\n        }\n        \n        return {\n          userId: ranking.userId,\n          userName: ranking.userName,\n          currentRank: ranking.rank,\n          projectedRank,\n          probability,\n          trend\n        };\n      })\n      .slice(0, 10);\n  }\n\n  private generateWeeklyPredictions(week: number): PredictionCategory[] {\n    // Generate prediction categories based on the current week\n    const baseCategories: PredictionCategory[] = [\n      {\n        id: `week-${week}-game-outcomes`,\n        name: 'Game Outcomes',\n        type: 'GAME_OUTCOME',\n        question: 'Which teams will win their games this week?',\n        options: [\n          { id: 'team-a', label: 'Team A wins' },\n          { id: 'team-b', label: 'Team B wins' }\n        ],\n        points: 5,\n        confidenceEnabled: true,\n        difficulty: 'MEDIUM'\n      },\n      {\n        id: `week-${week}-player-performance`,\n        name: 'Player Performance',\n        type: 'PLAYER_PERFORMANCE',\n        question: 'Which player will have the highest fantasy points?',\n        options: [\n          { id: 'player-1', label: 'Star QB' },\n          { id: 'player-2', label: 'Elite RB' },\n          { id: 'player-3', label: 'Top WR' }\n        ],\n        points: 10,\n        confidenceEnabled: true,\n        difficulty: 'HARD'\n      },\n      {\n        id: `week-${week}-team-stats`,\n        name: 'Team Statistics',\n        type: 'TEAM_STATS',\n        question: 'Which team will score the most points this week?',\n        options: [\n          { id: 'team-high', label: 'High-scoring offense' },\n          { id: 'team-avg', label: 'Average team' }\n        ],\n        points: 7,\n        confidenceEnabled: false,\n        difficulty: 'EASY'\n      }\n    ];\n    \n    return baseCategories;\n  }\n\n  private generateBonusQuestions(week: number): BonusQuestion[] {\n    // Generate bonus questions for the week\n    return [\n      {\n        id: `bonus-${week}-upset`,\n        question: 'Will there be an upset (underdog wins by 7+ points)?',\n        type: 'TRUE_FALSE',\n        options: ['Yes', 'No'],\n        pointValue: 15,\n        difficulty: 'MEDIUM'\n      },\n      {\n        id: `bonus-${week}-total-points`,\n        question: 'What will be the total points scored across all games?',\n        type: 'MULTIPLE_CHOICE',\n        options: ['Under 350', '350-450', 'Over 450'],\n        pointValue: 10,\n        difficulty: 'HARD'\n      },\n      {\n        id: `bonus-${week}-defensive`,\n        question: 'Which team will have the most defensive takeaways?',\n        type: 'MULTIPLE_CHOICE',\n        options: ['Team Defense A', 'Team Defense B', 'Team Defense C'],\n        pointValue: 12,\n        difficulty: 'HARD'\n      }\n    ];\n  }\n\n  private getWeekDeadline(week: number): Date {\n    // Calculate deadline based on week (typically Thursday before games start)\n    const now = new Date();\n    const currentYear = now.getFullYear();\n    \n    // Approximate NFL season start (first Thursday in September)\n    const seasonStart = new Date(currentYear, 8, 8); // September 8th\n    const firstThursday = new Date(seasonStart);\n    \n    // Adjust to first Thursday\n    const dayOfWeek = firstThursday.getDay();\n    const daysToThursday = (4 - dayOfWeek + 7) % 7;\n    firstThursday.setDate(firstThursday.getDate() + daysToThursday);\n    \n    // Calculate deadline for the specific week\n    const weekDeadline = new Date(firstThursday);\n    weekDeadline.setDate(weekDeadline.getDate() + (week - 1) * 7);\n    weekDeadline.setHours(20, 30, 0, 0); // 8:30 PM ET\n    \n    return weekDeadline;\n  }\n\n  private generateBracketRounds(): BracketRound[] {\n    // Generate playoff bracket rounds for NFL season\n    const rounds: BracketRound[] = [\n      {\n        round: 1,\n        name: 'Wild Card',\n        games: [],\n        pointValue: 10,\n        deadline: this.getWeekDeadline(19),\n        status: 'UPCOMING'\n      },\n      {\n        round: 2,\n        name: 'Divisional',\n        games: [],\n        pointValue: 15,\n        deadline: this.getWeekDeadline(20),\n        status: 'UPCOMING'\n      },\n      {\n        round: 3,\n        name: 'Conference',\n        games: [],\n        pointValue: 20,\n        deadline: this.getWeekDeadline(21),\n        status: 'UPCOMING'\n      },\n      {\n        round: 4,\n        name: 'Super Bowl',\n        games: [],\n        pointValue: 30,\n        deadline: this.getWeekDeadline(22),\n        status: 'UPCOMING'\n      }\n    ];\n    return rounds;\n  }\n}\n\n// Export singleton instance\nexport const seasonContestService = new SeasonContestService();\nexport default seasonContestService;\n","import React, { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { seasonContestService, SeasonContest } from '../services/seasonContestService';\n\ninterface SeasonContestViewProps {\n  userId?: string;\n}\n\nconst SeasonContestView: React.FC<SeasonContestViewProps> = ({ userId = 'user-123' }) => {\n  const [activeTab, setActiveTab] = useState<'overview' | 'weekly' | 'bracket' | 'awards' | 'leaderboard'>('overview');\n  const [selectedContest, setSelectedContest] = useState<SeasonContest | null>(null);\n  const [activeWeek, setActiveWeek] = useState<number>(1);\n  const [userContests, setUserContests] = useState<SeasonContest[]>([]);\n  const [allContests, setAllContests] = useState<SeasonContest[]>([]);\n\n  useEffect(() => {\n    // Load user's contests\n    const contests = seasonContestService.getUserContests(userId);\n    setUserContests(contests);\n    \n    // Load all active contests\n    const active = seasonContestService.getActiveContests();\n    setAllContests(active);\n    \n    // Set default selected contest\n    if (contests.length > 0) {\n      setSelectedContest(contests[0]);\n    }\n  }, [userId]);\n\n  const getContestStatusColor = (status: SeasonContest['status']) => {\n    switch (status) {\n      case 'ACTIVE': return 'text-green-600 bg-green-100';\n      case 'UPCOMING': return 'text-blue-600 bg-blue-100';\n      case 'COMPLETED': return 'text-gray-600 bg-gray-100';\n      default: return 'text-gray-600 bg-gray-100';\n    }\n  };\n\n  const getContestTypeIcon = (type: SeasonContest['contestType']) => {\n    switch (type) {\n      case 'WEEKLY_PREDICTIONS': return '📊';\n      case 'PLAYOFF_BRACKET': return '🏆';\n      case 'SEASON_AWARDS': return '🏅';\n      case 'MILESTONE_PREDICTIONS': return '🎯';\n      default: return '📈';\n    }\n  };\n\n  const renderOverview = () => (\n    <div className=\"space-y-6\">\n      {/* Contest Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <div className=\"bg-white rounded-lg p-6 shadow-sm border\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-gray-600\">Active Contests</p>\n              <p className=\"text-2xl font-bold text-gray-900\">{userContests.filter(c => c.status === 'ACTIVE').length}</p>\n            </div>\n            <div className=\"text-3xl\">🎯</div>\n          </div>\n        </div>\n        \n        <div className=\"bg-white rounded-lg p-6 shadow-sm border\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-gray-600\">Total Points</p>\n              <p className=\"text-2xl font-bold text-gray-900\">\n                {selectedContest?.participants.find(p => p.userId === userId)?.totalScore || 0}\n              </p>\n            </div>\n            <div className=\"text-3xl\">📊</div>\n          </div>\n        </div>\n        \n        <div className=\"bg-white rounded-lg p-6 shadow-sm border\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-gray-600\">Current Rank</p>\n              <p className=\"text-2xl font-bold text-gray-900\">\n                {selectedContest?.participants.find(p => p.userId === userId)?.currentRank || '-'}\n              </p>\n            </div>\n            <div className=\"text-3xl\">🏅</div>\n          </div>\n        </div>\n      </div>\n\n      {/* Active Contests */}\n      <div className=\"bg-white rounded-lg shadow-sm border\">\n        <div className=\"p-6 border-b\">\n          <h2 className=\"text-xl font-semibold text-gray-900\">Your Contests</h2>\n        </div>\n        <div className=\"p-6\">\n          {userContests.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <div className=\"text-6xl mb-4\">🏆</div>\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No Active Contests</h3>\n              <p className=\"text-gray-600 mb-4\">Join a contest to start competing for prizes!</p>\n              <button className=\"bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg transition-colors\">\n                Browse Available Contests\n              </button>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {userContests.map(contest => (\n                <motion.div\n                  key={contest.id}\n                  whileHover={{ scale: 1.01 }}\n                  className={`p-4 rounded-lg border-2 cursor-pointer transition-all ${\n                    selectedContest?.id === contest.id \n                      ? 'border-blue-500 bg-blue-50' \n                      : 'border-gray-200 hover:border-gray-300'\n                  }`}\n                  onClick={() => setSelectedContest(contest)}\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"text-2xl\">{getContestTypeIcon(contest.contestType)}</div>\n                      <div>\n                        <h3 className=\"font-semibold text-gray-900\">{contest.name}</h3>\n                        <p className=\"text-sm text-gray-600\">{contest.description}</p>\n                        <div className=\"flex items-center space-x-4 mt-2\">\n                          <span className={`px-2 py-1 rounded-full text-xs font-medium ${getContestStatusColor(contest.status)}`}>\n                            {contest.status}\n                          </span>\n                          <span className=\"text-xs text-gray-500\">\n                            {contest.participants.length} participants\n                          </span>\n                          <span className=\"text-xs text-gray-500\">\n                            Prize Pool: ${contest.prizePool.toLocaleString()}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"text-lg font-bold text-gray-900\">\n                        {contest.participants.find(p => p.userId === userId)?.totalScore || 0} pts\n                      </div>\n                      <div className=\"text-sm text-gray-600\">\n                        Rank #{contest.participants.find(p => p.userId === userId)?.currentRank || '-'}\n                      </div>\n                    </div>\n                  </div>\n                </motion.div>\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Available Contests */}\n      <div className=\"bg-white rounded-lg shadow-sm border\">\n        <div className=\"p-6 border-b\">\n          <h2 className=\"text-xl font-semibold text-gray-900\">Available Contests</h2>\n        </div>\n        <div className=\"p-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {allContests.filter(c => !userContests.some(uc => uc.id === c.id)).map(contest => (\n              <div key={contest.id} className=\"p-4 rounded-lg border border-gray-200\">\n                <div className=\"flex items-center space-x-3 mb-3\">\n                  <div className=\"text-xl\">{getContestTypeIcon(contest.contestType)}</div>\n                  <div>\n                    <h3 className=\"font-semibold text-gray-900\">{contest.name}</h3>\n                    <span className={`px-2 py-1 rounded-full text-xs font-medium ${getContestStatusColor(contest.status)}`}>\n                      {contest.status}\n                    </span>\n                  </div>\n                </div>\n                <p className=\"text-sm text-gray-600 mb-4\">{contest.description}</p>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"text-sm text-gray-500\">\n                    Prize Pool: ${contest.prizePool.toLocaleString()}\n                  </div>\n                  <button className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded text-sm transition-colors\">\n                    Join Contest\n                  </button>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderWeeklyPredictions = () => (\n    <div className=\"space-y-6\">\n      {selectedContest?.weeks && (\n        <>\n          {/* Week Navigation */}\n          <div className=\"bg-white rounded-lg shadow-sm border p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h2 className=\"text-xl font-semibold text-gray-900\">Weekly Predictions</h2>\n              <div className=\"flex items-center space-x-2\">\n                <label className=\"text-sm text-gray-600\">Week:</label>\n                <select\n                  value={activeWeek}\n                  onChange={(e) => setActiveWeek(parseInt(e.target.value))}\n                  className=\"border border-gray-300 rounded-lg px-3 py-1 text-sm\"\n                >\n                  {selectedContest.weeks.map(week => (\n                    <option key={week.week} value={week.week}>\n                      Week {week.week}\n                    </option>\n                  ))}\n                </select>\n              </div>\n            </div>\n\n            {(() => {\n              const currentWeek = selectedContest.weeks.find(w => w.week === activeWeek);\n              if (!currentWeek) return <div>Week not found</div>;\n\n              return (\n                <div className=\"space-y-6\">\n                  {/* Week Status */}\n                  <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n                    <div>\n                      <h3 className=\"font-semibold text-gray-900\">{currentWeek.theme}</h3>\n                      <p className=\"text-sm text-gray-600\">\n                        Deadline: {currentWeek.deadline.toLocaleDateString()} at {currentWeek.deadline.toLocaleTimeString()}\n                      </p>\n                    </div>\n                    <span className={`px-3 py-1 rounded-full text-sm font-medium ${\n                      currentWeek.status === 'OPEN' ? 'text-green-600 bg-green-100' :\n                      currentWeek.status === 'LOCKED' ? 'text-orange-600 bg-orange-100' :\n                      currentWeek.status === 'COMPLETED' ? 'text-gray-600 bg-gray-100' :\n                      'text-blue-600 bg-blue-100'\n                    }`}>\n                      {currentWeek.status}\n                    </span>\n                  </div>\n\n                  {/* Predictions */}\n                  <div className=\"space-y-4\">\n                    {currentWeek.predictions.map(prediction => (\n                      <div key={prediction.id} className=\"p-4 border border-gray-200 rounded-lg\">\n                        <div className=\"flex items-center justify-between mb-3\">\n                          <h4 className=\"font-medium text-gray-900\">{prediction.question}</h4>\n                          <div className=\"flex items-center space-x-2\">\n                            <span className=\"text-sm text-gray-500\">{prediction.points} pts</span>\n                            <span className={`px-2 py-1 rounded text-xs font-medium ${\n                              prediction.difficulty === 'EASY' ? 'text-green-600 bg-green-100' :\n                              prediction.difficulty === 'MEDIUM' ? 'text-orange-600 bg-orange-100' :\n                              prediction.difficulty === 'HARD' ? 'text-red-600 bg-red-100' :\n                              'text-purple-600 bg-purple-100'\n                            }`}>\n                              {prediction.difficulty}\n                            </span>\n                          </div>\n                        </div>\n                        \n                        <div className=\"space-y-2\">\n                          {prediction.options.map(option => (\n                            <label\n                              key={option.id}\n                              className=\"flex items-center space-x-3 p-2 rounded hover:bg-gray-50 cursor-pointer\"\n                            >\n                              <input\n                                type=\"radio\"\n                                name={prediction.id}\n                                value={option.id}\n                                className=\"text-blue-600\"\n                                disabled={currentWeek.status !== 'OPEN'}\n                              />\n                              <span className=\"text-sm text-gray-900\">{option.label}</span>\n                              {option.odds && (\n                                <span className=\"text-xs text-gray-500\">({option.odds > 0 ? '+' : ''}{option.odds})</span>\n                              )}\n                            </label>\n                          ))}\n                        </div>\n\n                        {prediction.confidenceEnabled && currentWeek.status === 'OPEN' && (\n                          <div className=\"mt-3 pt-3 border-t border-gray-200\">\n                            <label className=\"block text-sm text-gray-600 mb-2\">\n                              Confidence Level (1-5):\n                            </label>\n                            <input\n                              type=\"range\"\n                              min=\"1\"\n                              max=\"5\"\n                              className=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer\"\n                            />\n                          </div>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n\n                  {/* Bonus Questions */}\n                  {currentWeek.bonusQuestions.length > 0 && (\n                    <div className=\"space-y-4\">\n                      <h3 className=\"text-lg font-semibold text-gray-900\">Bonus Questions</h3>\n                      {currentWeek.bonusQuestions.map(bonus => (\n                        <div key={bonus.id} className=\"p-4 border border-gray-200 rounded-lg bg-blue-50\">\n                          <div className=\"flex items-center justify-between mb-3\">\n                            <h4 className=\"font-medium text-gray-900\">{bonus.question}</h4>\n                            <span className=\"text-sm text-blue-600 font-medium\">+{bonus.pointValue} bonus</span>\n                          </div>\n                          \n                          {bonus.type === 'MULTIPLE_CHOICE' && bonus.options && (\n                            <div className=\"space-y-2\">\n                              {bonus.options.map((option, index) => (\n                                <label\n                                  key={index}\n                                  className=\"flex items-center space-x-3 p-2 rounded hover:bg-blue-100 cursor-pointer\"\n                                >\n                                  <input\n                                    type=\"radio\"\n                                    name={bonus.id}\n                                    value={option}\n                                    className=\"text-blue-600\"\n                                    disabled={currentWeek.status !== 'OPEN'}\n                                  />\n                                  <span className=\"text-sm text-gray-900\">{option}</span>\n                                </label>\n                              ))}\n                            </div>\n                          )}\n\n                          {bonus.type === 'NUMERIC' && (\n                            <input\n                              type=\"number\"\n                              className=\"w-full p-2 border border-gray-300 rounded-lg\"\n                              placeholder=\"Enter your prediction...\"\n                              disabled={currentWeek.status !== 'OPEN'}\n                            />\n                          )}\n\n                          {bonus.type === 'TRUE_FALSE' && (\n                            <div className=\"flex space-x-4\">\n                              <label className=\"flex items-center space-x-2\">\n                                <input\n                                  type=\"radio\"\n                                  name={bonus.id}\n                                  value=\"true\"\n                                  className=\"text-blue-600\"\n                                  disabled={currentWeek.status !== 'OPEN'}\n                                />\n                                <span className=\"text-sm text-gray-900\">True</span>\n                              </label>\n                              <label className=\"flex items-center space-x-2\">\n                                <input\n                                  type=\"radio\"\n                                  name={bonus.id}\n                                  value=\"false\"\n                                  className=\"text-blue-600\"\n                                  disabled={currentWeek.status !== 'OPEN'}\n                                />\n                                <span className=\"text-sm text-gray-900\">False</span>\n                              </label>\n                            </div>\n                          )}\n                        </div>\n                      ))}\n                    </div>\n                  )}\n\n                  {/* Submit Button */}\n                  {currentWeek.status === 'OPEN' && (\n                    <div className=\"flex justify-end\">\n                      <button className=\"bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg transition-colors\">\n                        Submit Predictions\n                      </button>\n                    </div>\n                  )}\n\n                  {/* Results */}\n                  {currentWeek.status === 'COMPLETED' && currentWeek.results && (\n                    <div className=\"bg-green-50 border border-green-200 rounded-lg p-6\">\n                      <h3 className=\"text-lg font-semibold text-green-900 mb-4\">Week {activeWeek} Results</h3>\n                      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                        <div>\n                          <p className=\"text-sm text-green-600\">Your Score</p>\n                          <p className=\"text-2xl font-bold text-green-900\">\n                            {selectedContest.participants.find(p => p.userId === userId)?.weeklyScores[activeWeek] || 0}\n                          </p>\n                        </div>\n                        <div>\n                          <p className=\"text-sm text-green-600\">Average Score</p>\n                          <p className=\"text-2xl font-bold text-green-900\">\n                            {currentWeek.results.averageScore.toFixed(1)}\n                          </p>\n                        </div>\n                        <div>\n                          <p className=\"text-sm text-green-600\">Weekly Rank</p>\n                          <p className=\"text-2xl font-bold text-green-900\">\n                            {selectedContest.participants.find(p => p.userId === userId)?.predictions[activeWeek]?.weeklyRank || '-'}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              );\n            })()}\n          </div>\n        </>\n      )}\n    </div>\n  );\n\n  const renderLeaderboard = () => (\n    <div className=\"bg-white rounded-lg shadow-sm border\">\n      <div className=\"p-6 border-b\">\n        <h2 className=\"text-xl font-semibold text-gray-900\">Contest Leaderboard</h2>\n      </div>\n      <div className=\"p-6\">\n        {selectedContest?.leaderboard.rankings.map((ranking, index) => (\n          <motion.div\n            key={ranking.userId}\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: index * 0.1 }}\n            className={`flex items-center justify-between p-4 rounded-lg mb-3 ${\n              ranking.userId === userId ? 'bg-blue-50 border border-blue-200' : 'bg-gray-50'\n            }`}\n          >\n            <div className=\"flex items-center space-x-4\">\n              <div className={`w-8 h-8 rounded-full flex items-center justify-center font-bold text-sm ${\n                ranking.rank === 1 ? 'bg-yellow-400 text-yellow-900' :\n                ranking.rank === 2 ? 'bg-gray-300 text-gray-700' :\n                ranking.rank === 3 ? 'bg-orange-400 text-orange-900' :\n                'bg-gray-200 text-gray-600'\n              }`}>\n                {ranking.rank}\n              </div>\n              <div>\n                <div className=\"flex items-center space-x-2\">\n                  <span className=\"font-semibold text-gray-900\">{ranking.userName}</span>\n                  {ranking.userId === userId && (\n                    <span className=\"text-xs bg-blue-600 text-white px-2 py-1 rounded\">You</span>\n                  )}\n                </div>\n                <div className=\"flex items-center space-x-4 text-sm text-gray-600\">\n                  <span>Accuracy: {ranking.accuracy.toFixed(1)}%</span>\n                  <span>Streak: {ranking.streak}</span>\n                  <span>Avg: {ranking.weeklyAverage.toFixed(1)}</span>\n                </div>\n              </div>\n            </div>\n            <div className=\"text-right\">\n              <div className=\"text-lg font-bold text-gray-900\">{ranking.totalScore}</div>\n              <div className={`text-sm ${\n                ranking.rankChange > 0 ? 'text-green-600' :\n                ranking.rankChange < 0 ? 'text-red-600' : 'text-gray-500'\n              }`}>\n                {ranking.rankChange > 0 ? '↗' : ranking.rankChange < 0 ? '↘' : '→'} \n                {Math.abs(ranking.rankChange)}\n              </div>\n            </div>\n          </motion.div>\n        ))}\n      </div>\n    </div>\n  );\n\n  if (!selectedContest) {\n    return (\n      <div className=\"p-8 text-center\">\n        <div className=\"text-6xl mb-4\">🏆</div>\n        <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">No Contest Selected</h2>\n        <p className=\"text-gray-600\">Join a contest to start competing!</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <div className=\"max-w-7xl mx-auto p-6\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Season Contests</h1>\n          <p className=\"text-gray-600\">Compete in season-long prediction contests and championship brackets</p>\n        </div>\n\n        {/* Contest Selection */}\n        {userContests.length > 1 && (\n          <div className=\"mb-6\">\n            <div className=\"flex space-x-2\">\n              {userContests.map(contest => (\n                <button\n                  key={contest.id}\n                  onClick={() => setSelectedContest(contest)}\n                  className={`px-4 py-2 rounded-lg text-sm font-medium transition-colors ${\n                    selectedContest.id === contest.id\n                      ? 'bg-blue-600 text-white'\n                      : 'bg-white text-gray-600 hover:bg-gray-50'\n                  }`}\n                >\n                  {contest.name}\n                </button>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Tab Navigation */}\n        <div className=\"mb-6\">\n          <div className=\"border-b border-gray-200\">\n            <nav className=\"-mb-px flex space-x-8\">\n              {[\n                { id: 'overview', label: 'Overview', icon: '📊' },\n                { id: 'weekly', label: 'Weekly Predictions', icon: '📅' },\n                { id: 'bracket', label: 'Playoff Bracket', icon: '🏆' },\n                { id: 'awards', label: 'Season Awards', icon: '🏅' },\n                { id: 'leaderboard', label: 'Leaderboard', icon: '👑' }\n              ].map(tab => (\n                <button\n                  key={tab.id}\n                  onClick={() => setActiveTab(tab.id as any)}\n                  className={`flex items-center space-x-2 py-2 px-1 border-b-2 font-medium text-sm ${\n                    activeTab === tab.id\n                      ? 'border-blue-500 text-blue-600'\n                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                  }`}\n                >\n                  <span>{tab.icon}</span>\n                  <span>{tab.label}</span>\n                </button>\n              ))}\n            </nav>\n          </div>\n        </div>\n\n        {/* Tab Content */}\n        <AnimatePresence mode=\"wait\">\n          <motion.div\n            key={activeTab}\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -20 }}\n            transition={{ duration: 0.2 }}\n          >\n            {activeTab === 'overview' && renderOverview()}\n            {activeTab === 'weekly' && renderWeeklyPredictions()}\n            {activeTab === 'leaderboard' && renderLeaderboard()}\n            {activeTab === 'bracket' && (\n              <div className=\"bg-white rounded-lg shadow-sm border p-6 text-center\">\n                <div className=\"text-6xl mb-4\">🏆</div>\n                <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">Playoff Bracket</h3>\n                <p className=\"text-gray-600\">Bracket predictions will be available during playoff season</p>\n              </div>\n            )}\n            {activeTab === 'awards' && (\n              <div className=\"bg-white rounded-lg shadow-sm border p-6 text-center\">\n                <div className=\"text-6xl mb-4\">🏅</div>\n                <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">Season Awards</h3>\n                <p className=\"text-gray-600\">Award predictions will be available near the end of the season</p>\n              </div>\n            )}\n          </motion.div>\n        </AnimatePresence>\n      </div>\n    </div>\n  );\n};\n\nexport default SeasonContestView;\n"],"names":["SeasonContestService","__publicField","contestData","contest","contestId","userId","userName","avatar","p","participant","userContests","week","predictions","weeklyContest","w","prediction","category","o","picks","results","weeklyPrediction","weeklyScore","currentStreak","categoryId","correctAnswer","isCorrect","points","weight","streakBonus","weeklyBonuses","b","bonus","id","theme","sortedParticipants","index","previousRank","newRank","rankChange","now","seasonStart","daysSinceStart","currentWeek","streak","condition","deadline","a","scores","weeklyScores","score","difficulty","baseDifficulty","variance","actualDifficulty","surprises","expectedDifficulty","actualDiff","surpriseType","totalQuestions","bonusQuestions","analysis","difficulties","avgDifficulty","topSurprises","s","totalPredictions","correctPredictions","recentWeeks","i","n","sumX","sum","_","sumY","sumXY","sumXX","slope","leader","longestStreak","weeks","currentRankings","previousWeek","previousRankings","rankingChanges","currentRanking","previousRanking","change","totalScore","weeklyAverage","accuracy","trend","ranking","totalWeeks","remainingWeeks","projectedChange","projectedRank","probability","currentYear","firstThursday","daysToThursday","weekDeadline","seasonContestService","SeasonContestView","activeTab","setActiveTab","useState","selectedContest","setSelectedContest","activeWeek","setActiveWeek","setUserContests","allContests","setAllContests","useEffect","contests","active","getContestStatusColor","status","getContestTypeIcon","type","renderOverview","jsxDEV","this","c","motion","uc","renderWeeklyPredictions","Fragment","e","option","renderLeaderboard","tab","AnimatePresence"],"mappings":"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"}