{"version":3,"file":"index-CwQkY9CC.js","sources":["../../node_modules/devlop/lib/development.js","../../node_modules/comma-separated-tokens/index.js","../../node_modules/estree-util-is-identifier-name/lib/index.js","../../node_modules/hast-util-whitespace/lib/index.js","../../node_modules/property-information/lib/util/schema.js","../../node_modules/property-information/lib/util/merge.js","../../node_modules/property-information/lib/normalize.js","../../node_modules/property-information/lib/util/info.js","../../node_modules/property-information/lib/util/types.js","../../node_modules/property-information/lib/util/defined-info.js","../../node_modules/property-information/lib/util/create.js","../../node_modules/property-information/lib/aria.js","../../node_modules/property-information/lib/util/case-sensitive-transform.js","../../node_modules/property-information/lib/util/case-insensitive-transform.js","../../node_modules/property-information/lib/html.js","../../node_modules/property-information/lib/svg.js","../../node_modules/property-information/lib/xlink.js","../../node_modules/property-information/lib/xmlns.js","../../node_modules/property-information/lib/xml.js","../../node_modules/property-information/lib/hast-to-react.js","../../node_modules/property-information/lib/find.js","../../node_modules/property-information/index.js","../../node_modules/space-separated-tokens/index.js","../../node_modules/inline-style-parser/index.js","../../node_modules/style-to-object/cjs/index.js","../../node_modules/style-to-js/cjs/utilities.js","../../node_modules/style-to-js/cjs/index.js","../../node_modules/unist-util-position/lib/index.js","../../node_modules/unist-util-stringify-position/lib/index.js","../../node_modules/vfile-message/lib/index.js","../../node_modules/hast-util-to-jsx-runtime/lib/index.js","../../node_modules/html-url-attributes/lib/index.js","../../node_modules/mdast-util-to-string/lib/index.js","../../node_modules/decode-named-character-reference/index.dom.js","../../node_modules/micromark-util-symbol/lib/codes.js","../../node_modules/micromark-util-symbol/lib/constants.js","../../node_modules/micromark-util-symbol/lib/types.js","../../node_modules/micromark-util-symbol/lib/values.js","../../node_modules/micromark-util-chunked/dev/index.js","../../node_modules/micromark-util-combine-extensions/index.js","../../node_modules/micromark-util-decode-numeric-character-reference/dev/index.js","../../node_modules/micromark-util-normalize-identifier/dev/index.js","../../node_modules/micromark-util-character/dev/index.js","../../node_modules/micromark-util-sanitize-uri/dev/index.js","../../node_modules/micromark-factory-space/dev/index.js","../../node_modules/micromark/dev/lib/initialize/content.js","../../node_modules/micromark/dev/lib/initialize/document.js","../../node_modules/micromark-util-classify-character/dev/index.js","../../node_modules/micromark-util-resolve-all/index.js","../../node_modules/micromark-core-commonmark/dev/lib/attention.js","../../node_modules/micromark-core-commonmark/dev/lib/autolink.js","../../node_modules/micromark-core-commonmark/dev/lib/blank-line.js","../../node_modules/micromark-core-commonmark/dev/lib/block-quote.js","../../node_modules/micromark-core-commonmark/dev/lib/character-escape.js","../../node_modules/micromark-core-commonmark/dev/lib/character-reference.js","../../node_modules/micromark-core-commonmark/dev/lib/code-fenced.js","../../node_modules/micromark-core-commonmark/dev/lib/code-indented.js","../../node_modules/micromark-core-commonmark/dev/lib/code-text.js","../../node_modules/micromark-util-subtokenize/dev/lib/splice-buffer.js","../../node_modules/micromark-util-subtokenize/dev/index.js","../../node_modules/micromark-core-commonmark/dev/lib/content.js","../../node_modules/micromark-factory-destination/dev/index.js","../../node_modules/micromark-factory-label/dev/index.js","../../node_modules/micromark-factory-title/dev/index.js","../../node_modules/micromark-factory-whitespace/dev/index.js","../../node_modules/micromark-core-commonmark/dev/lib/definition.js","../../node_modules/micromark-core-commonmark/dev/lib/hard-break-escape.js","../../node_modules/micromark-core-commonmark/dev/lib/heading-atx.js","../../node_modules/micromark-util-html-tag-name/index.js","../../node_modules/micromark-core-commonmark/dev/lib/html-flow.js","../../node_modules/micromark-core-commonmark/dev/lib/html-text.js","../../node_modules/micromark-core-commonmark/dev/lib/label-end.js","../../node_modules/micromark-core-commonmark/dev/lib/label-start-image.js","../../node_modules/micromark-core-commonmark/dev/lib/label-start-link.js","../../node_modules/micromark-core-commonmark/dev/lib/line-ending.js","../../node_modules/micromark-core-commonmark/dev/lib/thematic-break.js","../../node_modules/micromark-core-commonmark/dev/lib/list.js","../../node_modules/micromark-core-commonmark/dev/lib/setext-underline.js","../../node_modules/micromark/dev/lib/initialize/flow.js","../../node_modules/micromark/dev/lib/initialize/text.js","../../node_modules/micromark/dev/lib/constructs.js","../../node_modules/ms/index.js","../../node_modules/debug/src/common.js","../../node_modules/debug/src/browser.js","../../node_modules/micromark/dev/lib/create-tokenizer.js","../../node_modules/micromark/dev/lib/parse.js","../../node_modules/micromark/dev/lib/postprocess.js","../../node_modules/micromark/dev/lib/preprocess.js","../../node_modules/micromark-util-decode-string/dev/index.js","../../node_modules/mdast-util-from-markdown/dev/lib/index.js","../../node_modules/remark-parse/lib/index.js","../../node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","../../node_modules/mdast-util-to-hast/lib/handlers/break.js","../../node_modules/mdast-util-to-hast/lib/handlers/code.js","../../node_modules/mdast-util-to-hast/lib/handlers/delete.js","../../node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","../../node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","../../node_modules/mdast-util-to-hast/lib/handlers/heading.js","../../node_modules/mdast-util-to-hast/lib/handlers/html.js","../../node_modules/mdast-util-to-hast/lib/revert.js","../../node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","../../node_modules/mdast-util-to-hast/lib/handlers/image.js","../../node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","../../node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","../../node_modules/mdast-util-to-hast/lib/handlers/link.js","../../node_modules/mdast-util-to-hast/lib/handlers/list-item.js","../../node_modules/mdast-util-to-hast/lib/handlers/list.js","../../node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","../../node_modules/mdast-util-to-hast/lib/handlers/root.js","../../node_modules/mdast-util-to-hast/lib/handlers/strong.js","../../node_modules/mdast-util-to-hast/lib/handlers/table.js","../../node_modules/mdast-util-to-hast/lib/handlers/table-row.js","../../node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","../../node_modules/trim-lines/index.js","../../node_modules/mdast-util-to-hast/lib/handlers/text.js","../../node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","../../node_modules/mdast-util-to-hast/lib/handlers/index.js","../../node_modules/@ungap/structured-clone/esm/types.js","../../node_modules/@ungap/structured-clone/esm/deserialize.js","../../node_modules/@ungap/structured-clone/esm/serialize.js","../../node_modules/@ungap/structured-clone/esm/index.js","../../node_modules/mdast-util-to-hast/lib/footer.js","../../node_modules/unist-util-is/lib/index.js","../../node_modules/unist-util-visit-parents/lib/index.js","../../node_modules/unist-util-visit/lib/index.js","../../node_modules/mdast-util-to-hast/lib/state.js","../../node_modules/mdast-util-to-hast/lib/index.js","../../node_modules/remark-rehype/lib/index.js","../../node_modules/bail/index.js","../../node_modules/extend/index.js","../../node_modules/is-plain-obj/index.js","../../node_modules/trough/lib/index.js","../../node_modules/vfile/lib/minpath.browser.js","../../node_modules/vfile/lib/minproc.browser.js","../../node_modules/vfile/lib/minurl.shared.js","../../node_modules/vfile/lib/minurl.browser.js","../../node_modules/vfile/lib/index.js","../../node_modules/unified/lib/callable-instance.js","../../node_modules/unified/lib/index.js","../../node_modules/react-markdown/lib/index.js"],"sourcesContent":["import {dequal} from 'dequal'\n\n/**\n * @type {Set<string>}\n */\nconst codesWarned = new Set()\n\nclass AssertionError extends Error {\n  name = /** @type {const} */ ('Assertion')\n  code = /** @type {const} */ ('ERR_ASSERTION')\n\n  /**\n   * Create an assertion error.\n   *\n   * @param {string} message\n   *   Message explaining error.\n   * @param {unknown} actual\n   *   Value.\n   * @param {unknown} expected\n   *   Baseline.\n   * @param {string} operator\n   *   Name of equality operation.\n   * @param {boolean} generated\n   *   Whether `message` is a custom message or not\n   * @returns\n   *   Instance.\n   */\n  // eslint-disable-next-line max-params\n  constructor(message, actual, expected, operator, generated) {\n    super(message)\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor)\n    }\n\n    /**\n     * @type {unknown}\n     */\n    this.actual = actual\n\n    /**\n     * @type {unknown}\n     */\n    this.expected = expected\n\n    /**\n     * @type {boolean}\n     */\n    this.generated = generated\n\n    /**\n     * @type {string}\n     */\n    this.operator = operator\n  }\n}\n\nclass DeprecationError extends Error {\n  name = /** @type {const} */ ('DeprecationWarning')\n\n  /**\n   * Create a deprecation message.\n   *\n   * @param {string} message\n   *   Message explaining deprecation.\n   * @param {string | undefined} code\n   *   Deprecation identifier; deprecation messages will be generated only once per code.\n   * @returns\n   *   Instance.\n   */\n  constructor(message, code) {\n    super(message)\n\n    /**\n     * @type {string | undefined}\n     */\n    this.code = code\n  }\n}\n\n/**\n * Wrap a function or class to show a deprecation message when first called.\n *\n * > 👉 **Important**: only shows a message when the `development` condition is\n * > used, does nothing in production.\n *\n * When the resulting wrapped `fn` is called, emits a warning once to\n * `console.error` (`stderr`).\n * If a code is given, one warning message will be emitted in total per code.\n *\n * @template {Function} T\n *   Function or class kind.\n * @param {T} fn\n *   Function or class.\n * @param {string} message\n *   Message explaining deprecation.\n * @param {string | null | undefined} [code]\n *   Deprecation identifier (optional); deprecation messages will be generated\n *   only once per code.\n * @returns {T}\n *   Wrapped `fn`.\n */\nexport function deprecate(fn, message, code) {\n  let warned = false\n\n  // The wrapper will keep the same prototype as fn to maintain prototype chain\n  Object.setPrototypeOf(deprecated, fn)\n\n  // @ts-expect-error: it’s perfect, typescript…\n  return deprecated\n\n  /**\n   * @this {unknown}\n   * @param  {...Array<unknown>} args\n   * @returns {unknown}\n   */\n  function deprecated(...args) {\n    if (!warned) {\n      warned = true\n\n      if (typeof code === 'string' && codesWarned.has(code)) {\n        // Empty.\n      } else {\n        console.error(new DeprecationError(message, code || undefined))\n\n        if (typeof code === 'string') codesWarned.add(code)\n      }\n    }\n\n    return new.target\n      ? Reflect.construct(fn, args, new.target)\n      : Reflect.apply(fn, this, args)\n  }\n}\n\n/**\n * Assert deep strict equivalence.\n *\n * > 👉 **Important**: only asserts when the `development` condition is used,\n * > does nothing in production.\n *\n * @template {unknown} T\n *   Expected kind.\n * @param {unknown} actual\n *   Value.\n * @param {T} expected\n *   Baseline.\n * @param {Error | string | null | undefined} [message]\n *   Message for assertion error (default: `'Expected values to be deeply equal'`).\n * @returns {asserts actual is T}\n *   Nothing; throws when `actual` is not deep strict equal to `expected`.\n * @throws {AssertionError}\n *   Throws when `actual` is not deep strict equal to `expected`.\n */\nexport function equal(actual, expected, message) {\n  assert(\n    dequal(actual, expected),\n    actual,\n    expected,\n    'equal',\n    'Expected values to be deeply equal',\n    message\n  )\n}\n\n/**\n * Assert if `value` is truthy.\n *\n * > 👉 **Important**: only asserts when the `development` condition is used,\n * > does nothing in production.\n *\n * @param {unknown} value\n *   Value to assert.\n * @param {Error | string | null | undefined} [message]\n *   Message for assertion error (default: `'Expected value to be truthy'`).\n * @returns {asserts value}\n *   Nothing; throws when `value` is falsey.\n * @throws {AssertionError}\n *   Throws when `value` is falsey.\n */\nexport function ok(value, message) {\n  assert(\n    Boolean(value),\n    false,\n    true,\n    'ok',\n    'Expected value to be truthy',\n    message\n  )\n}\n\n/**\n * Assert that a code path never happens.\n *\n * > 👉 **Important**: only asserts when the `development` condition is used,\n * > does nothing in production.\n *\n * @param {Error | string | null | undefined} [message]\n *   Message for assertion error (default: `'Unreachable'`).\n * @returns {never}\n *   Nothing; always throws.\n * @throws {AssertionError}\n *   Throws when `value` is falsey.\n */\nexport function unreachable(message) {\n  assert(false, false, true, 'ok', 'Unreachable', message)\n}\n\n/**\n * @param {boolean} bool\n *   Whether to skip this operation.\n * @param {unknown} actual\n *   Actual value.\n * @param {unknown} expected\n *   Expected value.\n * @param {string} operator\n *   Operator.\n * @param {string} defaultMessage\n *   Default message for operation.\n * @param {Error | string | null | undefined} userMessage\n *   User-provided message.\n * @returns {asserts bool}\n *   Nothing; throws when falsey.\n */\n// eslint-disable-next-line max-params\nfunction assert(bool, actual, expected, operator, defaultMessage, userMessage) {\n  if (!bool) {\n    throw userMessage instanceof Error\n      ? userMessage\n      : new AssertionError(\n          userMessage || defaultMessage,\n          actual,\n          expected,\n          operator,\n          !userMessage\n        )\n  }\n}\n","/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [jsx=false]\n *   Support JSX identifiers (default: `false`).\n */\n\nconst startRe = /[$_\\p{ID_Start}]/u\nconst contRe = /[$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst contReJsx = /[-$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst nameRe = /^[$_\\p{ID_Start}][$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\nconst nameReJsx = /^[$_\\p{ID_Start}][-$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Checks if the given code point can start an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @returns {boolean}\n *   Whether `code` can start an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function start(code) {\n  return code ? startRe.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given code point can continue an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `code` can continue an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function cont(code, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? contReJsx : contRe\n  return code ? re.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given value is a valid identifier name.\n *\n * @param {string} name\n *   Identifier to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `name` can be an identifier.\n */\nexport function name(name, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? nameReJsx : nameRe\n  return re.test(name)\n}\n","/**\n * @typedef {import('hast').Nodes} Nodes\n */\n\n// HTML whitespace expression.\n// See <https://infra.spec.whatwg.org/#ascii-whitespace>.\nconst re = /[ \\t\\n\\f\\r]/g\n\n/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {Nodes | string} thing\n *   Thing to check (`Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`); if a node is passed it must be a `Text` node,\n *   whose `value` field is checked.\n */\nexport function whitespace(thing) {\n  return typeof thing === 'object'\n    ? thing.type === 'text'\n      ? empty(thing.value)\n      : false\n    : empty(thing)\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction empty(value) {\n  return value.replace(re, '') === ''\n}\n","/**\n * @import {Schema as SchemaType, Space} from 'property-information'\n */\n\n/** @type {SchemaType} */\nexport class Schema {\n  /**\n   * @param {SchemaType['property']} property\n   *   Property.\n   * @param {SchemaType['normal']} normal\n   *   Normal.\n   * @param {Space | undefined} [space]\n   *   Space.\n   * @returns\n   *   Schema.\n   */\n  constructor(property, normal, space) {\n    this.normal = normal\n    this.property = property\n\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\nSchema.prototype.normal = {}\nSchema.prototype.property = {}\nSchema.prototype.space = undefined\n","/**\n * @import {Info, Space} from 'property-information'\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {ReadonlyArray<Schema>} definitions\n *   Definitions.\n * @param {Space | undefined} [space]\n *   Space.\n * @returns {Schema}\n *   Schema.\n */\nexport function merge(definitions, space) {\n  /** @type {Record<string, Info>} */\n  const property = {}\n  /** @type {Record<string, string>} */\n  const normal = {}\n\n  for (const definition of definitions) {\n    Object.assign(property, definition.property)\n    Object.assign(normal, definition.normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * Get the cleaned case insensitive form of an attribute or property.\n *\n * @param {string} value\n *   An attribute-like or property-like name.\n * @returns {string}\n *   Value that can be used to look up the properly cased property on a\n *   `Schema`.\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","/**\n * @import {Info as InfoType} from 'property-information'\n */\n\n/** @type {InfoType} */\nexport class Info {\n  /**\n   * @param {string} property\n   *   Property.\n   * @param {string} attribute\n   *   Attribute.\n   * @returns\n   *   Info.\n   */\n  constructor(property, attribute) {\n    this.attribute = attribute\n    this.property = property\n  }\n}\n\nInfo.prototype.attribute = ''\nInfo.prototype.booleanish = false\nInfo.prototype.boolean = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.defined = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.number = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.property = ''\nInfo.prototype.spaceSeparated = false\nInfo.prototype.space = undefined\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","/**\n * @import {Space} from 'property-information'\n */\n\nimport {Info} from './info.js'\nimport * as types from './types.js'\n\nconst checks = /** @type {ReadonlyArray<keyof typeof types>} */ (\n  Object.keys(types)\n)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   *   Property.\n   * @param {string} attribute\n   *   Attribute.\n   * @param {number | null | undefined} [mask]\n   *   Mask.\n   * @param {Space | undefined} [space]\n   *   Space.\n   * @returns\n   *   Info.\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @template {keyof DefinedInfo} Key\n *   Key type.\n * @param {DefinedInfo} values\n *   Info.\n * @param {Key} key\n *   Key.\n * @param {DefinedInfo[Key]} value\n *   Value.\n * @returns {undefined}\n *   Nothing.\n */\nfunction mark(values, key, value) {\n  if (value) {\n    values[key] = value\n  }\n}\n","/**\n * @import {Info, Space} from 'property-information'\n */\n\n/**\n * @typedef Definition\n *   Definition of a schema.\n * @property {Record<string, string> | undefined} [attributes]\n *   Normalzed names to special attribute case.\n * @property {ReadonlyArray<string> | undefined} [mustUseProperty]\n *   Normalized names that must be set as properties.\n * @property {Record<string, number | null>} properties\n *   Property names to their types.\n * @property {Space | undefined} [space]\n *   Space.\n * @property {Transform} transform\n *   Transform a property name.\n */\n\n/**\n * @callback Transform\n *   Transform.\n * @param {Record<string, string>} attributes\n *   Attributes.\n * @param {string} property\n *   Property.\n * @returns {string}\n *   Attribute.\n */\n\nimport {normalize} from '../normalize.js'\nimport {DefinedInfo} from './defined-info.js'\nimport {Schema} from './schema.js'\n\n/**\n * @param {Definition} definition\n *   Definition.\n * @returns {Schema}\n *   Schema.\n */\nexport function create(definition) {\n  /** @type {Record<string, Info>} */\n  const properties = {}\n  /** @type {Record<string, string>} */\n  const normals = {}\n\n  for (const [property, value] of Object.entries(definition.properties)) {\n    const info = new DefinedInfo(\n      property,\n      definition.transform(definition.attributes || {}, property),\n      value,\n      definition.space\n    )\n\n    if (\n      definition.mustUseProperty &&\n      definition.mustUseProperty.includes(property)\n    ) {\n      info.mustUseProperty = true\n    }\n\n    properties[property] = info\n\n    normals[normalize(property)] = property\n    normals[normalize(info.attribute)] = property\n  }\n\n  return new Schema(properties, normals, definition.space)\n}\n","import {create} from './util/create.js'\nimport {booleanish, number, spaceSeparated} from './util/types.js'\n\nexport const aria = create({\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  },\n  transform(_, property) {\n    return property === 'role'\n      ? property\n      : 'aria-' + property.slice(4).toLowerCase()\n  }\n})\n","/**\n * @param {Record<string, string>} attributes\n *   Attributes.\n * @param {string} attribute\n *   Attribute.\n * @returns {string}\n *   Transformed attribute.\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n *   Attributes.\n * @param {string} property\n *   Property.\n * @returns {string}\n *   Transformed property.\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\nimport {create} from './util/create.js'\nimport {\n  booleanish,\n  boolean,\n  commaSeparated,\n  number,\n  overloadedBoolean,\n  spaceSeparated\n} from './util/types.js'\n\nexport const html = create({\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    blocking: spaceSeparated,\n    capture: null,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    fetchPriority: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: overloadedBoolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inert: boolean,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeToggle: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    popover: null,\n    popoverTarget: null,\n    popoverTargetAction: null,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shadowRootClonable: boolean,\n    shadowRootDelegatesFocus: boolean,\n    shadowRootMode: null,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n    writingSuggestions: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  },\n  space: 'html',\n  transform: caseInsensitiveTransform\n})\n","import {caseSensitiveTransform} from './util/case-sensitive-transform.js'\nimport {create} from './util/create.js'\nimport {\n  boolean,\n  commaOrSpaceSeparated,\n  commaSeparated,\n  number,\n  spaceSeparated\n} from './util/types.js'\n\nexport const svg = create({\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    transformOrigin: 'transform-origin',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    transformOrigin: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  },\n  space: 'svg',\n  transform: caseSensitiveTransform\n})\n","import {create} from './util/create.js'\n\nexport const xlink = create({\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  },\n  space: 'xlink',\n  transform(_, property) {\n    return 'xlink:' + property.slice(5).toLowerCase()\n  }\n})\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  properties: {xmlnsXLink: null, xmlns: null},\n  space: 'xmlns',\n  transform: caseInsensitiveTransform\n})\n","import {create} from './util/create.js'\n\nexport const xml = create({\n  properties: {xmlBase: null, xmlLang: null, xmlSpace: null},\n  space: 'xml',\n  transform(_, property) {\n    return 'xml:' + property.slice(3).toLowerCase()\n  }\n})\n","/**\n * Special cases for React (`Record<string, string>`).\n *\n * `hast` is close to `React` but differs in a couple of cases.\n * To get a React property from a hast property,\n * check if it is in `hastToReact`.\n * If it is, use the corresponding value;\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */\nexport const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n}\n","/**\n * @import {Schema} from 'property-information'\n */\n\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\nimport {normalize} from './normalize.js'\n\nconst cap = /[A-Z]/g\nconst dash = /-[a-z]/g\nconst valid = /^data[-\\w.:]+$/i\n\n/**\n * Look up info on a property.\n *\n * In most cases the given `schema` contains info on the property.\n * All standard,\n * most legacy,\n * and some non-standard properties are supported.\n * For these cases,\n * the returned `Info` has hints about the value of the property.\n *\n * `name` can also be a valid data attribute or property,\n * in which case an `Info` object with the correctly cased `attribute` and\n * `property` is returned.\n *\n * `name` can be an unknown attribute,\n * in which case an `Info` object with `attribute` and `property` set to the\n * given name is returned.\n * It is not recommended to provide unsupported legacy or recently specced\n * properties.\n *\n *\n * @param {Schema} schema\n *   Schema;\n *   either the `html` or `svg` export.\n * @param {string} value\n *   An attribute-like or property-like name;\n *   it will be passed through `normalize` to hopefully find the correct info.\n * @returns {Info}\n *   Info.\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let property = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      property = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(property, value)\n}\n\n/**\n * @param {string} $0\n *   Value.\n * @returns {string}\n *   Kebab.\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n *   Value.\n * @returns {string}\n *   Camel.\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","// Note: types exposed from `index.d.ts`.\nimport {merge} from './lib/util/merge.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\nimport {xlink} from './lib/xlink.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {xml} from './lib/xml.js'\n\nexport {hastToReact} from './lib/hast-to-react.js'\n\nexport const html = merge([aria, htmlBase, xlink, xmlns, xml], 'html')\n\nexport {find} from './lib/find.js'\nexport {normalize} from './lib/normalize.js'\n\nexport const svg = merge([aria, svgBase, xlink, xmlns, xml], 'svg')\n","/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function (style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function (node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = StyleToObject;\nvar inline_style_parser_1 = __importDefault(require(\"inline-style-parser\"));\n/**\n * Parses inline style to object.\n *\n * @param style - Inline style.\n * @param iterator - Iterator.\n * @returns - Style object or null.\n *\n * @example Parsing inline style to object:\n *\n * ```js\n * import parse from 'style-to-object';\n * parse('line-height: 42;'); // { 'line-height': '42' }\n * ```\n */\nfunction StyleToObject(style, iterator) {\n    var styleObject = null;\n    if (!style || typeof style !== 'string') {\n        return styleObject;\n    }\n    var declarations = (0, inline_style_parser_1.default)(style);\n    var hasIterator = typeof iterator === 'function';\n    declarations.forEach(function (declaration) {\n        if (declaration.type !== 'declaration') {\n            return;\n        }\n        var property = declaration.property, value = declaration.value;\n        if (hasIterator) {\n            iterator(property, value, declaration);\n        }\n        else if (value) {\n            styleObject = styleObject || {};\n            styleObject[property] = value;\n        }\n    });\n    return styleObject;\n}\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.camelCase = void 0;\nvar CUSTOM_PROPERTY_REGEX = /^--[a-zA-Z0-9_-]+$/;\nvar HYPHEN_REGEX = /-([a-z])/g;\nvar NO_HYPHEN_REGEX = /^[^-]+$/;\nvar VENDOR_PREFIX_REGEX = /^-(webkit|moz|ms|o|khtml)-/;\nvar MS_VENDOR_PREFIX_REGEX = /^-(ms)-/;\n/**\n * Checks whether to skip camelCase.\n */\nvar skipCamelCase = function (property) {\n    return !property ||\n        NO_HYPHEN_REGEX.test(property) ||\n        CUSTOM_PROPERTY_REGEX.test(property);\n};\n/**\n * Replacer that capitalizes first character.\n */\nvar capitalize = function (match, character) {\n    return character.toUpperCase();\n};\n/**\n * Replacer that removes beginning hyphen of vendor prefix property.\n */\nvar trimHyphen = function (match, prefix) { return \"\".concat(prefix, \"-\"); };\n/**\n * CamelCases a CSS property.\n */\nvar camelCase = function (property, options) {\n    if (options === void 0) { options = {}; }\n    if (skipCamelCase(property)) {\n        return property;\n    }\n    property = property.toLowerCase();\n    if (options.reactCompat) {\n        // `-ms` vendor prefix should not be capitalized\n        property = property.replace(MS_VENDOR_PREFIX_REGEX, trimHyphen);\n    }\n    else {\n        // for non-React, remove first hyphen so vendor prefix is not capitalized\n        property = property.replace(VENDOR_PREFIX_REGEX, trimHyphen);\n    }\n    return property.replace(HYPHEN_REGEX, capitalize);\n};\nexports.camelCase = camelCase;\n//# sourceMappingURL=utilities.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar style_to_object_1 = __importDefault(require(\"style-to-object\"));\nvar utilities_1 = require(\"./utilities\");\n/**\n * Parses CSS inline style to JavaScript object (camelCased).\n */\nfunction StyleToJS(style, options) {\n    var output = {};\n    if (!style || typeof style !== 'string') {\n        return output;\n    }\n    (0, style_to_object_1.default)(style, function (property, value) {\n        // skip CSS comment\n        if (property && value) {\n            output[(0, utilities_1.camelCase)(property, options)] = value;\n        }\n    });\n    return output;\n}\nStyleToJS.default = StyleToJS;\nmodule.exports = StyleToJS;\n//# sourceMappingURL=index.js.map","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'end' | 'start'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {Node | NodeLike | null | undefined} [node]\n   * @returns {Point | undefined}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    if (\n      typeof point.line === 'number' &&\n      point.line > 0 &&\n      typeof point.column === 'number' &&\n      point.column > 0\n    ) {\n      return {\n        line: point.line,\n        column: point.column,\n        offset:\n          typeof point.offset === 'number' && point.offset > -1\n            ? point.offset\n            : undefined\n      }\n    }\n  }\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {Node | NodeLike | null | undefined} [node]\n *   Node.\n * @returns {Position | undefined}\n *   Position.\n */\nexport function position(node) {\n  const start = pointStart(node)\n  const end = pointEnd(node)\n\n  if (start && end) {\n    return {start, end}\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Point | PointLike | Position | PositionLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @import {Node, Point, Position} from 'unist'\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef Options\n *   Configuration.\n * @property {Array<Node> | null | undefined} [ancestors]\n *   Stack of (inclusive) ancestor nodes surrounding the message (optional).\n * @property {Error | null | undefined} [cause]\n *   Original error cause of the message (optional).\n * @property {Point | Position | null | undefined} [place]\n *   Place of message (optional).\n * @property {string | null | undefined} [ruleId]\n *   Category of message (optional, example: `'my-rule'`).\n * @property {string | null | undefined} [source]\n *   Namespace of who sent the message (optional, example: `'my-package'`).\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Options | null | undefined} [options]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // eslint-disable-next-line complexity\n  constructor(causeOrReason, optionsOrParentOrPlace, origin) {\n    super()\n\n    if (typeof optionsOrParentOrPlace === 'string') {\n      origin = optionsOrParentOrPlace\n      optionsOrParentOrPlace = undefined\n    }\n\n    /** @type {string} */\n    let reason = ''\n    /** @type {Options} */\n    let options = {}\n    let legacyCause = false\n\n    if (optionsOrParentOrPlace) {\n      // Point.\n      if (\n        'line' in optionsOrParentOrPlace &&\n        'column' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Position.\n      else if (\n        'start' in optionsOrParentOrPlace &&\n        'end' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Node.\n      else if ('type' in optionsOrParentOrPlace) {\n        options = {\n          ancestors: [optionsOrParentOrPlace],\n          place: optionsOrParentOrPlace.position\n        }\n      }\n      // Options.\n      else {\n        options = {...optionsOrParentOrPlace}\n      }\n    }\n\n    if (typeof causeOrReason === 'string') {\n      reason = causeOrReason\n    }\n    // Error.\n    else if (!options.cause && causeOrReason) {\n      legacyCause = true\n      reason = causeOrReason.message\n      options.cause = causeOrReason\n    }\n\n    if (!options.ruleId && !options.source && typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        options.ruleId = origin\n      } else {\n        options.source = origin.slice(0, index)\n        options.ruleId = origin.slice(index + 1)\n      }\n    }\n\n    if (!options.place && options.ancestors && options.ancestors) {\n      const parent = options.ancestors[options.ancestors.length - 1]\n\n      if (parent) {\n        options.place = parent.position\n      }\n    }\n\n    const start =\n      options.place && 'start' in options.place\n        ? options.place.start\n        : options.place\n\n    /**\n     * Stack of ancestor nodes surrounding the message.\n     *\n     * @type {Array<Node> | undefined}\n     */\n    this.ancestors = options.ancestors || undefined\n\n    /**\n     * Original error cause of the message.\n     *\n     * @type {Error | undefined}\n     */\n    this.cause = options.cause || undefined\n\n    /**\n     * Starting column of message.\n     *\n     * @type {number | undefined}\n     */\n    this.column = start ? start.column : undefined\n\n    /**\n     * State of problem.\n     *\n     * * `true` — error, file not usable\n     * * `false` — warning, change may be needed\n     * * `undefined` — change likely not needed\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal = undefined\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | undefined}\n     */\n    this.file = ''\n\n    // Field from `Error`.\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = reason\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | undefined}\n     */\n    this.line = start ? start.line : undefined\n\n    // Field from `Error`.\n    /**\n     * Serialized positional info of message.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(options.place) || '1:1'\n\n    /**\n     * Place of message.\n     *\n     * @type {Point | Position | undefined}\n     */\n    this.place = options.place || undefined\n\n    /**\n     * Reason for message, should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | undefined}\n     */\n    this.ruleId = options.ruleId || undefined\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | undefined}\n     */\n    this.source = options.source || undefined\n\n    // Field from `Error`.\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack =\n      legacyCause && options.cause && typeof options.cause.stack === 'string'\n        ? options.cause.stack\n        : ''\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | undefined}\n     */\n    this.actual = undefined\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | undefined}\n     */\n    this.expected = undefined\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | undefined}\n     */\n    this.note = undefined\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | undefined}\n     */\n    this.url = undefined\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.column = undefined\nVFileMessage.prototype.line = undefined\nVFileMessage.prototype.ancestors = undefined\nVFileMessage.prototype.cause = undefined\nVFileMessage.prototype.fatal = undefined\nVFileMessage.prototype.place = undefined\nVFileMessage.prototype.ruleId = undefined\nVFileMessage.prototype.source = undefined\n","/**\n * @import {Identifier, Literal, MemberExpression} from 'estree'\n * @import {Jsx, JsxDev, Options, Props} from 'hast-util-to-jsx-runtime'\n * @import {Element, Nodes, Parents, Root, Text} from 'hast'\n * @import {MdxFlowExpressionHast, MdxTextExpressionHast} from 'mdast-util-mdx-expression'\n * @import {MdxJsxFlowElementHast, MdxJsxTextElementHast} from 'mdast-util-mdx-jsx'\n * @import {MdxjsEsmHast} from 'mdast-util-mdxjs-esm'\n * @import {Position} from 'unist'\n * @import {Child, Create, Field, JsxElement, State, Style} from './types.js'\n */\n\nimport {stringify as commas} from 'comma-separated-tokens'\nimport {ok as assert} from 'devlop'\nimport {name as isIdentifierName} from 'estree-util-is-identifier-name'\nimport {whitespace} from 'hast-util-whitespace'\nimport {find, hastToReact, html, svg} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport styleToJs from 'style-to-js'\nimport {pointStart} from 'unist-util-position'\nimport {VFileMessage} from 'vfile-message'\n\n// To do: next major: `Object.hasOwn`.\nconst own = {}.hasOwnProperty\n\n/** @type {Map<string, number>} */\nconst emptyMap = new Map()\n\nconst cap = /[A-Z]/g\n\n// `react-dom` triggers a warning for *any* white space in tables.\n// To follow GFM, `mdast-util-to-hast` injects line endings between elements.\n// Other tools might do so too, but they don’t do here, so we remove all of\n// that.\n\n// See: <https://github.com/facebook/react/pull/7081>.\n// See: <https://github.com/facebook/react/pull/7515>.\n// See: <https://github.com/remarkjs/remark-react/issues/64>.\n// See: <https://github.com/rehypejs/rehype-react/pull/29>.\n// See: <https://github.com/rehypejs/rehype-react/pull/32>.\n// See: <https://github.com/rehypejs/rehype-react/pull/45>.\nconst tableElements = new Set(['table', 'tbody', 'thead', 'tfoot', 'tr'])\n\nconst tableCellElement = new Set(['td', 'th'])\n\nconst docs = 'https://github.com/syntax-tree/hast-util-to-jsx-runtime'\n\n/**\n * Transform a hast tree to preact, react, solid, svelte, vue, etc.,\n * with an automatic JSX runtime.\n *\n * @param {Nodes} tree\n *   Tree to transform.\n * @param {Options} options\n *   Configuration (required).\n * @returns {JsxElement}\n *   JSX element.\n */\n\nexport function toJsxRuntime(tree, options) {\n  if (!options || options.Fragment === undefined) {\n    throw new TypeError('Expected `Fragment` in options')\n  }\n\n  const filePath = options.filePath || undefined\n  /** @type {Create} */\n  let create\n\n  if (options.development) {\n    if (typeof options.jsxDEV !== 'function') {\n      throw new TypeError(\n        'Expected `jsxDEV` in options when `development: true`'\n      )\n    }\n\n    create = developmentCreate(filePath, options.jsxDEV)\n  } else {\n    if (typeof options.jsx !== 'function') {\n      throw new TypeError('Expected `jsx` in production options')\n    }\n\n    if (typeof options.jsxs !== 'function') {\n      throw new TypeError('Expected `jsxs` in production options')\n    }\n\n    create = productionCreate(filePath, options.jsx, options.jsxs)\n  }\n\n  /** @type {State} */\n  const state = {\n    Fragment: options.Fragment,\n    ancestors: [],\n    components: options.components || {},\n    create,\n    elementAttributeNameCase: options.elementAttributeNameCase || 'react',\n    evaluater: options.createEvaluater ? options.createEvaluater() : undefined,\n    filePath,\n    ignoreInvalidStyle: options.ignoreInvalidStyle || false,\n    passKeys: options.passKeys !== false,\n    passNode: options.passNode || false,\n    schema: options.space === 'svg' ? svg : html,\n    stylePropertyNameCase: options.stylePropertyNameCase || 'dom',\n    tableCellAlignToStyle: options.tableCellAlignToStyle !== false\n  }\n\n  const result = one(state, tree, undefined)\n\n  // JSX element.\n  if (result && typeof result !== 'string') {\n    return result\n  }\n\n  // Text node or something that turned into nothing.\n  return state.create(\n    tree,\n    state.Fragment,\n    {children: result || undefined},\n    undefined\n  )\n}\n\n/**\n * Transform a node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Nodes} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction one(state, node, key) {\n  if (node.type === 'element') {\n    return element(state, node, key)\n  }\n\n  if (node.type === 'mdxFlowExpression' || node.type === 'mdxTextExpression') {\n    return mdxExpression(state, node)\n  }\n\n  if (node.type === 'mdxJsxFlowElement' || node.type === 'mdxJsxTextElement') {\n    return mdxJsxElement(state, node, key)\n  }\n\n  if (node.type === 'mdxjsEsm') {\n    return mdxEsm(state, node)\n  }\n\n  if (node.type === 'root') {\n    return root(state, node, key)\n  }\n\n  if (node.type === 'text') {\n    return text(state, node)\n  }\n}\n\n/**\n * Handle element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction element(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.tagName.toLowerCase() === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type = findComponentFromName(state, node.tagName, false)\n  const props = createElementProps(state, node)\n  let children = createChildren(state, node)\n\n  if (tableElements.has(node.tagName)) {\n    children = children.filter(function (child) {\n      return typeof child === 'string' ? !whitespace(child) : true\n    })\n  }\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle MDX expression.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxFlowExpressionHast | MdxTextExpressionHast} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxExpression(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    const program = node.data.estree\n    const expression = program.body[0]\n    assert(expression.type === 'ExpressionStatement')\n\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateExpression(expression.expression)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX ESM.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxjsEsmHast} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxEsm(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateProgram(node.data.estree)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX JSX.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxJsxElement(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.name === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type =\n    node.name === null\n      ? state.Fragment\n      : findComponentFromName(state, node.name, true)\n  const props = createJsxElementProps(state, node)\n  const children = createChildren(state, node)\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle root.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Root} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction root(state, node, key) {\n  /** @type {Props} */\n  const props = {}\n\n  addChildren(props, createChildren(state, node))\n\n  return state.create(node, state.Fragment, props, key)\n}\n\n/**\n * Handle text.\n *\n * @param {State} _\n *   Info passed around.\n * @param {Text} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction text(_, node) {\n  return node.value\n}\n\n/**\n * Add `node` to props.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Props} props\n *   Props.\n * @param {unknown} type\n *   Type.\n * @param {Element | MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Node.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addNode(state, props, type, node) {\n  // If this is swapped out for a component:\n  if (typeof type !== 'string' && type !== state.Fragment && state.passNode) {\n    props.node = node\n  }\n}\n\n/**\n * Add children to props.\n *\n * @param {Props} props\n *   Props.\n * @param {Array<Child>} children\n *   Children.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addChildren(props, children) {\n  if (children.length > 0) {\n    const value = children.length > 1 ? children : children[0]\n\n    if (value) {\n      props.children = value\n    }\n  }\n}\n\n/**\n * @param {string | undefined} _\n *   Path to file.\n * @param {Jsx} jsx\n *   Dynamic.\n * @param {Jsx} jsxs\n *   Static.\n * @returns {Create}\n *   Create a production element.\n */\nfunction productionCreate(_, jsx, jsxs) {\n  return create\n  /** @type {Create} */\n  function create(_, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const fn = isStaticChildren ? jsxs : jsx\n    return key ? fn(type, props, key) : fn(type, props)\n  }\n}\n\n/**\n * @param {string | undefined} filePath\n *   Path to file.\n * @param {JsxDev} jsxDEV\n *   Development.\n * @returns {Create}\n *   Create a development element.\n */\nfunction developmentCreate(filePath, jsxDEV) {\n  return create\n  /** @type {Create} */\n  function create(node, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const point = pointStart(node)\n    return jsxDEV(\n      type,\n      props,\n      key,\n      isStaticChildren,\n      {\n        columnNumber: point ? point.column - 1 : undefined,\n        fileName: filePath,\n        lineNumber: point ? point.line : undefined\n      },\n      undefined\n    )\n  }\n}\n\n/**\n * Create props from an element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current element.\n * @returns {Props}\n *   Props.\n */\nfunction createElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n  /** @type {string | undefined} */\n  let alignValue\n  /** @type {string} */\n  let prop\n\n  for (prop in node.properties) {\n    if (prop !== 'children' && own.call(node.properties, prop)) {\n      const result = createProperty(state, prop, node.properties[prop])\n\n      if (result) {\n        const [key, value] = result\n\n        if (\n          state.tableCellAlignToStyle &&\n          key === 'align' &&\n          typeof value === 'string' &&\n          tableCellElement.has(node.tagName)\n        ) {\n          alignValue = value\n        } else {\n          props[key] = value\n        }\n      }\n    }\n  }\n\n  if (alignValue) {\n    // Assume style is an object.\n    const style = /** @type {Style} */ (props.style || (props.style = {}))\n    style[state.stylePropertyNameCase === 'css' ? 'text-align' : 'textAlign'] =\n      alignValue\n  }\n\n  return props\n}\n\n/**\n * Create props from a JSX element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Current JSX element.\n * @returns {Props}\n *   Props.\n */\nfunction createJsxElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n\n  for (const attribute of node.attributes) {\n    if (attribute.type === 'mdxJsxExpressionAttribute') {\n      if (attribute.data && attribute.data.estree && state.evaluater) {\n        const program = attribute.data.estree\n        const expression = program.body[0]\n        assert(expression.type === 'ExpressionStatement')\n        const objectExpression = expression.expression\n        assert(objectExpression.type === 'ObjectExpression')\n        const property = objectExpression.properties[0]\n        assert(property.type === 'SpreadElement')\n\n        Object.assign(\n          props,\n          state.evaluater.evaluateExpression(property.argument)\n        )\n      } else {\n        crashEstree(state, node.position)\n      }\n    } else {\n      // For JSX, the author is responsible of passing in the correct values.\n      const name = attribute.name\n      /** @type {unknown} */\n      let value\n\n      if (attribute.value && typeof attribute.value === 'object') {\n        if (\n          attribute.value.data &&\n          attribute.value.data.estree &&\n          state.evaluater\n        ) {\n          const program = attribute.value.data.estree\n          const expression = program.body[0]\n          assert(expression.type === 'ExpressionStatement')\n          value = state.evaluater.evaluateExpression(expression.expression)\n        } else {\n          crashEstree(state, node.position)\n        }\n      } else {\n        value = attribute.value === null ? true : attribute.value\n      }\n\n      // Assume a prop.\n      props[name] = /** @type {Props[keyof Props]} */ (value)\n    }\n  }\n\n  return props\n}\n\n/**\n * Create children.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Parents} node\n *   Current element.\n * @returns {Array<Child>}\n *   Children.\n */\nfunction createChildren(state, node) {\n  /** @type {Array<Child>} */\n  const children = []\n  let index = -1\n  /** @type {Map<string, number>} */\n  // Note: test this when Solid doesn’t want to merge my upcoming PR.\n  /* c8 ignore next */\n  const countsByName = state.passKeys ? new Map() : emptyMap\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n    /** @type {string | undefined} */\n    let key\n\n    if (state.passKeys) {\n      const name =\n        child.type === 'element'\n          ? child.tagName\n          : child.type === 'mdxJsxFlowElement' ||\n              child.type === 'mdxJsxTextElement'\n            ? child.name\n            : undefined\n\n      if (name) {\n        const count = countsByName.get(name) || 0\n        key = name + '-' + count\n        countsByName.set(name, count + 1)\n      }\n    }\n\n    const result = one(state, child, key)\n    if (result !== undefined) children.push(result)\n  }\n\n  return children\n}\n\n/**\n * Handle a property.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} prop\n *   Key.\n * @param {Array<number | string> | boolean | number | string | null | undefined} value\n *   hast property value.\n * @returns {Field | undefined}\n *   Field for runtime, optional.\n */\nfunction createProperty(state, prop, value) {\n  const info = find(state.schema, prop)\n\n  // Ignore nullish and `NaN` values.\n  if (\n    value === null ||\n    value === undefined ||\n    (typeof value === 'number' && Number.isNaN(value))\n  ) {\n    return\n  }\n\n  if (Array.isArray(value)) {\n    // Accept `array`.\n    // Most props are space-separated.\n    value = info.commaSeparated ? commas(value) : spaces(value)\n  }\n\n  // React only accepts `style` as object.\n  if (info.property === 'style') {\n    let styleObject =\n      typeof value === 'object' ? value : parseStyle(state, String(value))\n\n    if (state.stylePropertyNameCase === 'css') {\n      styleObject = transformStylesToCssCasing(styleObject)\n    }\n\n    return ['style', styleObject]\n  }\n\n  return [\n    state.elementAttributeNameCase === 'react' && info.space\n      ? hastToReact[info.property] || info.property\n      : info.attribute,\n    value\n  ]\n}\n\n/**\n * Parse a CSS declaration to an object.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} value\n *   CSS declarations.\n * @returns {Style}\n *   Properties.\n * @throws\n *   Throws `VFileMessage` when CSS cannot be parsed.\n */\nfunction parseStyle(state, value) {\n  try {\n    return styleToJs(value, {reactCompat: true})\n  } catch (error) {\n    if (state.ignoreInvalidStyle) {\n      return {}\n    }\n\n    const cause = /** @type {Error} */ (error)\n    const message = new VFileMessage('Cannot parse `style` attribute', {\n      ancestors: state.ancestors,\n      cause,\n      ruleId: 'style',\n      source: 'hast-util-to-jsx-runtime'\n    })\n    message.file = state.filePath || undefined\n    message.url = docs + '#cannot-parse-style-attribute'\n\n    throw message\n  }\n}\n\n/**\n * Create a JSX name from a string.\n *\n * @param {State} state\n *   To do.\n * @param {string} name\n *   Name.\n * @param {boolean} allowExpression\n *   Allow member expressions and identifiers.\n * @returns {unknown}\n *   To do.\n */\nfunction findComponentFromName(state, name, allowExpression) {\n  /** @type {Identifier | Literal | MemberExpression} */\n  let result\n\n  if (!allowExpression) {\n    result = {type: 'Literal', value: name}\n  } else if (name.includes('.')) {\n    const identifiers = name.split('.')\n    let index = -1\n    /** @type {Identifier | Literal | MemberExpression | undefined} */\n    let node\n\n    while (++index < identifiers.length) {\n      /** @type {Identifier | Literal} */\n      const prop = isIdentifierName(identifiers[index])\n        ? {type: 'Identifier', name: identifiers[index]}\n        : {type: 'Literal', value: identifiers[index]}\n      node = node\n        ? {\n            type: 'MemberExpression',\n            object: node,\n            property: prop,\n            computed: Boolean(index && prop.type === 'Literal'),\n            optional: false\n          }\n        : prop\n    }\n\n    assert(node, 'always a result')\n    result = node\n  } else {\n    result =\n      isIdentifierName(name) && !/^[a-z]/.test(name)\n        ? {type: 'Identifier', name}\n        : {type: 'Literal', value: name}\n  }\n\n  // Only literals can be passed in `components` currently.\n  // No identifiers / member expressions.\n  if (result.type === 'Literal') {\n    const name = /** @type {string | number} */ (result.value)\n    return own.call(state.components, name) ? state.components[name] : name\n  }\n\n  // Assume component.\n  if (state.evaluater) {\n    return state.evaluater.evaluateExpression(result)\n  }\n\n  crashEstree(state)\n}\n\n/**\n * @param {State} state\n * @param {Position | undefined} [place]\n * @returns {never}\n */\nfunction crashEstree(state, place) {\n  const message = new VFileMessage(\n    'Cannot handle MDX estrees without `createEvaluater`',\n    {\n      ancestors: state.ancestors,\n      place,\n      ruleId: 'mdx-estree',\n      source: 'hast-util-to-jsx-runtime'\n    }\n  )\n  message.file = state.filePath || undefined\n  message.url = docs + '#cannot-handle-mdx-estrees-without-createevaluater'\n\n  throw message\n}\n\n/**\n * Transform a DOM casing style object to a CSS casing style object.\n *\n * @param {Style} domCasing\n * @returns {Style}\n */\nfunction transformStylesToCssCasing(domCasing) {\n  /** @type {Style} */\n  const cssCasing = {}\n  /** @type {string} */\n  let from\n\n  for (from in domCasing) {\n    if (own.call(domCasing, from)) {\n      cssCasing[transformStyleToCssCasing(from)] = domCasing[from]\n    }\n  }\n\n  return cssCasing\n}\n\n/**\n * Transform a DOM casing style field to a CSS casing style field.\n *\n * @param {string} from\n * @returns {string}\n */\nfunction transformStyleToCssCasing(from) {\n  let to = from.replace(cap, toDash)\n  // Handle `ms-xxx` -> `-ms-xxx`.\n  if (to.slice(0, 3) === 'ms-') to = '-' + to\n  return to\n}\n\n/**\n * Make `$0` dash cased.\n *\n * @param {string} $0\n *   Capitalized ASCII leter.\n * @returns {string}\n *   Dash and lower letter.\n */\nfunction toDash($0) {\n  return '-' + $0.toLowerCase()\n}\n","/**\n * HTML URL properties.\n *\n * Each key is a property name and each value is a list of tag names it applies\n * to or `null` if it applies to all elements.\n *\n * @type {Record<string, Array<string> | null>}\n */\nexport const urlAttributes = {\n  action: ['form'],\n  cite: ['blockquote', 'del', 'ins', 'q'],\n  data: ['object'],\n  formAction: ['button', 'input'],\n  href: ['a', 'area', 'base', 'link'],\n  icon: ['menuitem'],\n  itemId: null,\n  manifest: ['html'],\n  ping: ['a', 'area'],\n  poster: ['video'],\n  src: [\n    'audio',\n    'embed',\n    'iframe',\n    'img',\n    'input',\n    'script',\n    'source',\n    'track',\n    'video'\n  ]\n}\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s (default: `true`).\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML (default: `true`).\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} [value]\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Nodes}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/// <reference lib=\"dom\" />\n\n/* global document */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string | false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const character = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  if (\n    // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n    // yield `null`.\n    character.charCodeAt(character.length - 1) === 59 /* `;` */ &&\n    value !== 'semi'\n  ) {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return character === characterReference ? false : character\n}\n","/**\n * Character codes.\n *\n * This module is compiled away!\n *\n * micromark works based on character codes.\n * This module contains constants for the ASCII block and the replacement\n * character.\n * A couple of them are handled in a special way, such as the line endings\n * (CR, LF, and CR+LF, commonly known as end-of-line: EOLs), the tab (horizontal\n * tab) and its expansion based on what column it’s at (virtual space),\n * and the end-of-file (eof) character.\n * As values are preprocessed before handling them, the actual characters LF,\n * CR, HT, and NUL (which is present as the replacement character), are\n * guaranteed to not exist.\n *\n * Unicode basic latin block.\n */\nexport const codes = /** @type {const} */ ({\n  carriageReturn: -5,\n  lineFeed: -4,\n  carriageReturnLineFeed: -3,\n  horizontalTab: -2,\n  virtualSpace: -1,\n  eof: null,\n  nul: 0,\n  soh: 1,\n  stx: 2,\n  etx: 3,\n  eot: 4,\n  enq: 5,\n  ack: 6,\n  bel: 7,\n  bs: 8,\n  ht: 9, // `\\t`\n  lf: 10, // `\\n`\n  vt: 11, // `\\v`\n  ff: 12, // `\\f`\n  cr: 13, // `\\r`\n  so: 14,\n  si: 15,\n  dle: 16,\n  dc1: 17,\n  dc2: 18,\n  dc3: 19,\n  dc4: 20,\n  nak: 21,\n  syn: 22,\n  etb: 23,\n  can: 24,\n  em: 25,\n  sub: 26,\n  esc: 27,\n  fs: 28,\n  gs: 29,\n  rs: 30,\n  us: 31,\n  space: 32,\n  exclamationMark: 33, // `!`\n  quotationMark: 34, // `\"`\n  numberSign: 35, // `#`\n  dollarSign: 36, // `$`\n  percentSign: 37, // `%`\n  ampersand: 38, // `&`\n  apostrophe: 39, // `'`\n  leftParenthesis: 40, // `(`\n  rightParenthesis: 41, // `)`\n  asterisk: 42, // `*`\n  plusSign: 43, // `+`\n  comma: 44, // `,`\n  dash: 45, // `-`\n  dot: 46, // `.`\n  slash: 47, // `/`\n  digit0: 48, // `0`\n  digit1: 49, // `1`\n  digit2: 50, // `2`\n  digit3: 51, // `3`\n  digit4: 52, // `4`\n  digit5: 53, // `5`\n  digit6: 54, // `6`\n  digit7: 55, // `7`\n  digit8: 56, // `8`\n  digit9: 57, // `9`\n  colon: 58, // `:`\n  semicolon: 59, // `;`\n  lessThan: 60, // `<`\n  equalsTo: 61, // `=`\n  greaterThan: 62, // `>`\n  questionMark: 63, // `?`\n  atSign: 64, // `@`\n  uppercaseA: 65, // `A`\n  uppercaseB: 66, // `B`\n  uppercaseC: 67, // `C`\n  uppercaseD: 68, // `D`\n  uppercaseE: 69, // `E`\n  uppercaseF: 70, // `F`\n  uppercaseG: 71, // `G`\n  uppercaseH: 72, // `H`\n  uppercaseI: 73, // `I`\n  uppercaseJ: 74, // `J`\n  uppercaseK: 75, // `K`\n  uppercaseL: 76, // `L`\n  uppercaseM: 77, // `M`\n  uppercaseN: 78, // `N`\n  uppercaseO: 79, // `O`\n  uppercaseP: 80, // `P`\n  uppercaseQ: 81, // `Q`\n  uppercaseR: 82, // `R`\n  uppercaseS: 83, // `S`\n  uppercaseT: 84, // `T`\n  uppercaseU: 85, // `U`\n  uppercaseV: 86, // `V`\n  uppercaseW: 87, // `W`\n  uppercaseX: 88, // `X`\n  uppercaseY: 89, // `Y`\n  uppercaseZ: 90, // `Z`\n  leftSquareBracket: 91, // `[`\n  backslash: 92, // `\\`\n  rightSquareBracket: 93, // `]`\n  caret: 94, // `^`\n  underscore: 95, // `_`\n  graveAccent: 96, // `` ` ``\n  lowercaseA: 97, // `a`\n  lowercaseB: 98, // `b`\n  lowercaseC: 99, // `c`\n  lowercaseD: 100, // `d`\n  lowercaseE: 101, // `e`\n  lowercaseF: 102, // `f`\n  lowercaseG: 103, // `g`\n  lowercaseH: 104, // `h`\n  lowercaseI: 105, // `i`\n  lowercaseJ: 106, // `j`\n  lowercaseK: 107, // `k`\n  lowercaseL: 108, // `l`\n  lowercaseM: 109, // `m`\n  lowercaseN: 110, // `n`\n  lowercaseO: 111, // `o`\n  lowercaseP: 112, // `p`\n  lowercaseQ: 113, // `q`\n  lowercaseR: 114, // `r`\n  lowercaseS: 115, // `s`\n  lowercaseT: 116, // `t`\n  lowercaseU: 117, // `u`\n  lowercaseV: 118, // `v`\n  lowercaseW: 119, // `w`\n  lowercaseX: 120, // `x`\n  lowercaseY: 121, // `y`\n  lowercaseZ: 122, // `z`\n  leftCurlyBrace: 123, // `{`\n  verticalBar: 124, // `|`\n  rightCurlyBrace: 125, // `}`\n  tilde: 126, // `~`\n  del: 127,\n  // Unicode Specials block.\n  byteOrderMarker: 65_279,\n  // Unicode Specials block.\n  replacementCharacter: 65_533 // `�`\n})\n","/**\n * This module is compiled away!\n *\n * Parsing markdown comes with a couple of constants, such as minimum or maximum\n * sizes of certain sequences.\n * Additionally, there are a couple symbols used inside micromark.\n * These are all defined here, but compiled away by scripts.\n */\nexport const constants = /** @type {const} */ ({\n  attentionSideAfter: 2, // Symbol to mark an attention sequence as after content: `a*`\n  attentionSideBefore: 1, // Symbol to mark an attention sequence as before content: `*a`\n  atxHeadingOpeningFenceSizeMax: 6, // 6 number signs is fine, 7 isn’t.\n  autolinkDomainSizeMax: 63, // 63 characters is fine, 64 is too many.\n  autolinkSchemeSizeMax: 32, // 32 characters is fine, 33 is too many.\n  cdataOpeningString: 'CDATA[', // And preceded by `<![`.\n  characterGroupPunctuation: 2, // Symbol used to indicate a character is punctuation\n  characterGroupWhitespace: 1, // Symbol used to indicate a character is whitespace\n  characterReferenceDecimalSizeMax: 7, // `&#9999999;`.\n  characterReferenceHexadecimalSizeMax: 6, // `&#xff9999;`.\n  characterReferenceNamedSizeMax: 31, // `&CounterClockwiseContourIntegral;`.\n  codeFencedSequenceSizeMin: 3, // At least 3 ticks or tildes are needed.\n  contentTypeContent: 'content',\n  contentTypeDocument: 'document',\n  contentTypeFlow: 'flow',\n  contentTypeString: 'string',\n  contentTypeText: 'text',\n  hardBreakPrefixSizeMin: 2, // At least 2 trailing spaces are needed.\n  htmlBasic: 6, // Symbol for `<div`\n  htmlCdata: 5, // Symbol for `<![CDATA[]]>`\n  htmlComment: 2, // Symbol for `<!---->`\n  htmlComplete: 7, // Symbol for `<x>`\n  htmlDeclaration: 4, // Symbol for `<!doctype>`\n  htmlInstruction: 3, // Symbol for `<?php?>`\n  htmlRawSizeMax: 8, // Length of `textarea`.\n  htmlRaw: 1, // Symbol for `<script>`\n  linkResourceDestinationBalanceMax: 32, // See: <https://spec.commonmark.org/0.30/#link-destination>, <https://github.com/remarkjs/react-markdown/issues/658#issuecomment-984345577>\n  linkReferenceSizeMax: 999, // See: <https://spec.commonmark.org/0.30/#link-label>\n  listItemValueSizeMax: 10, // See: <https://spec.commonmark.org/0.30/#ordered-list-marker>\n  numericBaseDecimal: 10,\n  numericBaseHexadecimal: 0x10,\n  tabSize: 4, // Tabs have a hard-coded size of 4, per CommonMark.\n  thematicBreakMarkerCountMin: 3, // At least 3 asterisks, dashes, or underscores are needed.\n  v8MaxSafeChunkSize: 10_000 // V8 (and potentially others) have problems injecting giant arrays into other arrays, hence we operate in chunks.\n})\n","/**\n * This module is compiled away!\n *\n * Here is the list of all types of tokens exposed by micromark, with a short\n * explanation of what they include and where they are found.\n * In picking names, generally, the rule is to be as explicit as possible\n * instead of reusing names.\n * For example, there is a `definitionDestination` and a `resourceDestination`,\n * instead of one shared name.\n */\n\n// Note: when changing the next record, you must also change `TokenTypeMap`\n// in `micromark-util-types/index.d.ts`.\nexport const types = /** @type {const} */ ({\n  // Generic type for data, such as in a title, a destination, etc.\n  data: 'data',\n\n  // Generic type for syntactic whitespace (tabs, virtual spaces, spaces).\n  // Such as, between a fenced code fence and an info string.\n  whitespace: 'whitespace',\n\n  // Generic type for line endings (line feed, carriage return, carriage return +\n  // line feed).\n  lineEnding: 'lineEnding',\n\n  // A line ending, but ending a blank line.\n  lineEndingBlank: 'lineEndingBlank',\n\n  // Generic type for whitespace (tabs, virtual spaces, spaces) at the start of a\n  // line.\n  linePrefix: 'linePrefix',\n\n  // Generic type for whitespace (tabs, virtual spaces, spaces) at the end of a\n  // line.\n  lineSuffix: 'lineSuffix',\n\n  // Whole ATX heading:\n  //\n  // ```markdown\n  // #\n  // ## Alpha\n  // ### Bravo ###\n  // ```\n  //\n  // Includes `atxHeadingSequence`, `whitespace`, `atxHeadingText`.\n  atxHeading: 'atxHeading',\n\n  // Sequence of number signs in an ATX heading (`###`).\n  atxHeadingSequence: 'atxHeadingSequence',\n\n  // Content in an ATX heading (`alpha`).\n  // Includes text.\n  atxHeadingText: 'atxHeadingText',\n\n  // Whole autolink (`<https://example.com>` or `<admin@example.com>`)\n  // Includes `autolinkMarker` and `autolinkProtocol` or `autolinkEmail`.\n  autolink: 'autolink',\n\n  // Email autolink w/o markers (`admin@example.com`)\n  autolinkEmail: 'autolinkEmail',\n\n  // Marker around an `autolinkProtocol` or `autolinkEmail` (`<` or `>`).\n  autolinkMarker: 'autolinkMarker',\n\n  // Protocol autolink w/o markers (`https://example.com`)\n  autolinkProtocol: 'autolinkProtocol',\n\n  // A whole character escape (`\\-`).\n  // Includes `escapeMarker` and `characterEscapeValue`.\n  characterEscape: 'characterEscape',\n\n  // The escaped character (`-`).\n  characterEscapeValue: 'characterEscapeValue',\n\n  // A whole character reference (`&amp;`, `&#8800;`, or `&#x1D306;`).\n  // Includes `characterReferenceMarker`, an optional\n  // `characterReferenceMarkerNumeric`, in which case an optional\n  // `characterReferenceMarkerHexadecimal`, and a `characterReferenceValue`.\n  characterReference: 'characterReference',\n\n  // The start or end marker (`&` or `;`).\n  characterReferenceMarker: 'characterReferenceMarker',\n\n  // Mark reference as numeric (`#`).\n  characterReferenceMarkerNumeric: 'characterReferenceMarkerNumeric',\n\n  // Mark reference as numeric (`x` or `X`).\n  characterReferenceMarkerHexadecimal: 'characterReferenceMarkerHexadecimal',\n\n  // Value of character reference w/o markers (`amp`, `8800`, or `1D306`).\n  characterReferenceValue: 'characterReferenceValue',\n\n  // Whole fenced code:\n  //\n  // ````markdown\n  // ```js\n  // alert(1)\n  // ```\n  // ````\n  codeFenced: 'codeFenced',\n\n  // A fenced code fence, including whitespace, sequence, info, and meta\n  // (` ```js `).\n  codeFencedFence: 'codeFencedFence',\n\n  // Sequence of grave accent or tilde characters (` ``` `) in a fence.\n  codeFencedFenceSequence: 'codeFencedFenceSequence',\n\n  // Info word (`js`) in a fence.\n  // Includes string.\n  codeFencedFenceInfo: 'codeFencedFenceInfo',\n\n  // Meta words (`highlight=\"1\"`) in a fence.\n  // Includes string.\n  codeFencedFenceMeta: 'codeFencedFenceMeta',\n\n  // A line of code.\n  codeFlowValue: 'codeFlowValue',\n\n  // Whole indented code:\n  //\n  // ```markdown\n  //     alert(1)\n  // ```\n  //\n  // Includes `lineEnding`, `linePrefix`, and `codeFlowValue`.\n  codeIndented: 'codeIndented',\n\n  // A text code (``` `alpha` ```).\n  // Includes `codeTextSequence`, `codeTextData`, `lineEnding`, and can include\n  // `codeTextPadding`.\n  codeText: 'codeText',\n\n  codeTextData: 'codeTextData',\n\n  // A space or line ending right after or before a tick.\n  codeTextPadding: 'codeTextPadding',\n\n  // A text code fence (` `` `).\n  codeTextSequence: 'codeTextSequence',\n\n  // Whole content:\n  //\n  // ```markdown\n  // [a]: b\n  // c\n  // =\n  // d\n  // ```\n  //\n  // Includes `paragraph` and `definition`.\n  content: 'content',\n  // Whole definition:\n  //\n  // ```markdown\n  // [micromark]: https://github.com/micromark/micromark\n  // ```\n  //\n  // Includes `definitionLabel`, `definitionMarker`, `whitespace`,\n  // `definitionDestination`, and optionally `lineEnding` and `definitionTitle`.\n  definition: 'definition',\n\n  // Destination of a definition (`https://github.com/micromark/micromark` or\n  // `<https://github.com/micromark/micromark>`).\n  // Includes `definitionDestinationLiteral` or `definitionDestinationRaw`.\n  definitionDestination: 'definitionDestination',\n\n  // Enclosed destination of a definition\n  // (`<https://github.com/micromark/micromark>`).\n  // Includes `definitionDestinationLiteralMarker` and optionally\n  // `definitionDestinationString`.\n  definitionDestinationLiteral: 'definitionDestinationLiteral',\n\n  // Markers of an enclosed definition destination (`<` or `>`).\n  definitionDestinationLiteralMarker: 'definitionDestinationLiteralMarker',\n\n  // Unenclosed destination of a definition\n  // (`https://github.com/micromark/micromark`).\n  // Includes `definitionDestinationString`.\n  definitionDestinationRaw: 'definitionDestinationRaw',\n\n  // Text in an destination (`https://github.com/micromark/micromark`).\n  // Includes string.\n  definitionDestinationString: 'definitionDestinationString',\n\n  // Label of a definition (`[micromark]`).\n  // Includes `definitionLabelMarker` and `definitionLabelString`.\n  definitionLabel: 'definitionLabel',\n\n  // Markers of a definition label (`[` or `]`).\n  definitionLabelMarker: 'definitionLabelMarker',\n\n  // Value of a definition label (`micromark`).\n  // Includes string.\n  definitionLabelString: 'definitionLabelString',\n\n  // Marker between a label and a destination (`:`).\n  definitionMarker: 'definitionMarker',\n\n  // Title of a definition (`\"x\"`, `'y'`, or `(z)`).\n  // Includes `definitionTitleMarker` and optionally `definitionTitleString`.\n  definitionTitle: 'definitionTitle',\n\n  // Marker around a title of a definition (`\"`, `'`, `(`, or `)`).\n  definitionTitleMarker: 'definitionTitleMarker',\n\n  // Data without markers in a title (`z`).\n  // Includes string.\n  definitionTitleString: 'definitionTitleString',\n\n  // Emphasis (`*alpha*`).\n  // Includes `emphasisSequence` and `emphasisText`.\n  emphasis: 'emphasis',\n\n  // Sequence of emphasis markers (`*` or `_`).\n  emphasisSequence: 'emphasisSequence',\n\n  // Emphasis text (`alpha`).\n  // Includes text.\n  emphasisText: 'emphasisText',\n\n  // The character escape marker (`\\`).\n  escapeMarker: 'escapeMarker',\n\n  // A hard break created with a backslash (`\\\\n`).\n  // Note: does not include the line ending.\n  hardBreakEscape: 'hardBreakEscape',\n\n  // A hard break created with trailing spaces (`  \\n`).\n  // Does not include the line ending.\n  hardBreakTrailing: 'hardBreakTrailing',\n\n  // Flow HTML:\n  //\n  // ```markdown\n  // <div\n  // ```\n  //\n  // Inlcudes `lineEnding`, `htmlFlowData`.\n  htmlFlow: 'htmlFlow',\n\n  htmlFlowData: 'htmlFlowData',\n\n  // HTML in text (the tag in `a <i> b`).\n  // Includes `lineEnding`, `htmlTextData`.\n  htmlText: 'htmlText',\n\n  htmlTextData: 'htmlTextData',\n\n  // Whole image (`![alpha](bravo)`, `![alpha][bravo]`, `![alpha][]`, or\n  // `![alpha]`).\n  // Includes `label` and an optional `resource` or `reference`.\n  image: 'image',\n\n  // Whole link label (`[*alpha*]`).\n  // Includes `labelLink` or `labelImage`, `labelText`, and `labelEnd`.\n  label: 'label',\n\n  // Text in an label (`*alpha*`).\n  // Includes text.\n  labelText: 'labelText',\n\n  // Start a link label (`[`).\n  // Includes a `labelMarker`.\n  labelLink: 'labelLink',\n\n  // Start an image label (`![`).\n  // Includes `labelImageMarker` and `labelMarker`.\n  labelImage: 'labelImage',\n\n  // Marker of a label (`[` or `]`).\n  labelMarker: 'labelMarker',\n\n  // Marker to start an image (`!`).\n  labelImageMarker: 'labelImageMarker',\n\n  // End a label (`]`).\n  // Includes `labelMarker`.\n  labelEnd: 'labelEnd',\n\n  // Whole link (`[alpha](bravo)`, `[alpha][bravo]`, `[alpha][]`, or `[alpha]`).\n  // Includes `label` and an optional `resource` or `reference`.\n  link: 'link',\n\n  // Whole paragraph:\n  //\n  // ```markdown\n  // alpha\n  // bravo.\n  // ```\n  //\n  // Includes text.\n  paragraph: 'paragraph',\n\n  // A reference (`[alpha]` or `[]`).\n  // Includes `referenceMarker` and an optional `referenceString`.\n  reference: 'reference',\n\n  // A reference marker (`[` or `]`).\n  referenceMarker: 'referenceMarker',\n\n  // Reference text (`alpha`).\n  // Includes string.\n  referenceString: 'referenceString',\n\n  // A resource (`(https://example.com \"alpha\")`).\n  // Includes `resourceMarker`, an optional `resourceDestination` with an optional\n  // `whitespace` and `resourceTitle`.\n  resource: 'resource',\n\n  // A resource destination (`https://example.com`).\n  // Includes `resourceDestinationLiteral` or `resourceDestinationRaw`.\n  resourceDestination: 'resourceDestination',\n\n  // A literal resource destination (`<https://example.com>`).\n  // Includes `resourceDestinationLiteralMarker` and optionally\n  // `resourceDestinationString`.\n  resourceDestinationLiteral: 'resourceDestinationLiteral',\n\n  // A resource destination marker (`<` or `>`).\n  resourceDestinationLiteralMarker: 'resourceDestinationLiteralMarker',\n\n  // A raw resource destination (`https://example.com`).\n  // Includes `resourceDestinationString`.\n  resourceDestinationRaw: 'resourceDestinationRaw',\n\n  // Resource destination text (`https://example.com`).\n  // Includes string.\n  resourceDestinationString: 'resourceDestinationString',\n\n  // A resource marker (`(` or `)`).\n  resourceMarker: 'resourceMarker',\n\n  // A resource title (`\"alpha\"`, `'alpha'`, or `(alpha)`).\n  // Includes `resourceTitleMarker` and optionally `resourceTitleString`.\n  resourceTitle: 'resourceTitle',\n\n  // A resource title marker (`\"`, `'`, `(`, or `)`).\n  resourceTitleMarker: 'resourceTitleMarker',\n\n  // Resource destination title (`alpha`).\n  // Includes string.\n  resourceTitleString: 'resourceTitleString',\n\n  // Whole setext heading:\n  //\n  // ```markdown\n  // alpha\n  // bravo\n  // =====\n  // ```\n  //\n  // Includes `setextHeadingText`, `lineEnding`, `linePrefix`, and\n  // `setextHeadingLine`.\n  setextHeading: 'setextHeading',\n\n  // Content in a setext heading (`alpha\\nbravo`).\n  // Includes text.\n  setextHeadingText: 'setextHeadingText',\n\n  // Underline in a setext heading, including whitespace suffix (`==`).\n  // Includes `setextHeadingLineSequence`.\n  setextHeadingLine: 'setextHeadingLine',\n\n  // Sequence of equals or dash characters in underline in a setext heading (`-`).\n  setextHeadingLineSequence: 'setextHeadingLineSequence',\n\n  // Strong (`**alpha**`).\n  // Includes `strongSequence` and `strongText`.\n  strong: 'strong',\n\n  // Sequence of strong markers (`**` or `__`).\n  strongSequence: 'strongSequence',\n\n  // Strong text (`alpha`).\n  // Includes text.\n  strongText: 'strongText',\n\n  // Whole thematic break:\n  //\n  // ```markdown\n  // * * *\n  // ```\n  //\n  // Includes `thematicBreakSequence` and `whitespace`.\n  thematicBreak: 'thematicBreak',\n\n  // A sequence of one or more thematic break markers (`***`).\n  thematicBreakSequence: 'thematicBreakSequence',\n\n  // Whole block quote:\n  //\n  // ```markdown\n  // > a\n  // >\n  // > b\n  // ```\n  //\n  // Includes `blockQuotePrefix` and flow.\n  blockQuote: 'blockQuote',\n  // The `>` or `> ` of a block quote.\n  blockQuotePrefix: 'blockQuotePrefix',\n  // The `>` of a block quote prefix.\n  blockQuoteMarker: 'blockQuoteMarker',\n  // The optional ` ` of a block quote prefix.\n  blockQuotePrefixWhitespace: 'blockQuotePrefixWhitespace',\n\n  // Whole ordered list:\n  //\n  // ```markdown\n  // 1. a\n  //    b\n  // ```\n  //\n  // Includes `listItemPrefix`, flow, and optionally  `listItemIndent` on further\n  // lines.\n  listOrdered: 'listOrdered',\n\n  // Whole unordered list:\n  //\n  // ```markdown\n  // - a\n  //   b\n  // ```\n  //\n  // Includes `listItemPrefix`, flow, and optionally  `listItemIndent` on further\n  // lines.\n  listUnordered: 'listUnordered',\n\n  // The indent of further list item lines.\n  listItemIndent: 'listItemIndent',\n\n  // A marker, as in, `*`, `+`, `-`, `.`, or `)`.\n  listItemMarker: 'listItemMarker',\n\n  // The thing that starts a list item, such as `1. `.\n  // Includes `listItemValue` if ordered, `listItemMarker`, and\n  // `listItemPrefixWhitespace` (unless followed by a line ending).\n  listItemPrefix: 'listItemPrefix',\n\n  // The whitespace after a marker.\n  listItemPrefixWhitespace: 'listItemPrefixWhitespace',\n\n  // The numerical value of an ordered item.\n  listItemValue: 'listItemValue',\n\n  // Internal types used for subtokenizers, compiled away\n  chunkDocument: 'chunkDocument',\n  chunkContent: 'chunkContent',\n  chunkFlow: 'chunkFlow',\n  chunkText: 'chunkText',\n  chunkString: 'chunkString'\n})\n","/**\n * This module is compiled away!\n *\n * While micromark works based on character codes, this module includes the\n * string versions of ’em.\n * The C0 block, except for LF, CR, HT, and w/ the replacement character added,\n * are available here.\n */\nexport const values = /** @type {const} */ ({\n  ht: '\\t',\n  lf: '\\n',\n  cr: '\\r',\n  space: ' ',\n  exclamationMark: '!',\n  quotationMark: '\"',\n  numberSign: '#',\n  dollarSign: '$',\n  percentSign: '%',\n  ampersand: '&',\n  apostrophe: \"'\",\n  leftParenthesis: '(',\n  rightParenthesis: ')',\n  asterisk: '*',\n  plusSign: '+',\n  comma: ',',\n  dash: '-',\n  dot: '.',\n  slash: '/',\n  digit0: '0',\n  digit1: '1',\n  digit2: '2',\n  digit3: '3',\n  digit4: '4',\n  digit5: '5',\n  digit6: '6',\n  digit7: '7',\n  digit8: '8',\n  digit9: '9',\n  colon: ':',\n  semicolon: ';',\n  lessThan: '<',\n  equalsTo: '=',\n  greaterThan: '>',\n  questionMark: '?',\n  atSign: '@',\n  uppercaseA: 'A',\n  uppercaseB: 'B',\n  uppercaseC: 'C',\n  uppercaseD: 'D',\n  uppercaseE: 'E',\n  uppercaseF: 'F',\n  uppercaseG: 'G',\n  uppercaseH: 'H',\n  uppercaseI: 'I',\n  uppercaseJ: 'J',\n  uppercaseK: 'K',\n  uppercaseL: 'L',\n  uppercaseM: 'M',\n  uppercaseN: 'N',\n  uppercaseO: 'O',\n  uppercaseP: 'P',\n  uppercaseQ: 'Q',\n  uppercaseR: 'R',\n  uppercaseS: 'S',\n  uppercaseT: 'T',\n  uppercaseU: 'U',\n  uppercaseV: 'V',\n  uppercaseW: 'W',\n  uppercaseX: 'X',\n  uppercaseY: 'Y',\n  uppercaseZ: 'Z',\n  leftSquareBracket: '[',\n  backslash: '\\\\',\n  rightSquareBracket: ']',\n  caret: '^',\n  underscore: '_',\n  graveAccent: '`',\n  lowercaseA: 'a',\n  lowercaseB: 'b',\n  lowercaseC: 'c',\n  lowercaseD: 'd',\n  lowercaseE: 'e',\n  lowercaseF: 'f',\n  lowercaseG: 'g',\n  lowercaseH: 'h',\n  lowercaseI: 'i',\n  lowercaseJ: 'j',\n  lowercaseK: 'k',\n  lowercaseL: 'l',\n  lowercaseM: 'm',\n  lowercaseN: 'n',\n  lowercaseO: 'o',\n  lowercaseP: 'p',\n  lowercaseQ: 'q',\n  lowercaseR: 'r',\n  lowercaseS: 's',\n  lowercaseT: 't',\n  lowercaseU: 'u',\n  lowercaseV: 'v',\n  lowercaseW: 'w',\n  lowercaseX: 'x',\n  lowercaseY: 'y',\n  lowercaseZ: 'z',\n  leftCurlyBrace: '{',\n  verticalBar: '|',\n  rightCurlyBrace: '}',\n  tilde: '~',\n  replacementCharacter: '�'\n})\n","import {constants} from 'micromark-util-symbol'\n\n/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {undefined}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length\n  let chunkStart = 0\n  /** @type {Array<unknown>} */\n  let parameters\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n\n  remove = remove > 0 ? remove : 0\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < constants.v8MaxSafeChunkSize) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove)\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove)\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(\n        chunkStart,\n        chunkStart + constants.v8MaxSafeChunkSize\n      )\n      parameters.unshift(start, 0)\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters)\n\n      chunkStart += constants.v8MaxSafeChunkSize\n      start += constants.v8MaxSafeChunkSize\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items)\n    return list\n  }\n\n  return items\n}\n","/**\n * @import {\n *   Extension,\n *   Handles,\n *   HtmlExtension,\n *   NormalizedExtension\n * } from 'micromark-util-types'\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {ReadonlyArray<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n *   List of constructs to merge into.\n * @param {Array<unknown>} list\n *   List of constructs to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {ReadonlyArray<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   Single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","import {codes, values} from 'micromark-util-symbol'\n\n/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCodePoint(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base)\n\n  if (\n    // C0 except for HT, LF, FF, CR, space.\n    code < codes.ht ||\n    code === codes.vt ||\n    (code > codes.cr && code < codes.space) ||\n    // Control character (DEL) of C0, and C1 controls.\n    (code > codes.tilde && code < 160) ||\n    // Lone high surrogates and low surrogates.\n    (code > 55_295 && code < 57_344) ||\n    // Noncharacters.\n    (code > 64_975 && code < 65_008) ||\n    /* eslint-disable no-bitwise */\n    (code & 65_535) === 65_535 ||\n    (code & 65_535) === 65_534 ||\n    /* eslint-enable no-bitwise */\n    // Out of range\n    code > 1_114_111\n  ) {\n    return values.replacementCharacter\n  }\n\n  return String.fromCodePoint(code)\n}\n","import {values} from 'micromark-util-symbol'\n\n/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return (\n    value\n      // Collapse markdown whitespace.\n      .replace(/[\\t\\n\\r ]+/g, values.space)\n      // Trim.\n      .replace(/^ | $/g, '')\n      // Some characters are considered “uppercase”, but if their lowercase\n      // counterpart is uppercased will result in a different uppercase\n      // character.\n      // Hence, to get that form, we perform both lower- and uppercase.\n      // Upper case makes sure keys will not interact with default prototypal\n      // methods: no method is uppercase.\n      .toLowerCase()\n      .toUpperCase()\n  )\n}\n","/**\n * @import {Code} from 'micromark-util-types'\n */\n\nimport {codes} from 'micromark-util-symbol'\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/)\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/)\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < codes.space || code === codes.del)\n  )\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/)\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/)\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/)\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < codes.horizontalTab\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < codes.nul || code === codes.space)\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return (\n    code === codes.horizontalTab ||\n    code === codes.virtualSpace ||\n    code === codes.space\n  )\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u)\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/)\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n *   Expression.\n * @returns {(code: Code) => boolean}\n *   Check.\n */\nfunction regexCheck(regex) {\n  return check\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code))\n  }\n}\n","import {asciiAlphanumeric} from 'micromark-util-character'\nimport {encode} from 'micromark-util-encode'\nimport {codes, values} from 'micromark-util-symbol'\n\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri`).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * A regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string | null | undefined} url\n *   URI to sanitize.\n * @param {RegExp | null | undefined} [protocol]\n *   Allowed protocols.\n * @returns {string}\n *   Sanitized URI.\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''))\n\n  if (!protocol) {\n    return value\n  }\n\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n\n  if (\n    // If there is no protocol, it’s relative.\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    protocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n\n  return ''\n}\n\n/**\n * Normalize a URL.\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n *   URI to normalize.\n * @returns {string}\n *   Normalized URI.\n */\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n  let start = 0\n  let skip = 0\n\n  while (++index < value.length) {\n    const code = value.charCodeAt(index)\n    /** @type {string} */\n    let replace = ''\n\n    // A correct percent encoded value.\n    if (\n      code === codes.percentSign &&\n      asciiAlphanumeric(value.charCodeAt(index + 1)) &&\n      asciiAlphanumeric(value.charCodeAt(index + 2))\n    ) {\n      skip = 2\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code)\n      }\n    }\n    // Astral.\n    else if (code > 55_295 && code < 57_344) {\n      const next = value.charCodeAt(index + 1)\n\n      // A correct surrogate pair.\n      if (code < 56_320 && next > 56_319 && next < 57_344) {\n        replace = String.fromCharCode(code, next)\n        skip = 1\n      }\n      // Lone surrogate.\n      else {\n        replace = values.replacementCharacter\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code)\n    }\n\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace))\n      start = index + skip + 1\n      replace = ''\n    }\n\n    if (skip) {\n      index += skip\n      skip = 0\n    }\n  }\n\n  return result.join('') + value.slice(start)\n}\n","/**\n * @import {Effects, State, TokenType} from 'micromark-util-types'\n */\n\nimport {markdownSpace} from 'micromark-util-character'\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY\n  let size = 0\n\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type)\n      return prefix(code)\n    }\n\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code)\n      return prefix\n    }\n\n    effects.exit(type)\n    return ok(code)\n  }\n}\n","/**\n * @import {\n *   InitialConstruct,\n *   Initializer,\n *   State,\n *   TokenizeContext,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport {ok as assert} from 'devlop'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {codes, constants, types} from 'micromark-util-symbol'\n\n/** @type {InitialConstruct} */\nexport const content = {tokenize: initializeContent}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Initializer}\n *   Content.\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(\n    this.parser.constructs.contentInitial,\n    afterContentStartConstruct,\n    paragraphInitial\n  )\n  /** @type {Token} */\n  let previous\n\n  return contentStart\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    assert(\n      code === codes.eof || markdownLineEnding(code),\n      'expected eol or eof'\n    )\n\n    if (code === codes.eof) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter(types.lineEnding)\n    effects.consume(code)\n    effects.exit(types.lineEnding)\n    return factorySpace(effects, contentStart, types.linePrefix)\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    assert(\n      code !== codes.eof && !markdownLineEnding(code),\n      'expected anything other than a line ending or EOF'\n    )\n    effects.enter(types.paragraph)\n    return lineStart(code)\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter(types.chunkText, {\n      contentType: constants.contentTypeText,\n      previous\n    })\n\n    if (previous) {\n      previous.next = token\n    }\n\n    previous = token\n\n    return data(code)\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === codes.eof) {\n      effects.exit(types.chunkText)\n      effects.exit(types.paragraph)\n      effects.consume(code)\n      return\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      effects.exit(types.chunkText)\n      return lineStart\n    }\n\n    // Data.\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * @import {\n *   Construct,\n *   ContainerState,\n *   InitialConstruct,\n *   Initializer,\n *   Point,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n *   Construct and its state.\n */\n\nimport {ok as assert} from 'devlop'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\nimport {codes, constants, types} from 'micromark-util-symbol'\n\n/** @type {InitialConstruct} */\nexport const document = {tokenize: initializeDocument}\n\n/** @type {Construct} */\nconst containerConstruct = {tokenize: tokenizeContainer}\n\n/**\n * @this {TokenizeContext}\n *   Self.\n * @type {Initializer}\n *   Initializer.\n */\nfunction initializeDocument(effects) {\n  const self = this\n  /** @type {Array<StackItem>} */\n  const stack = []\n  let continued = 0\n  /** @type {TokenizeContext | undefined} */\n  let childFlow\n  /** @type {Token | undefined} */\n  let childToken\n  /** @type {number} */\n  let lineStartOffset\n\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued]\n      self.containerState = item[1]\n      assert(\n        item[0].continuation,\n        'expected `continuation` to be defined on container construct'\n      )\n      return effects.attempt(\n        item[0].continuation,\n        documentContinue,\n        checkNewContainers\n      )(code)\n    }\n\n    // Done.\n    return checkNewContainers(code)\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    assert(\n      self.containerState,\n      'expected `containerState` to be defined after continuation'\n    )\n\n    continued++\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined\n\n      if (childFlow) {\n        closeFlow()\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === types.chunkFlow\n        ) {\n          point = self.events[indexBeforeFlow][1].end\n          break\n        }\n      }\n\n      assert(point, 'could not find previous flow chunk')\n\n      exitContainers(continued)\n\n      // Fix positions.\n      let index = indexBeforeExits\n\n      while (index < self.events.length) {\n        self.events[index][1].end = {...point}\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n\n      return checkNewContainers(code)\n    }\n\n    return start(code)\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code)\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code)\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(\n        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack\n      )\n    }\n\n    // Check if there is a new container.\n    self.containerState = {}\n    return effects.check(\n      containerConstruct,\n      thereIsANewContainer,\n      thereIsNoNewContainer\n    )(code)\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow()\n    exitContainers(continued)\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length\n    lineStartOffset = self.now().offset\n    return flowStart(code)\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {}\n    return effects.attempt(\n      containerConstruct,\n      containerContinue,\n      flowStart\n    )(code)\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    assert(\n      self.currentConstruct,\n      'expected `currentConstruct` to be defined on tokenizer'\n    )\n    assert(\n      self.containerState,\n      'expected `containerState` to be defined on tokenizer'\n    )\n    continued++\n    stack.push([self.currentConstruct, self.containerState])\n    // Try another.\n    return documentContinued(code)\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === codes.eof) {\n      if (childFlow) closeFlow()\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n\n    childFlow = childFlow || self.parser.flow(self.now())\n    effects.enter(types.chunkFlow, {\n      _tokenizer: childFlow,\n      contentType: constants.contentTypeFlow,\n      previous: childToken\n    })\n\n    return flowContinue(code)\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === codes.eof) {\n      writeToChild(effects.exit(types.chunkFlow), true)\n      exitContainers(0)\n      effects.consume(code)\n      return\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.consume(code)\n      writeToChild(effects.exit(types.chunkFlow))\n      // Get ready for the next line.\n      continued = 0\n      self.interrupt = undefined\n      return start\n    }\n\n    effects.consume(code)\n    return flowContinue\n  }\n\n  /**\n   * @param {Token} token\n   *   Token.\n   * @param {boolean | undefined} [endOfFile]\n   *   Whether the token is at the end of the file (default: `false`).\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function writeToChild(token, endOfFile) {\n    assert(childFlow, 'expected `childFlow` to be defined when continuing')\n    const stream = self.sliceStream(token)\n    if (endOfFile) stream.push(null)\n    token.previous = childToken\n    if (childToken) childToken.next = token\n    childToken = token\n    childFlow.defineSkip(token.start)\n    childFlow.write(stream)\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length\n\n      while (index--) {\n        if (\n          // The token starts before the line ending…\n          childFlow.events[index][1].start.offset < lineStartOffset &&\n          // …and either is not ended yet…\n          (!childFlow.events[index][1].end ||\n            // …or ends after it.\n            childFlow.events[index][1].end.offset > lineStartOffset)\n        ) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length\n      let indexBeforeFlow = indexBeforeExits\n      /** @type {boolean | undefined} */\n      let seen\n      /** @type {Point | undefined} */\n      let point\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (\n          self.events[indexBeforeFlow][0] === 'exit' &&\n          self.events[indexBeforeFlow][1].type === types.chunkFlow\n        ) {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end\n            break\n          }\n\n          seen = true\n        }\n      }\n\n      assert(point, 'could not find previous flow chunk')\n\n      exitContainers(continued)\n\n      // Fix positions.\n      index = indexBeforeExits\n\n      while (index < self.events.length) {\n        self.events[index][1].end = {...point}\n        index++\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(\n        self.events,\n        indexBeforeFlow + 1,\n        0,\n        self.events.slice(indexBeforeExits)\n      )\n\n      // Discard the duplicate exits.\n      self.events.length = index\n    }\n  }\n\n  /**\n   * @param {number} size\n   *   Size.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function exitContainers(size) {\n    let index = stack.length\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index]\n      self.containerState = entry[1]\n      assert(\n        entry[0].exit,\n        'expected `exit` to be defined on container construct'\n      )\n      entry[0].exit.call(self, effects)\n    }\n\n    stack.length = size\n  }\n\n  function closeFlow() {\n    assert(\n      self.containerState,\n      'expected `containerState` to be defined when closing flow'\n    )\n    assert(childFlow, 'expected `childFlow` to be defined when closing it')\n    childFlow.write([codes.eof])\n    childToken = undefined\n    childFlow = undefined\n    self.containerState._closeFlow = undefined\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n *   Tokenizer.\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n  assert(\n    this.parser.constructs.disable.null,\n    'expected `disable.null` to be populated'\n  )\n  return factorySpace(\n    effects,\n    effects.attempt(this.parser.constructs.document, ok, nok),\n    types.linePrefix,\n    this.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : constants.tabSize\n  )\n}\n","/**\n * @import {Code} from 'micromark-util-types'\n */\n\nimport {\n  markdownLineEndingOrSpace,\n  unicodePunctuation,\n  unicodeWhitespace\n} from 'micromark-util-character'\nimport {codes, constants} from 'micromark-util-symbol'\n\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (\n    code === codes.eof ||\n    markdownLineEndingOrSpace(code) ||\n    unicodeWhitespace(code)\n  ) {\n    return constants.characterGroupWhitespace\n  }\n\n  if (unicodePunctuation(code)) {\n    return constants.characterGroupPunctuation\n  }\n}\n","/**\n * @import {Event, Resolver, TokenizeContext} from 'micromark-util-types'\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {ReadonlyArray<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @import {\n *   Code,\n *   Construct,\n *   Event,\n *   Point,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport {ok as assert} from 'devlop'\nimport {push, splice} from 'micromark-util-chunked'\nimport {classifyCharacter} from 'micromark-util-classify-character'\nimport {resolveAll} from 'micromark-util-resolve-all'\nimport {codes, constants, types} from 'micromark-util-symbol'\n\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  resolveAll: resolveAllAttention,\n  tokenize: tokenizeAttention\n}\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n// eslint-disable-next-line complexity\nfunction resolveAllAttention(events, context) {\n  let index = -1\n  /** @type {number} */\n  let open\n  /** @type {Token} */\n  let group\n  /** @type {Token} */\n  let text\n  /** @type {Token} */\n  let openingSequence\n  /** @type {Token} */\n  let closingSequence\n  /** @type {number} */\n  let use\n  /** @type {Array<Event>} */\n  let nextEvents\n  /** @type {number} */\n  let offset\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === 'attentionSequence' &&\n      events[index][1]._close\n    ) {\n      open = index\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (\n          events[open][0] === 'exit' &&\n          events[open][1].type === 'attentionSequence' &&\n          events[open][1]._open &&\n          // If the markers are the same:\n          context.sliceSerialize(events[open][1]).charCodeAt(0) ===\n            context.sliceSerialize(events[index][1]).charCodeAt(0)\n        ) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if (\n            (events[open][1]._close || events[index][1]._open) &&\n            (events[index][1].end.offset - events[index][1].start.offset) % 3 &&\n            !(\n              (events[open][1].end.offset -\n                events[open][1].start.offset +\n                events[index][1].end.offset -\n                events[index][1].start.offset) %\n              3\n            )\n          ) {\n            continue\n          }\n\n          // Number of markers to use from the sequence.\n          use =\n            events[open][1].end.offset - events[open][1].start.offset > 1 &&\n            events[index][1].end.offset - events[index][1].start.offset > 1\n              ? 2\n              : 1\n\n          const start = {...events[open][1].end}\n          const end = {...events[index][1].start}\n          movePoint(start, -use)\n          movePoint(end, use)\n\n          openingSequence = {\n            type: use > 1 ? types.strongSequence : types.emphasisSequence,\n            start,\n            end: {...events[open][1].end}\n          }\n          closingSequence = {\n            type: use > 1 ? types.strongSequence : types.emphasisSequence,\n            start: {...events[index][1].start},\n            end\n          }\n          text = {\n            type: use > 1 ? types.strongText : types.emphasisText,\n            start: {...events[open][1].end},\n            end: {...events[index][1].start}\n          }\n          group = {\n            type: use > 1 ? types.strong : types.emphasis,\n            start: {...openingSequence.start},\n            end: {...closingSequence.end}\n          }\n\n          events[open][1].end = {...openingSequence.start}\n          events[index][1].start = {...closingSequence.end}\n\n          nextEvents = []\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [\n              ['enter', events[open][1], context],\n              ['exit', events[open][1], context]\n            ])\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [\n            ['enter', group, context],\n            ['enter', openingSequence, context],\n            ['exit', openingSequence, context],\n            ['enter', text, context]\n          ])\n\n          // Always populated by defaults.\n          assert(\n            context.parser.constructs.insideSpan.null,\n            'expected `insideSpan` to be populated'\n          )\n\n          // Between.\n          nextEvents = push(\n            nextEvents,\n            resolveAll(\n              context.parser.constructs.insideSpan.null,\n              events.slice(open + 1, index),\n              context\n            )\n          )\n\n          // Closing.\n          nextEvents = push(nextEvents, [\n            ['exit', text, context],\n            ['enter', closingSequence, context],\n            ['exit', closingSequence, context],\n            ['exit', group, context]\n          ])\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2\n            nextEvents = push(nextEvents, [\n              ['enter', events[index][1], context],\n              ['exit', events[index][1], context]\n            ])\n          } else {\n            offset = 0\n          }\n\n          splice(events, open - 1, index - open + 3, nextEvents)\n\n          index = open + nextEvents.length - offset - 2\n          break\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1\n\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data'\n    }\n  }\n\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null\n  const previous = this.previous\n  const before = classifyCharacter(previous)\n\n  /** @type {NonNullable<Code>} */\n  let marker\n\n  return start\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    assert(\n      code === codes.asterisk || code === codes.underscore,\n      'expected asterisk or underscore'\n    )\n    marker = code\n    effects.enter('attentionSequence')\n    return inside(code)\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n\n    const token = effects.exit('attentionSequence')\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code)\n\n    // Always populated by defaults.\n    assert(attentionMarkers, 'expected `attentionMarkers` to be populated')\n\n    const open =\n      !after ||\n      (after === constants.characterGroupPunctuation && before) ||\n      attentionMarkers.includes(code)\n    const close =\n      !before ||\n      (before === constants.characterGroupPunctuation && after) ||\n      attentionMarkers.includes(previous)\n\n    token._open = Boolean(\n      marker === codes.asterisk ? open : open && (before || !close)\n    )\n    token._close = Boolean(\n      marker === codes.asterisk ? close : close && (after || !open)\n    )\n    return ok(code)\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n *   Point.\n * @param {number} offset\n *   Amount to move.\n * @returns {undefined}\n *   Nothing.\n */\nfunction movePoint(point, offset) {\n  point.column += offset\n  point.offset += offset\n  point._bufferIndex += offset\n}\n","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport {ok as assert} from 'devlop'\nimport {\n  asciiAlphanumeric,\n  asciiAlpha,\n  asciiAtext,\n  asciiControl\n} from 'micromark-util-character'\nimport {codes, constants, types} from 'micromark-util-symbol'\n\n/** @type {Construct} */\nexport const autolink = {name: 'autolink', tokenize: tokenizeAutolink}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0\n\n  return start\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    assert(code === codes.lessThan, 'expected `<`')\n    effects.enter(types.autolink)\n    effects.enter(types.autolinkMarker)\n    effects.consume(code)\n    effects.exit(types.autolinkMarker)\n    effects.enter(types.autolinkProtocol)\n    return open\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return schemeOrEmailAtext\n    }\n\n    if (code === codes.atSign) {\n      return nok(code)\n    }\n\n    return emailAtext(code)\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (\n      code === codes.plusSign ||\n      code === codes.dash ||\n      code === codes.dot ||\n      asciiAlphanumeric(code)\n    ) {\n      // Count the previous alphabetical from `open` too.\n      size = 1\n      return schemeInsideOrEmailAtext(code)\n    }\n\n    return emailAtext(code)\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === codes.colon) {\n      effects.consume(code)\n      size = 0\n      return urlInside\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (\n      (code === codes.plusSign ||\n        code === codes.dash ||\n        code === codes.dot ||\n        asciiAlphanumeric(code)) &&\n      size++ < constants.autolinkSchemeSizeMax\n    ) {\n      effects.consume(code)\n      return schemeInsideOrEmailAtext\n    }\n\n    size = 0\n    return emailAtext(code)\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === codes.greaterThan) {\n      effects.exit(types.autolinkProtocol)\n      effects.enter(types.autolinkMarker)\n      effects.consume(code)\n      effects.exit(types.autolinkMarker)\n      effects.exit(types.autolink)\n      return ok\n    }\n\n    // ASCII control, space, or `<`.\n    if (\n      code === codes.eof ||\n      code === codes.space ||\n      code === codes.lessThan ||\n      asciiControl(code)\n    ) {\n      return nok(code)\n    }\n\n    effects.consume(code)\n    return urlInside\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === codes.atSign) {\n      effects.consume(code)\n      return emailAtSignOrDot\n    }\n\n    if (asciiAtext(code)) {\n      effects.consume(code)\n      return emailAtext\n    }\n\n    return nok(code)\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === codes.dot) {\n      effects.consume(code)\n      size = 0\n      return emailAtSignOrDot\n    }\n\n    if (code === codes.greaterThan) {\n      // Exit, then change the token type.\n      effects.exit(types.autolinkProtocol).type = types.autolinkEmail\n      effects.enter(types.autolinkMarker)\n      effects.consume(code)\n      effects.exit(types.autolinkMarker)\n      effects.exit(types.autolink)\n      return ok\n    }\n\n    return emailValue(code)\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if (\n      (code === codes.dash || asciiAlphanumeric(code)) &&\n      size++ < constants.autolinkDomainSizeMax\n    ) {\n      const next = code === codes.dash ? emailValue : emailLabel\n      effects.consume(code)\n      return next\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\nimport {codes, types} from 'micromark-util-symbol'\n\n/** @type {Construct} */\nexport const blankLine = {partial: true, tokenize: tokenizeBlankLine}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, after, types.linePrefix)(code)\n      : after(code)\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === codes.eof || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @import {\n *   Construct,\n *   Exiter,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport {ok as assert} from 'devlop'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\nimport {codes, constants, types} from 'micromark-util-symbol'\n\n/** @type {Construct} */\nexport const blockQuote = {\n  continuation: {tokenize: tokenizeBlockQuoteContinuation},\n  exit,\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n\n  return start\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === codes.greaterThan) {\n      const state = self.containerState\n\n      assert(state, 'expected `containerState` to be defined in container')\n\n      if (!state.open) {\n        effects.enter(types.blockQuote, {_container: true})\n        state.open = true\n      }\n\n      effects.enter(types.blockQuotePrefix)\n      effects.enter(types.blockQuoteMarker)\n      effects.consume(code)\n      effects.exit(types.blockQuoteMarker)\n      return after\n    }\n\n    return nok(code)\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter(types.blockQuotePrefixWhitespace)\n      effects.consume(code)\n      effects.exit(types.blockQuotePrefixWhitespace)\n      effects.exit(types.blockQuotePrefix)\n      return ok\n    }\n\n    effects.exit(types.blockQuotePrefix)\n    return ok(code)\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this\n\n  return contStart\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n      assert(\n        self.parser.constructs.disable.null,\n        'expected `disable.null` to be populated'\n      )\n\n      return factorySpace(\n        effects,\n        contBefore,\n        types.linePrefix,\n        self.parser.constructs.disable.null.includes('codeIndented')\n          ? undefined\n          : constants.tabSize\n      )(code)\n    }\n\n    return contBefore(code)\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code)\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit(types.blockQuote)\n}\n","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport {ok as assert} from 'devlop'\nimport {asciiPunctuation} from 'micromark-util-character'\nimport {codes, types} from 'micromark-util-symbol'\n\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    assert(code === codes.backslash, 'expected `\\\\`')\n    effects.enter(types.characterEscape)\n    effects.enter(types.escapeMarker)\n    effects.consume(code)\n    effects.exit(types.escapeMarker)\n    return inside\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter(types.characterEscapeValue)\n      effects.consume(code)\n      effects.exit(types.characterEscapeValue)\n      effects.exit(types.characterEscape)\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport {ok as assert} from 'devlop'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {\n  asciiAlphanumeric,\n  asciiDigit,\n  asciiHexDigit\n} from 'micromark-util-character'\nimport {codes, constants, types} from 'micromark-util-symbol'\n\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this\n  let size = 0\n  /** @type {number} */\n  let max\n  /** @type {(code: Code) => boolean} */\n  let test\n\n  return start\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    assert(code === codes.ampersand, 'expected `&`')\n    effects.enter(types.characterReference)\n    effects.enter(types.characterReferenceMarker)\n    effects.consume(code)\n    effects.exit(types.characterReferenceMarker)\n    return open\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === codes.numberSign) {\n      effects.enter(types.characterReferenceMarkerNumeric)\n      effects.consume(code)\n      effects.exit(types.characterReferenceMarkerNumeric)\n      return numeric\n    }\n\n    effects.enter(types.characterReferenceValue)\n    max = constants.characterReferenceNamedSizeMax\n    test = asciiAlphanumeric\n    return value(code)\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === codes.uppercaseX || code === codes.lowercaseX) {\n      effects.enter(types.characterReferenceMarkerHexadecimal)\n      effects.consume(code)\n      effects.exit(types.characterReferenceMarkerHexadecimal)\n      effects.enter(types.characterReferenceValue)\n      max = constants.characterReferenceHexadecimalSizeMax\n      test = asciiHexDigit\n      return value\n    }\n\n    effects.enter(types.characterReferenceValue)\n    max = constants.characterReferenceDecimalSizeMax\n    test = asciiDigit\n    return value(code)\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === codes.semicolon && size) {\n      const token = effects.exit(types.characterReferenceValue)\n\n      if (\n        test === asciiAlphanumeric &&\n        !decodeNamedCharacterReference(self.sliceSerialize(token))\n      ) {\n        return nok(code)\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter(types.characterReferenceMarker)\n      effects.consume(code)\n      effects.exit(types.characterReferenceMarker)\n      effects.exit(types.characterReference)\n      return ok\n    }\n\n    if (test(code) && size++ < max) {\n      effects.consume(code)\n      return value\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport {ok as assert} from 'devlop'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\nimport {codes, constants, types} from 'micromark-util-symbol'\n\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  partial: true,\n  tokenize: tokenizeNonLazyContinuation\n}\n\n/** @type {Construct} */\nexport const codeFenced = {\n  concrete: true,\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this\n  /** @type {Construct} */\n  const closeStart = {partial: true, tokenize: tokenizeCloseStart}\n  let initialPrefix = 0\n  let sizeOpen = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n\n  return start\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code)\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    assert(\n      code === codes.graveAccent || code === codes.tilde,\n      'expected `` ` `` or `~`'\n    )\n\n    const tail = self.events[self.events.length - 1]\n    initialPrefix =\n      tail && tail[1].type === types.linePrefix\n        ? tail[2].sliceSerialize(tail[1], true).length\n        : 0\n\n    marker = code\n    effects.enter(types.codeFenced)\n    effects.enter(types.codeFencedFence)\n    effects.enter(types.codeFencedFenceSequence)\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++\n      effects.consume(code)\n      return sequenceOpen\n    }\n\n    if (sizeOpen < constants.codeFencedSequenceSizeMin) {\n      return nok(code)\n    }\n\n    effects.exit(types.codeFencedFenceSequence)\n    return markdownSpace(code)\n      ? factorySpace(effects, infoBefore, types.whitespace)(code)\n      : infoBefore(code)\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === codes.eof || markdownLineEnding(code)) {\n      effects.exit(types.codeFencedFence)\n      return self.interrupt\n        ? ok(code)\n        : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n\n    effects.enter(types.codeFencedFenceInfo)\n    effects.enter(types.chunkString, {contentType: constants.contentTypeString})\n    return info(code)\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === codes.eof || markdownLineEnding(code)) {\n      effects.exit(types.chunkString)\n      effects.exit(types.codeFencedFenceInfo)\n      return infoBefore(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.exit(types.chunkString)\n      effects.exit(types.codeFencedFenceInfo)\n      return factorySpace(effects, metaBefore, types.whitespace)(code)\n    }\n\n    if (code === codes.graveAccent && code === marker) {\n      return nok(code)\n    }\n\n    effects.consume(code)\n    return info\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === codes.eof || markdownLineEnding(code)) {\n      return infoBefore(code)\n    }\n\n    effects.enter(types.codeFencedFenceMeta)\n    effects.enter(types.chunkString, {contentType: constants.contentTypeString})\n    return meta(code)\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === codes.eof || markdownLineEnding(code)) {\n      effects.exit(types.chunkString)\n      effects.exit(types.codeFencedFenceMeta)\n      return infoBefore(code)\n    }\n\n    if (code === codes.graveAccent && code === marker) {\n      return nok(code)\n    }\n\n    effects.consume(code)\n    return meta\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    assert(markdownLineEnding(code), 'expected eol')\n    return effects.attempt(closeStart, after, contentBefore)(code)\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    assert(markdownLineEnding(code), 'expected eol')\n    effects.enter(types.lineEnding)\n    effects.consume(code)\n    effects.exit(types.lineEnding)\n    return contentStart\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code)\n      ? factorySpace(\n          effects,\n          beforeContentChunk,\n          types.linePrefix,\n          initialPrefix + 1\n        )(code)\n      : beforeContentChunk(code)\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === codes.eof || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code)\n    }\n\n    effects.enter(types.codeFlowValue)\n    return contentChunk(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === codes.eof || markdownLineEnding(code)) {\n      effects.exit(types.codeFlowValue)\n      return beforeContentChunk(code)\n    }\n\n    effects.consume(code)\n    return contentChunk\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit(types.codeFenced)\n    return ok(code)\n  }\n\n  /**\n   * @this {TokenizeContext}\n   *   Context.\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0\n\n    return startBefore\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      assert(markdownLineEnding(code), 'expected eol')\n      effects.enter(types.lineEnding)\n      effects.consume(code)\n      effects.exit(types.lineEnding)\n      return start\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n      assert(\n        self.parser.constructs.disable.null,\n        'expected `disable.null` to be populated'\n      )\n\n      // To do: `enter` here or in next state?\n      effects.enter(types.codeFencedFence)\n      return markdownSpace(code)\n        ? factorySpace(\n            effects,\n            beforeSequenceClose,\n            types.linePrefix,\n            self.parser.constructs.disable.null.includes('codeIndented')\n              ? undefined\n              : constants.tabSize\n          )(code)\n        : beforeSequenceClose(code)\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter(types.codeFencedFenceSequence)\n        return sequenceClose(code)\n      }\n\n      return nok(code)\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++\n        effects.consume(code)\n        return sequenceClose\n      }\n\n      if (size >= sizeOpen) {\n        effects.exit(types.codeFencedFenceSequence)\n        return markdownSpace(code)\n          ? factorySpace(effects, sequenceCloseAfter, types.whitespace)(code)\n          : sequenceCloseAfter(code)\n      }\n\n      return nok(code)\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === codes.eof || markdownLineEnding(code)) {\n        effects.exit(types.codeFencedFence)\n        return ok(code)\n      }\n\n      return nok(code)\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this\n\n  return start\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === codes.eof) {\n      return nok(code)\n    }\n\n    assert(markdownLineEnding(code), 'expected eol')\n    effects.enter(types.lineEnding)\n    effects.consume(code)\n    effects.exit(types.lineEnding)\n    return lineStart\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport {ok as assert} from 'devlop'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\nimport {codes, constants, types} from 'micromark-util-symbol'\n\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n\n/** @type {Construct} */\nconst furtherStart = {partial: true, tokenize: tokenizeFurtherStart}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n    assert(markdownSpace(code))\n    effects.enter(types.codeIndented)\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(\n      effects,\n      afterPrefix,\n      types.linePrefix,\n      constants.tabSize + 1\n    )(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === types.linePrefix &&\n      tail[2].sliceSerialize(tail[1], true).length >= constants.tabSize\n      ? atBreak(code)\n      : nok(code)\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === codes.eof) {\n      return after(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code)\n    }\n\n    effects.enter(types.codeFlowValue)\n    return inside(code)\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === codes.eof || markdownLineEnding(code)) {\n      effects.exit(types.codeFlowValue)\n      return atBreak(code)\n    }\n\n    effects.consume(code)\n    return inside\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit(types.codeIndented)\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this\n\n  return furtherStart\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter(types.lineEnding)\n      effects.consume(code)\n      effects.exit(types.lineEnding)\n      return furtherStart\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(\n      effects,\n      afterPrefix,\n      types.linePrefix,\n      constants.tabSize + 1\n    )(code)\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === types.linePrefix &&\n      tail[2].sliceSerialize(tail[1], true).length >= constants.tabSize\n      ? ok(code)\n      : markdownLineEnding(code)\n        ? furtherStart(code)\n        : nok(code)\n  }\n}\n","/**\n * @import {\n *   Construct,\n *   Previous,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport {ok as assert} from 'devlop'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {codes, types} from 'micromark-util-symbol'\n\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  previous,\n  resolve: resolveCodeText,\n  tokenize: tokenizeCodeText\n}\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n  let index\n  /** @type {number | undefined} */\n  let enter\n\n  // If we start and end with an EOL or a space.\n  if (\n    (events[headEnterIndex][1].type === types.lineEnding ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === types.lineEnding ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === types.codeTextData) {\n        // Then we have padding.\n        events[headEnterIndex][1].type = types.codeTextPadding\n        events[tailExitIndex][1].type = types.codeTextPadding\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1\n  tailExitIndex++\n\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (\n        index !== tailExitIndex &&\n        events[index][1].type !== types.lineEnding\n      ) {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === types.lineEnding\n    ) {\n      events[enter][1].type = types.codeTextData\n\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n\n      enter = undefined\n    }\n  }\n\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== codes.graveAccent ||\n    this.events[this.events.length - 1][1].type === types.characterEscape\n  )\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this\n  let sizeOpen = 0\n  /** @type {number} */\n  let size\n  /** @type {Token} */\n  let token\n\n  return start\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    assert(code === codes.graveAccent, 'expected `` ` ``')\n    assert(previous.call(self, self.previous), 'expected correct previous')\n    effects.enter(types.codeText)\n    effects.enter(types.codeTextSequence)\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === codes.graveAccent) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n\n    effects.exit(types.codeTextSequence)\n    return between(code)\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === codes.eof) {\n      return nok(code)\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === codes.space) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return between\n    }\n\n    // Closing fence? Could also be data.\n    if (code === codes.graveAccent) {\n      token = effects.enter(types.codeTextSequence)\n      size = 0\n      return sequenceClose(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter(types.lineEnding)\n      effects.consume(code)\n      effects.exit(types.lineEnding)\n      return between\n    }\n\n    // Data.\n    effects.enter(types.codeTextData)\n    return data(code)\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (\n      code === codes.eof ||\n      code === codes.space ||\n      code === codes.graveAccent ||\n      markdownLineEnding(code)\n    ) {\n      effects.exit(types.codeTextData)\n      return between(code)\n    }\n\n    effects.consume(code)\n    return data\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === codes.graveAccent) {\n      effects.consume(code)\n      size++\n      return sequenceClose\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit(types.codeTextSequence)\n      effects.exit(types.codeText)\n      return ok(code)\n    }\n\n    // More or less accents: mark as data.\n    token.type = types.codeTextData\n    return data(code)\n  }\n}\n","import {constants} from 'micromark-util-symbol'\n\n/**\n * Some of the internal operations of micromark do lots of editing\n * operations on very large arrays. This runs into problems with two\n * properties of most circa-2020 JavaScript interpreters:\n *\n *  - Array-length modifications at the high end of an array (push/pop) are\n *    expected to be common and are implemented in (amortized) time\n *    proportional to the number of elements added or removed, whereas\n *    other operations (shift/unshift and splice) are much less efficient.\n *  - Function arguments are passed on the stack, so adding tens of thousands\n *    of elements to an array with `arr.push(...newElements)` will frequently\n *    cause stack overflows. (see <https://stackoverflow.com/questions/22123769/rangeerror-maximum-call-stack-size-exceeded-why>)\n *\n * SpliceBuffers are an implementation of gap buffers, which are a\n * generalization of the \"queue made of two stacks\" idea. The splice buffer\n * maintains a cursor, and moving the cursor has cost proportional to the\n * distance the cursor moves, but inserting, deleting, or splicing in\n * new information at the cursor is as efficient as the push/pop operation.\n * This allows for an efficient sequence of splices (or pushes, pops, shifts,\n * or unshifts) as long such edits happen at the same part of the array or\n * generally sweep through the array from the beginning to the end.\n *\n * The interface for splice buffers also supports large numbers of inputs by\n * passing a single array argument rather passing multiple arguments on the\n * function call stack.\n *\n * @template T\n *   Item type.\n */\nexport class SpliceBuffer {\n  /**\n   * @param {ReadonlyArray<T> | null | undefined} [initial]\n   *   Initial items (optional).\n   * @returns\n   *   Splice buffer.\n   */\n  constructor(initial) {\n    /** @type {Array<T>} */\n    this.left = initial ? [...initial] : []\n    /** @type {Array<T>} */\n    this.right = []\n  }\n\n  /**\n   * Array access;\n   * does not move the cursor.\n   *\n   * @param {number} index\n   *   Index.\n   * @return {T}\n   *   Item.\n   */\n  get(index) {\n    if (index < 0 || index >= this.left.length + this.right.length) {\n      throw new RangeError(\n        'Cannot access index `' +\n          index +\n          '` in a splice buffer of size `' +\n          (this.left.length + this.right.length) +\n          '`'\n      )\n    }\n\n    if (index < this.left.length) return this.left[index]\n    return this.right[this.right.length - index + this.left.length - 1]\n  }\n\n  /**\n   * The length of the splice buffer, one greater than the largest index in the\n   * array.\n   */\n  get length() {\n    return this.left.length + this.right.length\n  }\n\n  /**\n   * Remove and return `list[0]`;\n   * moves the cursor to `0`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  shift() {\n    this.setCursor(0)\n    return this.right.pop()\n  }\n\n  /**\n   * Slice the buffer to get an array;\n   * does not move the cursor.\n   *\n   * @param {number} start\n   *   Start.\n   * @param {number | null | undefined} [end]\n   *   End (optional).\n   * @returns {Array<T>}\n   *   Array of items.\n   */\n  slice(start, end) {\n    /** @type {number} */\n    const stop =\n      end === null || end === undefined ? Number.POSITIVE_INFINITY : end\n\n    if (stop < this.left.length) {\n      return this.left.slice(start, stop)\n    }\n\n    if (start > this.left.length) {\n      return this.right\n        .slice(\n          this.right.length - stop + this.left.length,\n          this.right.length - start + this.left.length\n        )\n        .reverse()\n    }\n\n    return this.left\n      .slice(start)\n      .concat(\n        this.right.slice(this.right.length - stop + this.left.length).reverse()\n      )\n  }\n\n  /**\n   * Mimics the behavior of Array.prototype.splice() except for the change of\n   * interface necessary to avoid segfaults when patching in very large arrays.\n   *\n   * This operation moves cursor is moved to `start` and results in the cursor\n   * placed after any inserted items.\n   *\n   * @param {number} start\n   *   Start;\n   *   zero-based index at which to start changing the array;\n   *   negative numbers count backwards from the end of the array and values\n   *   that are out-of bounds are clamped to the appropriate end of the array.\n   * @param {number | null | undefined} [deleteCount=0]\n   *   Delete count (default: `0`);\n   *   maximum number of elements to delete, starting from start.\n   * @param {Array<T> | null | undefined} [items=[]]\n   *   Items to include in place of the deleted items (default: `[]`).\n   * @return {Array<T>}\n   *   Any removed items.\n   */\n  splice(start, deleteCount, items) {\n    /** @type {number} */\n    const count = deleteCount || 0\n\n    this.setCursor(Math.trunc(start))\n    const removed = this.right.splice(\n      this.right.length - count,\n      Number.POSITIVE_INFINITY\n    )\n    if (items) chunkedPush(this.left, items)\n    return removed.reverse()\n  }\n\n  /**\n   * Remove and return the highest-numbered item in the array, so\n   * `list[list.length - 1]`;\n   * Moves the cursor to `length`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  pop() {\n    this.setCursor(Number.POSITIVE_INFINITY)\n    return this.left.pop()\n  }\n\n  /**\n   * Inserts a single item to the high-numbered side of the array;\n   * moves the cursor to `length`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  push(item) {\n    this.setCursor(Number.POSITIVE_INFINITY)\n    this.left.push(item)\n  }\n\n  /**\n   * Inserts many items to the high-numbered side of the array.\n   * Moves the cursor to `length`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  pushMany(items) {\n    this.setCursor(Number.POSITIVE_INFINITY)\n    chunkedPush(this.left, items)\n  }\n\n  /**\n   * Inserts a single item to the low-numbered side of the array;\n   * Moves the cursor to `0`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshift(item) {\n    this.setCursor(0)\n    this.right.push(item)\n  }\n\n  /**\n   * Inserts many items to the low-numbered side of the array;\n   * moves the cursor to `0`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshiftMany(items) {\n    this.setCursor(0)\n    chunkedPush(this.right, items.reverse())\n  }\n\n  /**\n   * Move the cursor to a specific position in the array. Requires\n   * time proportional to the distance moved.\n   *\n   * If `n < 0`, the cursor will end up at the beginning.\n   * If `n > length`, the cursor will end up at the end.\n   *\n   * @param {number} n\n   *   Position.\n   * @return {undefined}\n   *   Nothing.\n   */\n  setCursor(n) {\n    if (\n      n === this.left.length ||\n      (n > this.left.length && this.right.length === 0) ||\n      (n < 0 && this.left.length === 0)\n    )\n      return\n    if (n < this.left.length) {\n      // Move cursor to the this.left\n      const removed = this.left.splice(n, Number.POSITIVE_INFINITY)\n      chunkedPush(this.right, removed.reverse())\n    } else {\n      // Move cursor to the this.right\n      const removed = this.right.splice(\n        this.left.length + this.right.length - n,\n        Number.POSITIVE_INFINITY\n      )\n      chunkedPush(this.left, removed.reverse())\n    }\n  }\n}\n\n/**\n * Avoid stack overflow by pushing items onto the stack in segments\n *\n * @template T\n *   Item type.\n * @param {Array<T>} list\n *   List to inject into.\n * @param {ReadonlyArray<T>} right\n *   Items to inject.\n * @return {undefined}\n *   Nothing.\n */\nfunction chunkedPush(list, right) {\n  /** @type {number} */\n  let chunkStart = 0\n\n  if (right.length < constants.v8MaxSafeChunkSize) {\n    list.push(...right)\n  } else {\n    while (chunkStart < right.length) {\n      list.push(\n        ...right.slice(chunkStart, chunkStart + constants.v8MaxSafeChunkSize)\n      )\n      chunkStart += constants.v8MaxSafeChunkSize\n    }\n  }\n}\n","/**\n * @import {Chunk, Event, Token} from 'micromark-util-types'\n */\n\nimport {ok as assert} from 'devlop'\nimport {splice} from 'micromark-util-chunked'\nimport {codes, types} from 'micromark-util-symbol'\nimport {SpliceBuffer} from './lib/splice-buffer.js'\n\n// Hidden API exposed for testing.\nexport {SpliceBuffer} from './lib/splice-buffer.js'\n\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} eventsArray\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\n// eslint-disable-next-line complexity\nexport function subtokenize(eventsArray) {\n  /** @type {Record<string, number>} */\n  const jumps = {}\n  let index = -1\n  /** @type {Event} */\n  let event\n  /** @type {number | undefined} */\n  let lineIndex\n  /** @type {number} */\n  let otherIndex\n  /** @type {Event} */\n  let otherEvent\n  /** @type {Array<Event>} */\n  let parameters\n  /** @type {Array<Event>} */\n  let subevents\n  /** @type {boolean | undefined} */\n  let more\n  const events = new SpliceBuffer(eventsArray)\n\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index]\n    }\n\n    event = events.get(index)\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (\n      index &&\n      event[1].type === types.chunkFlow &&\n      events.get(index - 1)[1].type === types.listItemPrefix\n    ) {\n      assert(event[1]._tokenizer, 'expected `_tokenizer` on subtokens')\n      subevents = event[1]._tokenizer.events\n      otherIndex = 0\n\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === types.lineEndingBlank\n      ) {\n        otherIndex += 2\n      }\n\n      if (\n        otherIndex < subevents.length &&\n        subevents[otherIndex][1].type === types.content\n      ) {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === types.content) {\n            break\n          }\n\n          if (subevents[otherIndex][1].type === types.chunkText) {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true\n            otherIndex++\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index))\n        index = jumps[index]\n        more = true\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index\n      lineIndex = undefined\n\n      while (otherIndex--) {\n        otherEvent = events.get(otherIndex)\n\n        if (\n          otherEvent[1].type === types.lineEnding ||\n          otherEvent[1].type === types.lineEndingBlank\n        ) {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events.get(lineIndex)[1].type = types.lineEndingBlank\n            }\n\n            otherEvent[1].type = types.lineEnding\n            lineIndex = otherIndex\n          }\n        } else if (\n          otherEvent[1].type === types.linePrefix ||\n          otherEvent[1].type === types.listItemIndent\n        ) {\n          // Move past.\n        } else {\n          break\n        }\n      }\n\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = {...events.get(lineIndex)[1].start}\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index)\n        parameters.unshift(event)\n        events.splice(lineIndex, index - lineIndex + 1, parameters)\n      }\n    }\n  }\n\n  // The changes to the `events` buffer must be copied back into the eventsArray\n  splice(eventsArray, 0, Number.POSITIVE_INFINITY, events.slice(0))\n  return !more\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {SpliceBuffer<Event>} events\n *   Events.\n * @param {number} eventIndex\n *   Index.\n * @returns {Record<string, number>}\n *   Gaps.\n */\nfunction subcontent(events, eventIndex) {\n  const token = events.get(eventIndex)[1]\n  const context = events.get(eventIndex)[2]\n  let startPosition = eventIndex - 1\n  /** @type {Array<number>} */\n  const startPositions = []\n  assert(token.contentType, 'expected `contentType` on subtokens')\n\n  let tokenizer = token._tokenizer\n\n  if (!tokenizer) {\n    tokenizer = context.parser[token.contentType](token.start)\n\n    if (token._contentTypeTextTrailing) {\n      tokenizer._contentTypeTextTrailing = true\n    }\n  }\n\n  const childEvents = tokenizer.events\n  /** @type {Array<[number, number]>} */\n  const jumps = []\n  /** @type {Record<string, number>} */\n  const gaps = {}\n  /** @type {Array<Chunk>} */\n  let stream\n  /** @type {Token | undefined} */\n  let previous\n  let index = -1\n  /** @type {Token | undefined} */\n  let current = token\n  let adjust = 0\n  let start = 0\n  const breaks = [start]\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events.get(++startPosition)[1] !== current) {\n      // Empty.\n    }\n\n    assert(\n      !previous || current.previous === previous,\n      'expected previous to match'\n    )\n    assert(!previous || previous.next === current, 'expected next to match')\n\n    startPositions.push(startPosition)\n\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current)\n\n      if (!current.next) {\n        stream.push(codes.eof)\n      }\n\n      if (previous) {\n        tokenizer.defineSkip(current.start)\n      }\n\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true\n      }\n\n      tokenizer.write(stream)\n\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined\n      }\n    }\n\n    // Unravel the next token.\n    previous = current\n    current = current.next\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token\n\n  while (++index < childEvents.length) {\n    if (\n      // Find a void token that includes a break.\n      childEvents[index][0] === 'exit' &&\n      childEvents[index - 1][0] === 'enter' &&\n      childEvents[index][1].type === childEvents[index - 1][1].type &&\n      childEvents[index][1].start.line !== childEvents[index][1].end.line\n    ) {\n      assert(current, 'expected a current token')\n      start = index + 1\n      breaks.push(start)\n      // Help GC.\n      current._tokenizer = undefined\n      current.previous = undefined\n      current = current.next\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = []\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined\n    current.previous = undefined\n    assert(!current.next, 'expected no next token')\n  } else {\n    breaks.pop()\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length\n\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1])\n    const start = startPositions.pop()\n    assert(start !== undefined, 'expected a start position when splicing')\n    jumps.push([start, start + slice.length - 1])\n    events.splice(start, 2, slice)\n  }\n\n  jumps.reverse()\n  index = -1\n\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1]\n    adjust += jumps[index][1] - jumps[index][0] - 1\n  }\n\n  return gaps\n}\n","/**\n * @import {\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport {ok as assert} from 'devlop'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {subtokenize} from 'micromark-util-subtokenize'\nimport {codes, constants, types} from 'micromark-util-symbol'\n\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {resolve: resolveContent, tokenize: tokenizeContent}\n\n/** @type {Construct} */\nconst continuationConstruct = {partial: true, tokenize: tokenizeContinuation}\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events)\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous\n\n  return chunkStart\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    assert(\n      code !== codes.eof && !markdownLineEnding(code),\n      'expected no eof or eol'\n    )\n\n    effects.enter(types.content)\n    previous = effects.enter(types.chunkContent, {\n      contentType: constants.contentTypeContent\n    })\n    return chunkInside(code)\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === codes.eof) {\n      return contentEnd(code)\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(\n        continuationConstruct,\n        contentContinue,\n        contentEnd\n      )(code)\n    }\n\n    // Data.\n    effects.consume(code)\n    return chunkInside\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit(types.chunkContent)\n    effects.exit(types.content)\n    return ok(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    assert(markdownLineEnding(code), 'expected eol')\n    effects.consume(code)\n    effects.exit(types.chunkContent)\n    assert(previous, 'expected previous token')\n    previous.next = effects.enter(types.chunkContent, {\n      contentType: constants.contentTypeContent,\n      previous\n    })\n    previous = previous.next\n    return chunkInside\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this\n\n  return startLookahead\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    assert(markdownLineEnding(code), 'expected a line ending')\n    effects.exit(types.chunkContent)\n    effects.enter(types.lineEnding)\n    effects.consume(code)\n    effects.exit(types.lineEnding)\n    return factorySpace(effects, prefixed, types.linePrefix)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === codes.eof || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    // Always populated by defaults.\n    assert(\n      self.parser.constructs.disable.null,\n      'expected `disable.null` to be populated'\n    )\n\n    const tail = self.events[self.events.length - 1]\n\n    if (\n      !self.parser.constructs.disable.null.includes('codeIndented') &&\n      tail &&\n      tail[1].type === types.linePrefix &&\n      tail[2].sliceSerialize(tail[1], true).length >= constants.tabSize\n    ) {\n      return ok(code)\n    }\n\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)\n  }\n}\n","/**\n * @import {Effects, State, TokenType} from 'micromark-util-types'\n */\n\nimport {\n  asciiControl,\n  markdownLineEndingOrSpace,\n  markdownLineEnding\n} from 'micromark-util-character'\nimport {codes, constants, types} from 'micromark-util-symbol'\n\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factoryDestination(\n  effects,\n  ok,\n  nok,\n  type,\n  literalType,\n  literalMarkerType,\n  rawType,\n  stringType,\n  max\n) {\n  const limit = max || Number.POSITIVE_INFINITY\n  let balance = 0\n\n  return start\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === codes.lessThan) {\n      effects.enter(type)\n      effects.enter(literalType)\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      return enclosedBefore\n    }\n\n    // ASCII control, space, closing paren.\n    if (\n      code === codes.eof ||\n      code === codes.space ||\n      code === codes.rightParenthesis ||\n      asciiControl(code)\n    ) {\n      return nok(code)\n    }\n\n    effects.enter(type)\n    effects.enter(rawType)\n    effects.enter(stringType)\n    effects.enter(types.chunkString, {contentType: constants.contentTypeString})\n    return raw(code)\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === codes.greaterThan) {\n      effects.enter(literalMarkerType)\n      effects.consume(code)\n      effects.exit(literalMarkerType)\n      effects.exit(literalType)\n      effects.exit(type)\n      return ok\n    }\n\n    effects.enter(stringType)\n    effects.enter(types.chunkString, {contentType: constants.contentTypeString})\n    return enclosed(code)\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === codes.greaterThan) {\n      effects.exit(types.chunkString)\n      effects.exit(stringType)\n      return enclosedBefore(code)\n    }\n\n    if (\n      code === codes.eof ||\n      code === codes.lessThan ||\n      markdownLineEnding(code)\n    ) {\n      return nok(code)\n    }\n\n    effects.consume(code)\n    return code === codes.backslash ? enclosedEscape : enclosed\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (\n      code === codes.lessThan ||\n      code === codes.greaterThan ||\n      code === codes.backslash\n    ) {\n      effects.consume(code)\n      return enclosed\n    }\n\n    return enclosed(code)\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (\n      !balance &&\n      (code === codes.eof ||\n        code === codes.rightParenthesis ||\n        markdownLineEndingOrSpace(code))\n    ) {\n      effects.exit(types.chunkString)\n      effects.exit(stringType)\n      effects.exit(rawType)\n      effects.exit(type)\n      return ok(code)\n    }\n\n    if (balance < limit && code === codes.leftParenthesis) {\n      effects.consume(code)\n      balance++\n      return raw\n    }\n\n    if (code === codes.rightParenthesis) {\n      effects.consume(code)\n      balance--\n      return raw\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (\n      code === codes.eof ||\n      code === codes.space ||\n      code === codes.leftParenthesis ||\n      asciiControl(code)\n    ) {\n      return nok(code)\n    }\n\n    effects.consume(code)\n    return code === codes.backslash ? rawEscape : raw\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (\n      code === codes.leftParenthesis ||\n      code === codes.rightParenthesis ||\n      code === codes.backslash\n    ) {\n      effects.consume(code)\n      return raw\n    }\n\n    return raw(code)\n  }\n}\n","/**\n * @import {\n *   Effects,\n *   State,\n *   TokenizeContext,\n *   TokenType\n * } from 'micromark-util-types'\n */\n\nimport {ok as assert} from 'devlop'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\nimport {codes, constants, types} from 'micromark-util-symbol'\n\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this\n  let size = 0\n  /** @type {boolean} */\n  let seen\n\n  return start\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    assert(code === codes.leftSquareBracket, 'expected `[`')\n    effects.enter(type)\n    effects.enter(markerType)\n    effects.consume(code)\n    effects.exit(markerType)\n    effects.enter(stringType)\n    return atBreak\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (\n      size > constants.linkReferenceSizeMax ||\n      code === codes.eof ||\n      code === codes.leftSquareBracket ||\n      (code === codes.rightSquareBracket && !seen) ||\n      // To do: remove in the future once we’ve switched from\n      // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n      // which doesn’t need this.\n      // Hidden footnotes hook.\n      /* c8 ignore next 3 */\n      (code === codes.caret &&\n        !size &&\n        '_hiddenFootnoteSupport' in self.parser.constructs)\n    ) {\n      return nok(code)\n    }\n\n    if (code === codes.rightSquareBracket) {\n      effects.exit(stringType)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter(types.lineEnding)\n      effects.consume(code)\n      effects.exit(types.lineEnding)\n      return atBreak\n    }\n\n    effects.enter(types.chunkString, {contentType: constants.contentTypeString})\n    return labelInside(code)\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      code === codes.eof ||\n      code === codes.leftSquareBracket ||\n      code === codes.rightSquareBracket ||\n      markdownLineEnding(code) ||\n      size++ > constants.linkReferenceSizeMax\n    ) {\n      effects.exit(types.chunkString)\n      return atBreak(code)\n    }\n\n    effects.consume(code)\n    if (!seen) seen = !markdownSpace(code)\n    return code === codes.backslash ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (\n      code === codes.leftSquareBracket ||\n      code === codes.backslash ||\n      code === codes.rightSquareBracket\n    ) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n\n    return labelInside(code)\n  }\n}\n","/**\n * @import {\n *   Code,\n *   Effects,\n *   State,\n *   TokenType\n * } from 'micromark-util-types'\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {codes, constants, types} from 'micromark-util-symbol'\n\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker\n\n  return start\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (\n      code === codes.quotationMark ||\n      code === codes.apostrophe ||\n      code === codes.leftParenthesis\n    ) {\n      effects.enter(type)\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      marker = code === codes.leftParenthesis ? codes.rightParenthesis : code\n      return begin\n    }\n\n    return nok(code)\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType)\n      effects.consume(code)\n      effects.exit(markerType)\n      effects.exit(type)\n      return ok\n    }\n\n    effects.enter(stringType)\n    return atBreak(code)\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType)\n      return begin(marker)\n    }\n\n    if (code === codes.eof) {\n      return nok(code)\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter(types.lineEnding)\n      effects.consume(code)\n      effects.exit(types.lineEnding)\n      return factorySpace(effects, atBreak, types.linePrefix)\n    }\n\n    effects.enter(types.chunkString, {contentType: constants.contentTypeString})\n    return inside(code)\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === codes.eof || markdownLineEnding(code)) {\n      effects.exit(types.chunkString)\n      return atBreak(code)\n    }\n\n    effects.consume(code)\n    return code === codes.backslash ? escape : inside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === codes.backslash) {\n      effects.consume(code)\n      return inside\n    }\n\n    return inside(code)\n  }\n}\n","/**\n * @import {Effects, State} from 'micromark-util-types'\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\nimport {types} from 'micromark-util-symbol'\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns {State}\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen\n\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(types.lineEnding)\n      effects.consume(code)\n      effects.exit(types.lineEnding)\n      seen = true\n      return start\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(\n        effects,\n        start,\n        seen ? types.linePrefix : types.lineSuffix\n      )(code)\n    }\n\n    return ok(code)\n  }\n}\n","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport {ok as assert} from 'devlop'\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factorySpace} from 'micromark-factory-space'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {\n  markdownLineEndingOrSpace,\n  markdownLineEnding,\n  markdownSpace\n} from 'micromark-util-character'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {codes, types} from 'micromark-util-symbol'\n\n/** @type {Construct} */\nexport const definition = {name: 'definition', tokenize: tokenizeDefinition}\n\n/** @type {Construct} */\nconst titleBefore = {partial: true, tokenize: tokenizeTitleBefore}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this\n  /** @type {string} */\n  let identifier\n\n  return start\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter(types.definition)\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n    assert(code === codes.leftSquareBracket, 'expected `[`')\n    return factoryLabel.call(\n      self,\n      effects,\n      labelAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      types.definitionLabel,\n      types.definitionLabelMarker,\n      types.definitionLabelString\n    )(code)\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(\n      self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n    )\n\n    if (code === codes.colon) {\n      effects.enter(types.definitionMarker)\n      effects.consume(code)\n      effects.exit(types.definitionMarker)\n      return markerAfter\n    }\n\n    return nok(code)\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, destinationBefore)(code)\n      : destinationBefore(code)\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(\n      effects,\n      destinationAfter,\n      // Note: we don’t need to reset the way `markdown-rs` does.\n      nok,\n      types.definitionDestination,\n      types.definitionDestinationLiteral,\n      types.definitionDestinationLiteralMarker,\n      types.definitionDestinationRaw,\n      types.definitionDestinationString\n    )(code)\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code)\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code)\n      ? factorySpace(effects, afterWhitespace, types.whitespace)(code)\n      : afterWhitespace(code)\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === codes.eof || markdownLineEnding(code)) {\n      effects.exit(types.definition)\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier)\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, beforeMarker)(code)\n      : nok(code)\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(\n      effects,\n      titleAfter,\n      nok,\n      types.definitionTitle,\n      types.definitionTitleMarker,\n      types.definitionTitleString\n    )(code)\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code)\n      ? factorySpace(\n          effects,\n          titleAfterOptionalWhitespace,\n          types.whitespace\n        )(code)\n      : titleAfterOptionalWhitespace(code)\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === codes.eof || markdownLineEnding(code) ? ok(code) : nok(code)\n  }\n}\n","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport {ok as assert} from 'devlop'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {codes, types} from 'micromark-util-symbol'\n\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    assert(code === codes.backslash, 'expected `\\\\`')\n    effects.enter(types.hardBreakEscape)\n    effects.consume(code)\n    return after\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit(types.hardBreakEscape)\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @import {\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport {ok as assert} from 'devlop'\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  markdownLineEndingOrSpace,\n  markdownLineEnding,\n  markdownSpace\n} from 'micromark-util-character'\nimport {splice} from 'micromark-util-chunked'\nimport {codes, constants, types} from 'micromark-util-symbol'\n\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  resolve: resolveHeadingAtx,\n  tokenize: tokenizeHeadingAtx\n}\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2\n  let contentStart = 3\n  /** @type {Token} */\n  let content\n  /** @type {Token} */\n  let text\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === types.whitespace) {\n    contentStart += 2\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (\n    contentEnd - 2 > contentStart &&\n    events[contentEnd][1].type === types.whitespace\n  ) {\n    contentEnd -= 2\n  }\n\n  if (\n    events[contentEnd][1].type === types.atxHeadingSequence &&\n    (contentStart === contentEnd - 1 ||\n      (contentEnd - 4 > contentStart &&\n        events[contentEnd - 2][1].type === types.whitespace))\n  ) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4\n  }\n\n  if (contentEnd > contentStart) {\n    content = {\n      type: types.atxHeadingText,\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    }\n    text = {\n      type: types.chunkText,\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: constants.contentTypeText\n    }\n\n    splice(events, contentStart, contentEnd - contentStart + 1, [\n      ['enter', content, context],\n      ['enter', text, context],\n      ['exit', text, context],\n      ['exit', content, context]\n    ])\n  }\n\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0\n\n  return start\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter(types.atxHeading)\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    assert(code === codes.numberSign, 'expected `#`')\n    effects.enter(types.atxHeadingSequence)\n    return sequenceOpen(code)\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (\n      code === codes.numberSign &&\n      size++ < constants.atxHeadingOpeningFenceSizeMax\n    ) {\n      effects.consume(code)\n      return sequenceOpen\n    }\n\n    // Always at least one `#`.\n    if (code === codes.eof || markdownLineEndingOrSpace(code)) {\n      effects.exit(types.atxHeadingSequence)\n      return atBreak(code)\n    }\n\n    return nok(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === codes.numberSign) {\n      effects.enter(types.atxHeadingSequence)\n      return sequenceFurther(code)\n    }\n\n    if (code === codes.eof || markdownLineEnding(code)) {\n      effects.exit(types.atxHeading)\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code)\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, types.whitespace)(code)\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter(types.atxHeadingText)\n    return data(code)\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === codes.numberSign) {\n      effects.consume(code)\n      return sequenceFurther\n    }\n\n    effects.exit(types.atxHeadingSequence)\n    return atBreak(code)\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (\n      code === codes.eof ||\n      code === codes.numberSign ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      effects.exit(types.atxHeadingText)\n      return atBreak(code)\n    }\n\n    effects.consume(code)\n    return data\n  }\n}\n","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @import {\n *   Code,\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport {ok as assert} from 'devlop'\nimport {\n  asciiAlphanumeric,\n  asciiAlpha,\n  markdownLineEndingOrSpace,\n  markdownLineEnding,\n  markdownSpace\n} from 'micromark-util-character'\nimport {htmlBlockNames, htmlRawNames} from 'micromark-util-html-tag-name'\nimport {codes, constants, types} from 'micromark-util-symbol'\nimport {blankLine} from './blank-line.js'\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  concrete: true,\n  name: 'htmlFlow',\n  resolveTo: resolveToHtmlFlow,\n  tokenize: tokenizeHtmlFlow\n}\n\n/** @type {Construct} */\nconst blankLineBefore = {partial: true, tokenize: tokenizeBlankLineBefore}\nconst nonLazyContinuationStart = {\n  partial: true,\n  tokenize: tokenizeNonLazyContinuationStart\n}\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length\n\n  while (index--) {\n    if (\n      events[index][0] === 'enter' &&\n      events[index][1].type === types.htmlFlow\n    ) {\n      break\n    }\n  }\n\n  if (index > 1 && events[index - 2][1].type === types.linePrefix) {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start\n    // Remove the line prefix.\n    events.splice(index - 2, 2)\n  }\n\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this\n  /** @type {number} */\n  let marker\n  /** @type {boolean} */\n  let closingTag\n  /** @type {string} */\n  let buffer\n  /** @type {number} */\n  let index\n  /** @type {Code} */\n  let markerB\n\n  return start\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    assert(code === codes.lessThan, 'expected `<`')\n    effects.enter(types.htmlFlow)\n    effects.enter(types.htmlFlowData)\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === codes.exclamationMark) {\n      effects.consume(code)\n      return declarationOpen\n    }\n\n    if (code === codes.slash) {\n      effects.consume(code)\n      closingTag = true\n      return tagCloseStart\n    }\n\n    if (code === codes.questionMark) {\n      effects.consume(code)\n      marker = constants.htmlInstruction\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      assert(code !== null) // Always the case.\n      effects.consume(code)\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === codes.dash) {\n      effects.consume(code)\n      marker = constants.htmlComment\n      return commentOpenInside\n    }\n\n    if (code === codes.leftSquareBracket) {\n      effects.consume(code)\n      marker = constants.htmlCdata\n      index = 0\n      return cdataOpenInside\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      marker = constants.htmlDeclaration\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    return nok(code)\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === codes.dash) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside\n    }\n\n    return nok(code)\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = constants.cdataOpeningString\n\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation\n      }\n\n      return cdataOpenInside\n    }\n\n    return nok(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      assert(code !== null) // Always the case.\n      effects.consume(code)\n      buffer = String.fromCharCode(code)\n      return tagName\n    }\n\n    return nok(code)\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (\n      code === codes.eof ||\n      code === codes.slash ||\n      code === codes.greaterThan ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      const slash = code === codes.slash\n      const name = buffer.toLowerCase()\n\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = constants.htmlRaw\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = constants.htmlBasic\n\n        if (slash) {\n          effects.consume(code)\n          return basicSelfClosing\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code)\n      }\n\n      marker = constants.htmlComplete\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line]\n        ? nok(code)\n        : closingTag\n          ? completeClosingTagAfter(code)\n          : completeAttributeNameBefore(code)\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === codes.dash || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return tagName\n    }\n\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === codes.greaterThan) {\n      effects.consume(code)\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation\n    }\n\n    return nok(code)\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeClosingTagAfter\n    }\n\n    return completeEnd(code)\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === codes.slash) {\n      effects.consume(code)\n      return completeEnd\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === codes.colon || code === codes.underscore || asciiAlpha(code)) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameBefore\n    }\n\n    return completeEnd(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (\n      code === codes.dash ||\n      code === codes.dot ||\n      code === codes.colon ||\n      code === codes.underscore ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return completeAttributeName\n    }\n\n    return completeAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === codes.equalsTo) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeNameAfter\n    }\n\n    return completeAttributeNameBefore(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (\n      code === codes.eof ||\n      code === codes.lessThan ||\n      code === codes.equalsTo ||\n      code === codes.greaterThan ||\n      code === codes.graveAccent\n    ) {\n      return nok(code)\n    }\n\n    if (code === codes.quotationMark || code === codes.apostrophe) {\n      effects.consume(code)\n      markerB = code\n      return completeAttributeValueQuoted\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAttributeValueBefore\n    }\n\n    return completeAttributeValueUnquoted(code)\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code)\n      markerB = null\n      return completeAttributeValueQuotedAfter\n    }\n\n    if (code === codes.eof || markdownLineEnding(code)) {\n      return nok(code)\n    }\n\n    effects.consume(code)\n    return completeAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (\n      code === codes.eof ||\n      code === codes.quotationMark ||\n      code === codes.apostrophe ||\n      code === codes.slash ||\n      code === codes.lessThan ||\n      code === codes.equalsTo ||\n      code === codes.greaterThan ||\n      code === codes.graveAccent ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return completeAttributeNameAfter(code)\n    }\n\n    effects.consume(code)\n    return completeAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (\n      code === codes.slash ||\n      code === codes.greaterThan ||\n      markdownSpace(code)\n    ) {\n      return completeAttributeNameBefore(code)\n    }\n\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === codes.greaterThan) {\n      effects.consume(code)\n      return completeAfter\n    }\n\n    return nok(code)\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === codes.eof || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return completeAfter\n    }\n\n    return nok(code)\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === codes.dash && marker === constants.htmlComment) {\n      effects.consume(code)\n      return continuationCommentInside\n    }\n\n    if (code === codes.lessThan && marker === constants.htmlRaw) {\n      effects.consume(code)\n      return continuationRawTagOpen\n    }\n\n    if (code === codes.greaterThan && marker === constants.htmlDeclaration) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    if (code === codes.questionMark && marker === constants.htmlInstruction) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    if (code === codes.rightSquareBracket && marker === constants.htmlCdata) {\n      effects.consume(code)\n      return continuationCdataInside\n    }\n\n    if (\n      markdownLineEnding(code) &&\n      (marker === constants.htmlBasic || marker === constants.htmlComplete)\n    ) {\n      effects.exit(types.htmlFlowData)\n      return effects.check(\n        blankLineBefore,\n        continuationAfter,\n        continuationStart\n      )(code)\n    }\n\n    if (code === codes.eof || markdownLineEnding(code)) {\n      effects.exit(types.htmlFlowData)\n      return continuationStart(code)\n    }\n\n    effects.consume(code)\n    return continuation\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(\n      nonLazyContinuationStart,\n      continuationStartNonLazy,\n      continuationAfter\n    )(code)\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    assert(markdownLineEnding(code))\n    effects.enter(types.lineEnding)\n    effects.consume(code)\n    effects.exit(types.lineEnding)\n    return continuationBefore\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === codes.eof || markdownLineEnding(code)) {\n      return continuationStart(code)\n    }\n\n    effects.enter(types.htmlFlowData)\n    return continuation(code)\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === codes.dash) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === codes.slash) {\n      effects.consume(code)\n      buffer = ''\n      return continuationRawEndTag\n    }\n\n    return continuation(code)\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === codes.greaterThan) {\n      const name = buffer.toLowerCase()\n\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code)\n        return continuationClose\n      }\n\n      return continuation(code)\n    }\n\n    if (asciiAlpha(code) && buffer.length < constants.htmlRawSizeMax) {\n      assert(code !== null) // Always the case.\n      effects.consume(code)\n      buffer += String.fromCharCode(code)\n      return continuationRawEndTag\n    }\n\n    return continuation(code)\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === codes.rightSquareBracket) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === codes.greaterThan) {\n      effects.consume(code)\n      return continuationClose\n    }\n\n    // More dashes.\n    if (code === codes.dash && marker === constants.htmlComment) {\n      effects.consume(code)\n      return continuationDeclarationInside\n    }\n\n    return continuation(code)\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === codes.eof || markdownLineEnding(code)) {\n      effects.exit(types.htmlFlowData)\n      return continuationAfter(code)\n    }\n\n    effects.consume(code)\n    return continuationClose\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit(types.htmlFlow)\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this\n\n  return start\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(types.lineEnding)\n      effects.consume(code)\n      effects.exit(types.lineEnding)\n      return after\n    }\n\n    return nok(code)\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    assert(markdownLineEnding(code), 'expected a line ending')\n    effects.enter(types.lineEnding)\n    effects.consume(code)\n    effects.exit(types.lineEnding)\n    return effects.attempt(blankLine, ok, nok)\n  }\n}\n","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport {ok as assert} from 'devlop'\nimport {factorySpace} from 'micromark-factory-space'\nimport {\n  asciiAlphanumeric,\n  asciiAlpha,\n  markdownLineEndingOrSpace,\n  markdownLineEnding,\n  markdownSpace\n} from 'micromark-util-character'\nimport {codes, constants, types} from 'micromark-util-symbol'\n\n/** @type {Construct} */\nexport const htmlText = {name: 'htmlText', tokenize: tokenizeHtmlText}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code> | undefined} */\n  let marker\n  /** @type {number} */\n  let index\n  /** @type {State} */\n  let returnState\n\n  return start\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    assert(code === codes.lessThan, 'expected `<`')\n    effects.enter(types.htmlText)\n    effects.enter(types.htmlTextData)\n    effects.consume(code)\n    return open\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === codes.exclamationMark) {\n      effects.consume(code)\n      return declarationOpen\n    }\n\n    if (code === codes.slash) {\n      effects.consume(code)\n      return tagCloseStart\n    }\n\n    if (code === codes.questionMark) {\n      effects.consume(code)\n      return instruction\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n\n    return nok(code)\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === codes.dash) {\n      effects.consume(code)\n      return commentOpenInside\n    }\n\n    if (code === codes.leftSquareBracket) {\n      effects.consume(code)\n      index = 0\n      return cdataOpenInside\n    }\n\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return declaration\n    }\n\n    return nok(code)\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === codes.dash) {\n      effects.consume(code)\n      return commentEnd\n    }\n\n    return nok(code)\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === codes.eof) {\n      return nok(code)\n    }\n\n    if (code === codes.dash) {\n      effects.consume(code)\n      return commentClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = comment\n      return lineEndingBefore(code)\n    }\n\n    effects.consume(code)\n    return comment\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === codes.dash) {\n      effects.consume(code)\n      return commentEnd\n    }\n\n    return comment(code)\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === codes.greaterThan\n      ? end(code)\n      : code === codes.dash\n        ? commentClose(code)\n        : comment(code)\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = constants.cdataOpeningString\n\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code)\n      return index === value.length ? cdata : cdataOpenInside\n    }\n\n    return nok(code)\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === codes.eof) {\n      return nok(code)\n    }\n\n    if (code === codes.rightSquareBracket) {\n      effects.consume(code)\n      return cdataClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = cdata\n      return lineEndingBefore(code)\n    }\n\n    effects.consume(code)\n    return cdata\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === codes.rightSquareBracket) {\n      effects.consume(code)\n      return cdataEnd\n    }\n\n    return cdata(code)\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === codes.greaterThan) {\n      return end(code)\n    }\n\n    if (code === codes.rightSquareBracket) {\n      effects.consume(code)\n      return cdataEnd\n    }\n\n    return cdata(code)\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === codes.eof || code === codes.greaterThan) {\n      return end(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = declaration\n      return lineEndingBefore(code)\n    }\n\n    effects.consume(code)\n    return declaration\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === codes.eof) {\n      return nok(code)\n    }\n\n    if (code === codes.questionMark) {\n      effects.consume(code)\n      return instructionClose\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = instruction\n      return lineEndingBefore(code)\n    }\n\n    effects.consume(code)\n    return instruction\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === codes.greaterThan ? end(code) : instruction(code)\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n\n    return nok(code)\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === codes.dash || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagClose\n    }\n\n    return tagCloseBetween(code)\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween\n      return lineEndingBefore(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagCloseBetween\n    }\n\n    return end(code)\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === codes.dash || asciiAlphanumeric(code)) {\n      effects.consume(code)\n      return tagOpen\n    }\n\n    if (\n      code === codes.slash ||\n      code === codes.greaterThan ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return tagOpenBetween(code)\n    }\n\n    return nok(code)\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === codes.slash) {\n      effects.consume(code)\n      return end\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === codes.colon || code === codes.underscore || asciiAlpha(code)) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween\n      return lineEndingBefore(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenBetween\n    }\n\n    return end(code)\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (\n      code === codes.dash ||\n      code === codes.dot ||\n      code === codes.colon ||\n      code === codes.underscore ||\n      asciiAlphanumeric(code)\n    ) {\n      effects.consume(code)\n      return tagOpenAttributeName\n    }\n\n    return tagOpenAttributeNameAfter(code)\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === codes.equalsTo) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter\n      return lineEndingBefore(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeNameAfter\n    }\n\n    return tagOpenBetween(code)\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (\n      code === codes.eof ||\n      code === codes.lessThan ||\n      code === codes.equalsTo ||\n      code === codes.greaterThan ||\n      code === codes.graveAccent\n    ) {\n      return nok(code)\n    }\n\n    if (code === codes.quotationMark || code === codes.apostrophe) {\n      effects.consume(code)\n      marker = code\n      return tagOpenAttributeValueQuoted\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore\n      return lineEndingBefore(code)\n    }\n\n    if (markdownSpace(code)) {\n      effects.consume(code)\n      return tagOpenAttributeValueBefore\n    }\n\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code)\n      marker = undefined\n      return tagOpenAttributeValueQuotedAfter\n    }\n\n    if (code === codes.eof) {\n      return nok(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted\n      return lineEndingBefore(code)\n    }\n\n    effects.consume(code)\n    return tagOpenAttributeValueQuoted\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (\n      code === codes.eof ||\n      code === codes.quotationMark ||\n      code === codes.apostrophe ||\n      code === codes.lessThan ||\n      code === codes.equalsTo ||\n      code === codes.graveAccent\n    ) {\n      return nok(code)\n    }\n\n    if (\n      code === codes.slash ||\n      code === codes.greaterThan ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return tagOpenBetween(code)\n    }\n\n    effects.consume(code)\n    return tagOpenAttributeValueUnquoted\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (\n      code === codes.slash ||\n      code === codes.greaterThan ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return tagOpenBetween(code)\n    }\n\n    return nok(code)\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === codes.greaterThan) {\n      effects.consume(code)\n      effects.exit(types.htmlTextData)\n      effects.exit(types.htmlText)\n      return ok\n    }\n\n    return nok(code)\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    assert(returnState, 'expected return state')\n    assert(markdownLineEnding(code), 'expected eol')\n    effects.exit(types.htmlTextData)\n    effects.enter(types.lineEnding)\n    effects.consume(code)\n    effects.exit(types.lineEnding)\n    return lineEndingAfter\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n    assert(\n      self.parser.constructs.disable.null,\n      'expected `disable.null` to be populated'\n    )\n    return markdownSpace(code)\n      ? factorySpace(\n          effects,\n          lineEndingAfterPrefix,\n          types.linePrefix,\n          self.parser.constructs.disable.null.includes('codeIndented')\n            ? undefined\n            : constants.tabSize\n        )(code)\n      : lineEndingAfterPrefix(code)\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter(types.htmlTextData)\n    return returnState(code)\n  }\n}\n","/**\n * @import {\n *   Construct,\n *   Event,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport {ok as assert} from 'devlop'\nimport {factoryDestination} from 'micromark-factory-destination'\nimport {factoryLabel} from 'micromark-factory-label'\nimport {factoryTitle} from 'micromark-factory-title'\nimport {factoryWhitespace} from 'micromark-factory-whitespace'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {resolveAll} from 'micromark-util-resolve-all'\nimport {codes, constants, types} from 'micromark-util-symbol'\n\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  resolveAll: resolveAllLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  tokenize: tokenizeLabelEnd\n}\n\n/** @type {Construct} */\nconst resourceConstruct = {tokenize: tokenizeResource}\n/** @type {Construct} */\nconst referenceFullConstruct = {tokenize: tokenizeReferenceFull}\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {tokenize: tokenizeReferenceCollapsed}\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1\n  /** @type {Array<Event>} */\n  const newEvents = []\n  while (++index < events.length) {\n    const token = events[index][1]\n    newEvents.push(events[index])\n\n    if (\n      token.type === types.labelImage ||\n      token.type === types.labelLink ||\n      token.type === types.labelEnd\n    ) {\n      // Remove the marker.\n      const offset = token.type === types.labelImage ? 4 : 2\n      token.type = types.data\n      index += offset\n    }\n  }\n\n  // If the events are equal, we don't have to copy newEvents to events\n  if (events.length !== newEvents.length) {\n    splice(events, 0, events.length, newEvents)\n  }\n\n  return events\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length\n  let offset = 0\n  /** @type {Token} */\n  let token\n  /** @type {number | undefined} */\n  let open\n  /** @type {number | undefined} */\n  let close\n  /** @type {Array<Event>} */\n  let media\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1]\n\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (\n        token.type === types.link ||\n        (token.type === types.labelLink && token._inactive)\n      ) {\n        break\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === types.labelLink) {\n        token._inactive = true\n      }\n    } else if (close) {\n      if (\n        events[index][0] === 'enter' &&\n        (token.type === types.labelImage || token.type === types.labelLink) &&\n        !token._balanced\n      ) {\n        open = index\n\n        if (token.type !== types.labelLink) {\n          offset = 2\n          break\n        }\n      }\n    } else if (token.type === types.labelEnd) {\n      close = index\n    }\n  }\n\n  assert(open !== undefined, '`open` is supposed to be found')\n  assert(close !== undefined, '`close` is supposed to be found')\n\n  const group = {\n    type: events[open][1].type === types.labelLink ? types.link : types.image,\n    start: {...events[open][1].start},\n    end: {...events[events.length - 1][1].end}\n  }\n\n  const label = {\n    type: types.label,\n    start: {...events[open][1].start},\n    end: {...events[close][1].end}\n  }\n\n  const text = {\n    type: types.labelText,\n    start: {...events[open + offset + 2][1].end},\n    end: {...events[close - 2][1].start}\n  }\n\n  media = [\n    ['enter', group, context],\n    ['enter', label, context]\n  ]\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3))\n\n  // Text open.\n  media = push(media, [['enter', text, context]])\n\n  // Always populated by defaults.\n  assert(\n    context.parser.constructs.insideSpan.null,\n    'expected `insideSpan.null` to be populated'\n  )\n  // Between.\n  media = push(\n    media,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(open + offset + 4, close - 3),\n      context\n    )\n  )\n\n  // Text close, marker close, label close.\n  media = push(media, [\n    ['exit', text, context],\n    events[close - 2],\n    events[close - 1],\n    ['exit', label, context]\n  ])\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1))\n\n  // Media close.\n  media = push(media, [['exit', group, context]])\n\n  splice(events, open, events.length, media)\n\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Token} */\n  let labelStart\n  /** @type {boolean} */\n  let defined\n\n  // Find an opening.\n  while (index--) {\n    if (\n      (self.events[index][1].type === types.labelImage ||\n        self.events[index][1].type === types.labelLink) &&\n      !self.events[index][1]._balanced\n    ) {\n      labelStart = self.events[index][1]\n      break\n    }\n  }\n\n  return start\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    assert(code === codes.rightSquareBracket, 'expected `]`')\n\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code)\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code)\n    }\n\n    defined = self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize({start: labelStart.end, end: self.now()})\n      )\n    )\n    effects.enter(types.labelEnd)\n    effects.enter(types.labelMarker)\n    effects.consume(code)\n    effects.exit(types.labelMarker)\n    effects.exit(types.labelEnd)\n    return after\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === codes.leftParenthesis) {\n      return effects.attempt(\n        resourceConstruct,\n        labelEndOk,\n        defined ? labelEndOk : labelEndNok\n      )(code)\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === codes.leftSquareBracket) {\n      return effects.attempt(\n        referenceFullConstruct,\n        labelEndOk,\n        defined ? referenceNotFull : labelEndNok\n      )(code)\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code)\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(\n      referenceCollapsedConstruct,\n      labelEndOk,\n      labelEndNok\n    )(code)\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code)\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    assert(code === codes.leftParenthesis, 'expected left paren')\n    effects.enter(types.resource)\n    effects.enter(types.resourceMarker)\n    effects.consume(code)\n    effects.exit(types.resourceMarker)\n    return resourceBefore\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceOpen)(code)\n      : resourceOpen(code)\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === codes.rightParenthesis) {\n      return resourceEnd(code)\n    }\n\n    return factoryDestination(\n      effects,\n      resourceDestinationAfter,\n      resourceDestinationMissing,\n      types.resourceDestination,\n      types.resourceDestinationLiteral,\n      types.resourceDestinationLiteralMarker,\n      types.resourceDestinationRaw,\n      types.resourceDestinationString,\n      constants.linkResourceDestinationBalanceMax\n    )(code)\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceBetween)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code)\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (\n      code === codes.quotationMark ||\n      code === codes.apostrophe ||\n      code === codes.leftParenthesis\n    ) {\n      return factoryTitle(\n        effects,\n        resourceTitleAfter,\n        nok,\n        types.resourceTitle,\n        types.resourceTitleMarker,\n        types.resourceTitleString\n      )(code)\n    }\n\n    return resourceEnd(code)\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code)\n      ? factoryWhitespace(effects, resourceEnd)(code)\n      : resourceEnd(code)\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === codes.rightParenthesis) {\n      effects.enter(types.resourceMarker)\n      effects.consume(code)\n      effects.exit(types.resourceMarker)\n      effects.exit(types.resource)\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this\n\n  return referenceFull\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    assert(code === codes.leftSquareBracket, 'expected left bracket')\n    return factoryLabel.call(\n      self,\n      effects,\n      referenceFullAfter,\n      referenceFullMissing,\n      types.reference,\n      types.referenceMarker,\n      types.referenceString\n    )(code)\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(\n      normalizeIdentifier(\n        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)\n      )\n    )\n      ? ok(code)\n      : nok(code)\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n    assert(code === codes.leftSquareBracket, 'expected left bracket')\n    effects.enter(types.reference)\n    effects.enter(types.referenceMarker)\n    effects.consume(code)\n    effects.exit(types.referenceMarker)\n    return referenceCollapsedOpen\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === codes.rightSquareBracket) {\n      effects.enter(types.referenceMarker)\n      effects.consume(code)\n      effects.exit(types.referenceMarker)\n      effects.exit(types.reference)\n      return ok\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport {ok as assert} from 'devlop'\nimport {codes, types} from 'micromark-util-symbol'\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  resolveAll: labelEnd.resolveAll,\n  tokenize: tokenizeLabelStartImage\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this\n\n  return start\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    assert(code === codes.exclamationMark, 'expected `!`')\n    effects.enter(types.labelImage)\n    effects.enter(types.labelImageMarker)\n    effects.consume(code)\n    effects.exit(types.labelImageMarker)\n    return open\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === codes.leftSquareBracket) {\n      effects.enter(types.labelMarker)\n      effects.consume(code)\n      effects.exit(types.labelMarker)\n      effects.exit(types.labelImage)\n      return after\n    }\n\n    return nok(code)\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === codes.caret &&\n      '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport {ok as assert} from 'devlop'\nimport {codes, types} from 'micromark-util-symbol'\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  resolveAll: labelEnd.resolveAll,\n  tokenize: tokenizeLabelStartLink\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n\n  return start\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    assert(code === codes.leftSquareBracket, 'expected `[`')\n    effects.enter(types.labelLink)\n    effects.enter(types.labelMarker)\n    effects.consume(code)\n    effects.exit(types.labelMarker)\n    effects.exit(types.labelLink)\n    return after\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === codes.caret &&\n      '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport {ok as assert} from 'devlop'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {types} from 'micromark-util-symbol'\n\n/** @type {Construct} */\nexport const lineEnding = {name: 'lineEnding', tokenize: tokenizeLineEnding}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    assert(markdownLineEnding(code), 'expected eol')\n    effects.enter(types.lineEnding)\n    effects.consume(code)\n    effects.exit(types.lineEnding)\n    return factorySpace(effects, ok, types.linePrefix)\n  }\n}\n","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport {ok as assert} from 'devlop'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\nimport {codes, constants, types} from 'micromark-util-symbol'\n\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n\n  return start\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(types.thematicBreak)\n    // To do: parse indent like `markdown-rs`.\n    return before(code)\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    assert(\n      code === codes.asterisk ||\n        code === codes.dash ||\n        code === codes.underscore,\n      'expected `*`, `-`, or `_`'\n    )\n    marker = code\n    return atBreak(code)\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter(types.thematicBreakSequence)\n      return sequence(code)\n    }\n\n    if (\n      size >= constants.thematicBreakMarkerCountMin &&\n      (code === codes.eof || markdownLineEnding(code))\n    ) {\n      effects.exit(types.thematicBreak)\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n\n    effects.exit(types.thematicBreakSequence)\n    return markdownSpace(code)\n      ? factorySpace(effects, atBreak, types.whitespace)(code)\n      : atBreak(code)\n  }\n}\n","/**\n * @import {\n *   Code,\n *   Construct,\n *   Exiter,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport {ok as assert} from 'devlop'\nimport {factorySpace} from 'micromark-factory-space'\nimport {asciiDigit, markdownSpace} from 'micromark-util-character'\nimport {codes, constants, types} from 'micromark-util-symbol'\nimport {blankLine} from './blank-line.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/** @type {Construct} */\nexport const list = {\n  continuation: {tokenize: tokenizeListContinuation},\n  exit: tokenizeListEnd,\n  name: 'list',\n  tokenize: tokenizeListStart\n}\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  partial: true,\n  tokenize: tokenizeListItemPrefixWhitespace\n}\n\n/** @type {Construct} */\nconst indentConstruct = {partial: true, tokenize: tokenizeIndent}\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this\n  const tail = self.events[self.events.length - 1]\n  let initialSize =\n    tail && tail[1].type === types.linePrefix\n      ? tail[2].sliceSerialize(tail[1], true).length\n      : 0\n  let size = 0\n\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    assert(self.containerState, 'expected state')\n    const kind =\n      self.containerState.type ||\n      (code === codes.asterisk || code === codes.plusSign || code === codes.dash\n        ? types.listUnordered\n        : types.listOrdered)\n\n    if (\n      kind === types.listUnordered\n        ? !self.containerState.marker || code === self.containerState.marker\n        : asciiDigit(code)\n    ) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind\n        effects.enter(kind, {_container: true})\n      }\n\n      if (kind === types.listUnordered) {\n        effects.enter(types.listItemPrefix)\n        return code === codes.asterisk || code === codes.dash\n          ? effects.check(thematicBreak, nok, atMarker)(code)\n          : atMarker(code)\n      }\n\n      if (!self.interrupt || code === codes.digit1) {\n        effects.enter(types.listItemPrefix)\n        effects.enter(types.listItemValue)\n        return inside(code)\n      }\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    assert(self.containerState, 'expected state')\n    if (asciiDigit(code) && ++size < constants.listItemValueSizeMax) {\n      effects.consume(code)\n      return inside\n    }\n\n    if (\n      (!self.interrupt || size < 2) &&\n      (self.containerState.marker\n        ? code === self.containerState.marker\n        : code === codes.rightParenthesis || code === codes.dot)\n    ) {\n      effects.exit(types.listItemValue)\n      return atMarker(code)\n    }\n\n    return nok(code)\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    assert(self.containerState, 'expected state')\n    assert(code !== codes.eof, 'eof (`null`) is not a marker')\n    effects.enter(types.listItemMarker)\n    effects.consume(code)\n    effects.exit(types.listItemMarker)\n    self.containerState.marker = self.containerState.marker || code\n    return effects.check(\n      blankLine,\n      // Can’t be empty when interrupting.\n      self.interrupt ? nok : onBlank,\n      effects.attempt(\n        listItemPrefixWhitespaceConstruct,\n        endOfPrefix,\n        otherPrefix\n      )\n    )\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    assert(self.containerState, 'expected state')\n    self.containerState.initialBlankLine = true\n    initialSize++\n    return endOfPrefix(code)\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter(types.listItemPrefixWhitespace)\n      effects.consume(code)\n      effects.exit(types.listItemPrefixWhitespace)\n      return endOfPrefix\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    assert(self.containerState, 'expected state')\n    self.containerState.size =\n      initialSize +\n      self.sliceSerialize(effects.exit(types.listItemPrefix), true).length\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this\n\n  assert(self.containerState, 'expected state')\n  self.containerState._closeFlow = undefined\n\n  return effects.check(blankLine, onBlank, notBlank)\n\n  /** @type {State} */\n  function onBlank(code) {\n    assert(self.containerState, 'expected state')\n    assert(typeof self.containerState.size === 'number', 'expected size')\n    self.containerState.furtherBlankLines =\n      self.containerState.furtherBlankLines ||\n      self.containerState.initialBlankLine\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(\n      effects,\n      ok,\n      types.listItemIndent,\n      self.containerState.size + 1\n    )(code)\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    assert(self.containerState, 'expected state')\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined\n      self.containerState.initialBlankLine = undefined\n      return notInCurrentItem(code)\n    }\n\n    self.containerState.furtherBlankLines = undefined\n    self.containerState.initialBlankLine = undefined\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    assert(self.containerState, 'expected state')\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined\n    // Always populated by defaults.\n    assert(\n      self.parser.constructs.disable.null,\n      'expected `disable.null` to be populated'\n    )\n    return factorySpace(\n      effects,\n      effects.attempt(list, ok, nok),\n      types.linePrefix,\n      self.parser.constructs.disable.null.includes('codeIndented')\n        ? undefined\n        : constants.tabSize\n    )(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n\n  assert(self.containerState, 'expected state')\n  assert(typeof self.containerState.size === 'number', 'expected size')\n\n  return factorySpace(\n    effects,\n    afterPrefix,\n    types.listItemIndent,\n    self.containerState.size + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    assert(self.containerState, 'expected state')\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === types.listItemIndent &&\n      tail[2].sliceSerialize(tail[1], true).length === self.containerState.size\n      ? ok(code)\n      : nok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Exiter}\n */\nfunction tokenizeListEnd(effects) {\n  assert(this.containerState, 'expected state')\n  assert(typeof this.containerState.type === 'string', 'expected type')\n  effects.exit(this.containerState.type)\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this\n\n  // Always populated by defaults.\n  assert(\n    self.parser.constructs.disable.null,\n    'expected `disable.null` to be populated'\n  )\n\n  return factorySpace(\n    effects,\n    afterPrefix,\n    types.listItemPrefixWhitespace,\n    self.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : constants.tabSize + 1\n  )\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n\n    return !markdownSpace(code) &&\n      tail &&\n      tail[1].type === types.listItemPrefixWhitespace\n      ? ok(code)\n      : nok(code)\n  }\n}\n","/**\n * @import {\n *   Code,\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport {ok as assert} from 'devlop'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\nimport {codes, types} from 'micromark-util-symbol'\n\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  resolveTo: resolveToSetextUnderline,\n  tokenize: tokenizeSetextUnderline\n}\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length\n  /** @type {number | undefined} */\n  let content\n  /** @type {number | undefined} */\n  let text\n  /** @type {number | undefined} */\n  let definition\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === types.content) {\n        content = index\n        break\n      }\n\n      if (events[index][1].type === types.paragraph) {\n        text = index\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === types.content) {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1)\n      }\n\n      if (!definition && events[index][1].type === types.definition) {\n        definition = index\n      }\n    }\n  }\n\n  assert(text !== undefined, 'expected a `text` index to be found')\n  assert(content !== undefined, 'expected a `text` index to be found')\n  assert(events[content][2] === context, 'enter context should be same')\n  assert(\n    events[events.length - 1][2] === context,\n    'enter context should be same'\n  )\n  const heading = {\n    type: types.setextHeading,\n    start: {...events[content][1].start},\n    end: {...events[events.length - 1][1].end}\n  }\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = types.setextHeadingText\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context])\n    events.splice(definition + 1, 0, ['exit', events[content][1], context])\n    events[content][1].end = {...events[definition][1].end}\n  } else {\n    events[content][1] = heading\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context])\n\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this\n  /** @type {NonNullable<Code>} */\n  let marker\n\n  return start\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length\n    /** @type {boolean | undefined} */\n    let paragraph\n\n    assert(\n      code === codes.dash || code === codes.equalsTo,\n      'expected `=` or `-`'\n    )\n\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (\n        self.events[index][1].type !== types.lineEnding &&\n        self.events[index][1].type !== types.linePrefix &&\n        self.events[index][1].type !== types.content\n      ) {\n        paragraph = self.events[index][1].type === types.paragraph\n        break\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter(types.setextHeadingLine)\n      marker = code\n      return before(code)\n    }\n\n    return nok(code)\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(types.setextHeadingLineSequence)\n    return inside(code)\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code)\n      return inside\n    }\n\n    effects.exit(types.setextHeadingLineSequence)\n\n    return markdownSpace(code)\n      ? factorySpace(effects, after, types.lineSuffix)(code)\n      : after(code)\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === codes.eof || markdownLineEnding(code)) {\n      effects.exit(types.setextHeadingLine)\n      return ok(code)\n    }\n\n    return nok(code)\n  }\n}\n","/**\n * @import {\n *   InitialConstruct,\n *   Initializer,\n *   State,\n *   TokenizeContext\n * } from 'micromark-util-types'\n */\n\nimport {ok as assert} from 'devlop'\nimport {blankLine, content} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {codes, types} from 'micromark-util-symbol'\n\n/** @type {InitialConstruct} */\nexport const flow = {tokenize: initializeFlow}\n\n/**\n * @this {TokenizeContext}\n *   Self.\n * @type {Initializer}\n *   Initializer.\n */\nfunction initializeFlow(effects) {\n  const self = this\n  const initial = effects.attempt(\n    // Try to parse a blank line.\n    blankLine,\n    atBlankEnding,\n    // Try to parse initial flow (essentially, only code).\n    effects.attempt(\n      this.parser.constructs.flowInitial,\n      afterConstruct,\n      factorySpace(\n        effects,\n        effects.attempt(\n          this.parser.constructs.flow,\n          afterConstruct,\n          effects.attempt(content, afterConstruct)\n        ),\n        types.linePrefix\n      )\n    )\n  )\n\n  return initial\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    assert(\n      code === codes.eof || markdownLineEnding(code),\n      'expected eol or eof'\n    )\n\n    if (code === codes.eof) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter(types.lineEndingBlank)\n    effects.consume(code)\n    effects.exit(types.lineEndingBlank)\n    self.currentConstruct = undefined\n    return initial\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    assert(\n      code === codes.eof || markdownLineEnding(code),\n      'expected eol or eof'\n    )\n\n    if (code === codes.eof) {\n      effects.consume(code)\n      return\n    }\n\n    effects.enter(types.lineEnding)\n    effects.consume(code)\n    effects.exit(types.lineEnding)\n    self.currentConstruct = undefined\n    return initial\n  }\n}\n","/**\n * @import {\n *   Code,\n *   InitialConstruct,\n *   Initializer,\n *   Resolver,\n *   State,\n *   TokenizeContext\n * } from 'micromark-util-types'\n */\n\nimport {ok as assert} from 'devlop'\nimport {codes, constants, types} from 'micromark-util-symbol'\n\nexport const resolver = {resolveAll: createResolver()}\nexport const string = initializeFactory('string')\nexport const text = initializeFactory('text')\n\n/**\n * @param {'string' | 'text'} field\n *   Field.\n * @returns {InitialConstruct}\n *   Construct.\n */\nfunction initializeFactory(field) {\n  return {\n    resolveAll: createResolver(\n      field === 'text' ? resolveAllLineSuffixes : undefined\n    ),\n    tokenize: initializeText\n  }\n\n  /**\n   * @this {TokenizeContext}\n   *   Context.\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this\n    const constructs = this.parser.constructs[field]\n    const text = effects.attempt(constructs, start, notText)\n\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code)\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === codes.eof) {\n        effects.consume(code)\n        return\n      }\n\n      effects.enter(types.data)\n      effects.consume(code)\n      return data\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit(types.data)\n        return text(code)\n      }\n\n      // Data.\n      effects.consume(code)\n      return data\n    }\n\n    /**\n     * @param {Code} code\n     *   Code.\n     * @returns {boolean}\n     *   Whether the code is a break.\n     */\n    function atBreak(code) {\n      if (code === codes.eof) {\n        return true\n      }\n\n      const list = constructs[code]\n      let index = -1\n\n      if (list) {\n        // Always populated by defaults.\n        assert(Array.isArray(list), 'expected `disable.null` to be populated')\n\n        while (++index < list.length) {\n          const item = list[index]\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true\n          }\n        }\n      }\n\n      return false\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n *   Resolver.\n * @returns {Resolver}\n *   Resolver.\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1\n    /** @type {number | undefined} */\n    let enter\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === types.data) {\n          enter = index\n          index++\n        }\n      } else if (!events[index] || events[index][1].type !== types.data) {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end\n          events.splice(enter + 2, index - enter - 2)\n          index = enter + 2\n        }\n\n        enter = undefined\n      }\n    }\n\n    return extraResolver ? extraResolver(events, context) : events\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0 // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if (\n      (eventIndex === events.length ||\n        events[eventIndex][1].type === types.lineEnding) &&\n      events[eventIndex - 1][1].type === types.data\n    ) {\n      const data = events[eventIndex - 1][1]\n      const chunks = context.sliceStream(data)\n      let index = chunks.length\n      let bufferIndex = -1\n      let size = 0\n      /** @type {boolean | undefined} */\n      let tabs\n\n      while (index--) {\n        const chunk = chunks[index]\n\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length\n\n          while (chunk.charCodeAt(bufferIndex - 1) === codes.space) {\n            size++\n            bufferIndex--\n          }\n\n          if (bufferIndex) break\n          bufferIndex = -1\n        }\n        // Number\n        else if (chunk === codes.horizontalTab) {\n          tabs = true\n          size++\n        } else if (chunk === codes.virtualSpace) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++\n          break\n        }\n      }\n\n      // Allow final trailing whitespace.\n      if (context._contentTypeTextTrailing && eventIndex === events.length) {\n        size = 0\n      }\n\n      if (size) {\n        const token = {\n          type:\n            eventIndex === events.length ||\n            tabs ||\n            size < constants.hardBreakPrefixSizeMin\n              ? types.lineSuffix\n              : types.hardBreakTrailing,\n          start: {\n            _bufferIndex: index\n              ? bufferIndex\n              : data.start._bufferIndex + bufferIndex,\n            _index: data.start._index + index,\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size\n          },\n          end: {...data.end}\n        }\n\n        data.end = {...token.start}\n\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token)\n        } else {\n          events.splice(\n            eventIndex,\n            0,\n            ['enter', token, context],\n            ['exit', token, context]\n          )\n          eventIndex += 2\n        }\n      }\n\n      eventIndex++\n    }\n  }\n\n  return events\n}\n","/**\n * @import {Extension} from 'micromark-util-types'\n */\n\nimport {\n  attention,\n  autolink,\n  blockQuote,\n  characterEscape,\n  characterReference,\n  codeFenced,\n  codeIndented,\n  codeText,\n  definition,\n  hardBreakEscape,\n  headingAtx,\n  htmlFlow,\n  htmlText,\n  labelEnd,\n  labelStartImage,\n  labelStartLink,\n  lineEnding,\n  list,\n  setextUnderline,\n  thematicBreak\n} from 'micromark-core-commonmark'\nimport {codes} from 'micromark-util-symbol'\nimport {resolver as resolveText} from './initialize/text.js'\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [codes.asterisk]: list,\n  [codes.plusSign]: list,\n  [codes.dash]: list,\n  [codes.digit0]: list,\n  [codes.digit1]: list,\n  [codes.digit2]: list,\n  [codes.digit3]: list,\n  [codes.digit4]: list,\n  [codes.digit5]: list,\n  [codes.digit6]: list,\n  [codes.digit7]: list,\n  [codes.digit8]: list,\n  [codes.digit9]: list,\n  [codes.greaterThan]: blockQuote\n}\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [codes.leftSquareBracket]: definition\n}\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [codes.horizontalTab]: codeIndented,\n  [codes.virtualSpace]: codeIndented,\n  [codes.space]: codeIndented\n}\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [codes.numberSign]: headingAtx,\n  [codes.asterisk]: thematicBreak,\n  [codes.dash]: [setextUnderline, thematicBreak],\n  [codes.lessThan]: htmlFlow,\n  [codes.equalsTo]: setextUnderline,\n  [codes.underscore]: thematicBreak,\n  [codes.graveAccent]: codeFenced,\n  [codes.tilde]: codeFenced\n}\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [codes.ampersand]: characterReference,\n  [codes.backslash]: characterEscape\n}\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [codes.carriageReturn]: lineEnding,\n  [codes.lineFeed]: lineEnding,\n  [codes.carriageReturnLineFeed]: lineEnding,\n  [codes.exclamationMark]: labelStartImage,\n  [codes.ampersand]: characterReference,\n  [codes.asterisk]: attention,\n  [codes.lessThan]: [autolink, htmlText],\n  [codes.leftSquareBracket]: labelStartLink,\n  [codes.backslash]: [hardBreakEscape, characterEscape],\n  [codes.rightSquareBracket]: labelEnd,\n  [codes.underscore]: attention,\n  [codes.graveAccent]: codeText\n}\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {null: [attention, resolveText]}\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {null: [codes.asterisk, codes.underscore]}\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {null: []}\n","/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function (val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isFinite(val)) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n","\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n */\n\nfunction setup(env) {\n\tcreateDebug.debug = createDebug;\n\tcreateDebug.default = createDebug;\n\tcreateDebug.coerce = coerce;\n\tcreateDebug.disable = disable;\n\tcreateDebug.enable = enable;\n\tcreateDebug.enabled = enabled;\n\tcreateDebug.humanize = require('ms');\n\tcreateDebug.destroy = destroy;\n\n\tObject.keys(env).forEach(key => {\n\t\tcreateDebug[key] = env[key];\n\t});\n\n\t/**\n\t* The currently active debug mode names, and names to skip.\n\t*/\n\n\tcreateDebug.names = [];\n\tcreateDebug.skips = [];\n\n\t/**\n\t* Map of special \"%n\" handling functions, for the debug \"format\" argument.\n\t*\n\t* Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n\t*/\n\tcreateDebug.formatters = {};\n\n\t/**\n\t* Selects a color for a debug namespace\n\t* @param {String} namespace The namespace string for the debug instance to be colored\n\t* @return {Number|String} An ANSI color code for the given namespace\n\t* @api private\n\t*/\n\tfunction selectColor(namespace) {\n\t\tlet hash = 0;\n\n\t\tfor (let i = 0; i < namespace.length; i++) {\n\t\t\thash = ((hash << 5) - hash) + namespace.charCodeAt(i);\n\t\t\thash |= 0; // Convert to 32bit integer\n\t\t}\n\n\t\treturn createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n\t}\n\tcreateDebug.selectColor = selectColor;\n\n\t/**\n\t* Create a debugger with the given `namespace`.\n\t*\n\t* @param {String} namespace\n\t* @return {Function}\n\t* @api public\n\t*/\n\tfunction createDebug(namespace) {\n\t\tlet prevTime;\n\t\tlet enableOverride = null;\n\t\tlet namespacesCache;\n\t\tlet enabledCache;\n\n\t\tfunction debug(...args) {\n\t\t\t// Disabled?\n\t\t\tif (!debug.enabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst self = debug;\n\n\t\t\t// Set `diff` timestamp\n\t\t\tconst curr = Number(new Date());\n\t\t\tconst ms = curr - (prevTime || curr);\n\t\t\tself.diff = ms;\n\t\t\tself.prev = prevTime;\n\t\t\tself.curr = curr;\n\t\t\tprevTime = curr;\n\n\t\t\targs[0] = createDebug.coerce(args[0]);\n\n\t\t\tif (typeof args[0] !== 'string') {\n\t\t\t\t// Anything else let's inspect with %O\n\t\t\t\targs.unshift('%O');\n\t\t\t}\n\n\t\t\t// Apply any `formatters` transformations\n\t\t\tlet index = 0;\n\t\t\targs[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {\n\t\t\t\t// If we encounter an escaped % then don't increase the array index\n\t\t\t\tif (match === '%%') {\n\t\t\t\t\treturn '%';\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t\tconst formatter = createDebug.formatters[format];\n\t\t\t\tif (typeof formatter === 'function') {\n\t\t\t\t\tconst val = args[index];\n\t\t\t\t\tmatch = formatter.call(self, val);\n\n\t\t\t\t\t// Now we need to remove `args[index]` since it's inlined in the `format`\n\t\t\t\t\targs.splice(index, 1);\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\t\t\t\treturn match;\n\t\t\t});\n\n\t\t\t// Apply env-specific formatting (colors, etc.)\n\t\t\tcreateDebug.formatArgs.call(self, args);\n\n\t\t\tconst logFn = self.log || createDebug.log;\n\t\t\tlogFn.apply(self, args);\n\t\t}\n\n\t\tdebug.namespace = namespace;\n\t\tdebug.useColors = createDebug.useColors();\n\t\tdebug.color = createDebug.selectColor(namespace);\n\t\tdebug.extend = extend;\n\t\tdebug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.\n\n\t\tObject.defineProperty(debug, 'enabled', {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: false,\n\t\t\tget: () => {\n\t\t\t\tif (enableOverride !== null) {\n\t\t\t\t\treturn enableOverride;\n\t\t\t\t}\n\t\t\t\tif (namespacesCache !== createDebug.namespaces) {\n\t\t\t\t\tnamespacesCache = createDebug.namespaces;\n\t\t\t\t\tenabledCache = createDebug.enabled(namespace);\n\t\t\t\t}\n\n\t\t\t\treturn enabledCache;\n\t\t\t},\n\t\t\tset: v => {\n\t\t\t\tenableOverride = v;\n\t\t\t}\n\t\t});\n\n\t\t// Env-specific initialization logic for debug instances\n\t\tif (typeof createDebug.init === 'function') {\n\t\t\tcreateDebug.init(debug);\n\t\t}\n\n\t\treturn debug;\n\t}\n\n\tfunction extend(namespace, delimiter) {\n\t\tconst newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n\t\tnewDebug.log = this.log;\n\t\treturn newDebug;\n\t}\n\n\t/**\n\t* Enables a debug mode by namespaces. This can include modes\n\t* separated by a colon and wildcards.\n\t*\n\t* @param {String} namespaces\n\t* @api public\n\t*/\n\tfunction enable(namespaces) {\n\t\tcreateDebug.save(namespaces);\n\t\tcreateDebug.namespaces = namespaces;\n\n\t\tcreateDebug.names = [];\n\t\tcreateDebug.skips = [];\n\n\t\tconst split = (typeof namespaces === 'string' ? namespaces : '')\n\t\t\t.trim()\n\t\t\t.replace(/\\s+/g, ',')\n\t\t\t.split(',')\n\t\t\t.filter(Boolean);\n\n\t\tfor (const ns of split) {\n\t\t\tif (ns[0] === '-') {\n\t\t\t\tcreateDebug.skips.push(ns.slice(1));\n\t\t\t} else {\n\t\t\t\tcreateDebug.names.push(ns);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Checks if the given string matches a namespace template, honoring\n\t * asterisks as wildcards.\n\t *\n\t * @param {String} search\n\t * @param {String} template\n\t * @return {Boolean}\n\t */\n\tfunction matchesTemplate(search, template) {\n\t\tlet searchIndex = 0;\n\t\tlet templateIndex = 0;\n\t\tlet starIndex = -1;\n\t\tlet matchIndex = 0;\n\n\t\twhile (searchIndex < search.length) {\n\t\t\tif (templateIndex < template.length && (template[templateIndex] === search[searchIndex] || template[templateIndex] === '*')) {\n\t\t\t\t// Match character or proceed with wildcard\n\t\t\t\tif (template[templateIndex] === '*') {\n\t\t\t\t\tstarIndex = templateIndex;\n\t\t\t\t\tmatchIndex = searchIndex;\n\t\t\t\t\ttemplateIndex++; // Skip the '*'\n\t\t\t\t} else {\n\t\t\t\t\tsearchIndex++;\n\t\t\t\t\ttemplateIndex++;\n\t\t\t\t}\n\t\t\t} else if (starIndex !== -1) { // eslint-disable-line no-negated-condition\n\t\t\t\t// Backtrack to the last '*' and try to match more characters\n\t\t\t\ttemplateIndex = starIndex + 1;\n\t\t\t\tmatchIndex++;\n\t\t\t\tsearchIndex = matchIndex;\n\t\t\t} else {\n\t\t\t\treturn false; // No match\n\t\t\t}\n\t\t}\n\n\t\t// Handle trailing '*' in template\n\t\twhile (templateIndex < template.length && template[templateIndex] === '*') {\n\t\t\ttemplateIndex++;\n\t\t}\n\n\t\treturn templateIndex === template.length;\n\t}\n\n\t/**\n\t* Disable debug output.\n\t*\n\t* @return {String} namespaces\n\t* @api public\n\t*/\n\tfunction disable() {\n\t\tconst namespaces = [\n\t\t\t...createDebug.names,\n\t\t\t...createDebug.skips.map(namespace => '-' + namespace)\n\t\t].join(',');\n\t\tcreateDebug.enable('');\n\t\treturn namespaces;\n\t}\n\n\t/**\n\t* Returns true if the given mode name is enabled, false otherwise.\n\t*\n\t* @param {String} name\n\t* @return {Boolean}\n\t* @api public\n\t*/\n\tfunction enabled(name) {\n\t\tfor (const skip of createDebug.skips) {\n\t\t\tif (matchesTemplate(name, skip)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tfor (const ns of createDebug.names) {\n\t\t\tif (matchesTemplate(name, ns)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t* Coerce `val`.\n\t*\n\t* @param {Mixed} val\n\t* @return {Mixed}\n\t* @api private\n\t*/\n\tfunction coerce(val) {\n\t\tif (val instanceof Error) {\n\t\t\treturn val.stack || val.message;\n\t\t}\n\t\treturn val;\n\t}\n\n\t/**\n\t* XXX DO NOT USE. This is a temporary stub function.\n\t* XXX It WILL be removed in the next major release.\n\t*/\n\tfunction destroy() {\n\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t}\n\n\tcreateDebug.enable(createDebug.load());\n\n\treturn createDebug;\n}\n\nmodule.exports = setup;\n","/* eslint-env browser */\n\n/**\n * This is the web browser implementation of `debug()`.\n */\n\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = localstorage();\nexports.destroy = (() => {\n\tlet warned = false;\n\n\treturn () => {\n\t\tif (!warned) {\n\t\t\twarned = true;\n\t\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t\t}\n\t};\n})();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n\t'#0000CC',\n\t'#0000FF',\n\t'#0033CC',\n\t'#0033FF',\n\t'#0066CC',\n\t'#0066FF',\n\t'#0099CC',\n\t'#0099FF',\n\t'#00CC00',\n\t'#00CC33',\n\t'#00CC66',\n\t'#00CC99',\n\t'#00CCCC',\n\t'#00CCFF',\n\t'#3300CC',\n\t'#3300FF',\n\t'#3333CC',\n\t'#3333FF',\n\t'#3366CC',\n\t'#3366FF',\n\t'#3399CC',\n\t'#3399FF',\n\t'#33CC00',\n\t'#33CC33',\n\t'#33CC66',\n\t'#33CC99',\n\t'#33CCCC',\n\t'#33CCFF',\n\t'#6600CC',\n\t'#6600FF',\n\t'#6633CC',\n\t'#6633FF',\n\t'#66CC00',\n\t'#66CC33',\n\t'#9900CC',\n\t'#9900FF',\n\t'#9933CC',\n\t'#9933FF',\n\t'#99CC00',\n\t'#99CC33',\n\t'#CC0000',\n\t'#CC0033',\n\t'#CC0066',\n\t'#CC0099',\n\t'#CC00CC',\n\t'#CC00FF',\n\t'#CC3300',\n\t'#CC3333',\n\t'#CC3366',\n\t'#CC3399',\n\t'#CC33CC',\n\t'#CC33FF',\n\t'#CC6600',\n\t'#CC6633',\n\t'#CC9900',\n\t'#CC9933',\n\t'#CCCC00',\n\t'#CCCC33',\n\t'#FF0000',\n\t'#FF0033',\n\t'#FF0066',\n\t'#FF0099',\n\t'#FF00CC',\n\t'#FF00FF',\n\t'#FF3300',\n\t'#FF3333',\n\t'#FF3366',\n\t'#FF3399',\n\t'#FF33CC',\n\t'#FF33FF',\n\t'#FF6600',\n\t'#FF6633',\n\t'#FF9900',\n\t'#FF9933',\n\t'#FFCC00',\n\t'#FFCC33'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\n// eslint-disable-next-line complexity\nfunction useColors() {\n\t// NB: In an Electron preload script, document will be defined but not fully\n\t// initialized. Since we know we're in Chrome, we'll just detect this case\n\t// explicitly\n\tif (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {\n\t\treturn true;\n\t}\n\n\t// Internet Explorer and Edge do not support colors.\n\tif (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n\t\treturn false;\n\t}\n\n\tlet m;\n\n\t// Is webkit? http://stackoverflow.com/a/16459606/376773\n\t// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n\t// eslint-disable-next-line no-return-assign\n\treturn (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n\t\t// Is firebug? http://stackoverflow.com/a/398120/376773\n\t\t(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n\t\t// Is firefox >= v31?\n\t\t// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && (m = navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/)) && parseInt(m[1], 10) >= 31) ||\n\t\t// Double check webkit in userAgent just in case we are in a worker\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\targs[0] = (this.useColors ? '%c' : '') +\n\t\tthis.namespace +\n\t\t(this.useColors ? ' %c' : ' ') +\n\t\targs[0] +\n\t\t(this.useColors ? '%c ' : ' ') +\n\t\t'+' + module.exports.humanize(this.diff);\n\n\tif (!this.useColors) {\n\t\treturn;\n\t}\n\n\tconst c = 'color: ' + this.color;\n\targs.splice(1, 0, c, 'color: inherit');\n\n\t// The final \"%c\" is somewhat tricky, because there could be other\n\t// arguments passed either before or after the %c, so we need to\n\t// figure out the correct index to insert the CSS into\n\tlet index = 0;\n\tlet lastC = 0;\n\targs[0].replace(/%[a-zA-Z%]/g, match => {\n\t\tif (match === '%%') {\n\t\t\treturn;\n\t\t}\n\t\tindex++;\n\t\tif (match === '%c') {\n\t\t\t// We only are interested in the *last* %c\n\t\t\t// (the user may have provided their own)\n\t\t\tlastC = index;\n\t\t}\n\t});\n\n\targs.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.debug()` when available.\n * No-op when `console.debug` is not a \"function\".\n * If `console.debug` is not available, falls back\n * to `console.log`.\n *\n * @api public\n */\nexports.log = console.debug || console.log || (() => {});\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\ttry {\n\t\tif (namespaces) {\n\t\t\texports.storage.setItem('debug', namespaces);\n\t\t} else {\n\t\t\texports.storage.removeItem('debug');\n\t\t}\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\nfunction load() {\n\tlet r;\n\ttry {\n\t\tr = exports.storage.getItem('debug') || exports.storage.getItem('DEBUG') ;\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n\n\t// If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\tif (!r && typeof process !== 'undefined' && 'env' in process) {\n\t\tr = process.env.DEBUG;\n\t}\n\n\treturn r;\n}\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n\ttry {\n\t\t// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\n\t\t// The Browser also has localStorage in the global context.\n\t\treturn localStorage;\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\nmodule.exports = require('./common')(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nformatters.j = function (v) {\n\ttry {\n\t\treturn JSON.stringify(v);\n\t} catch (error) {\n\t\treturn '[UnexpectedJSONParseError]: ' + error.message;\n\t}\n};\n","/**\n * @import {\n *   Chunk,\n *   Code,\n *   ConstructRecord,\n *   Construct,\n *   Effects,\n *   InitialConstruct,\n *   ParseContext,\n *   Point,\n *   State,\n *   TokenizeContext,\n *   Token\n * } from 'micromark-util-types'\n */\n\n/**\n * @callback Restore\n *   Restore the state.\n * @returns {undefined}\n *   Nothing.\n *\n * @typedef Info\n *   Info.\n * @property {Restore} restore\n *   Restore.\n * @property {number} from\n *   From.\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n *   Construct.\n * @param {Info} info\n *   Info.\n * @returns {undefined}\n *   Nothing.\n */\n\nimport createDebug from 'debug'\nimport {ok as assert} from 'devlop'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {push, splice} from 'micromark-util-chunked'\nimport {resolveAll} from 'micromark-util-resolve-all'\nimport {codes, values} from 'micromark-util-symbol'\n\nconst debug = createDebug('micromark')\n\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n *   Parser.\n * @param {InitialConstruct} initialize\n *   Construct.\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n *   Point (optional).\n * @returns {TokenizeContext}\n *   Context.\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = {\n    _bufferIndex: -1,\n    _index: 0,\n    line: (from && from.line) || 1,\n    column: (from && from.column) || 1,\n    offset: (from && from.offset) || 0\n  }\n  /** @type {Record<string, number>} */\n  const columnStart = {}\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = []\n  /** @type {Array<Chunk>} */\n  let chunks = []\n  /** @type {Array<Token>} */\n  let stack = []\n  /** @type {boolean | undefined} */\n  let consumed = true\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    consume,\n    enter,\n    exit,\n    interrupt: constructFactory(onsuccessfulcheck, {interrupt: true})\n  }\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    code: codes.eof,\n    containerState: {},\n    defineSkip,\n    events: [],\n    now,\n    parser,\n    previous: codes.eof,\n    sliceSerialize,\n    sliceStream,\n    write\n  }\n\n  /**\n   * The state function.\n   *\n   * @type {State | undefined}\n   */\n  let state = initialize.tokenize.call(context, effects)\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode\n\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize)\n  }\n\n  return context\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice)\n\n    main()\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== codes.eof) {\n      return []\n    }\n\n    addResult(initialize, 0)\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context)\n\n    return context.events\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs)\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token)\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {_bufferIndex, _index, line, column, offset} = point\n    return {_bufferIndex, _index, line, column, offset}\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column\n    accountForPotentialSkip()\n    debug('position: define skip: `%j`', point)\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex\n\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index]\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index\n\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0\n        }\n\n        while (\n          point._index === chunkIndex &&\n          point._bufferIndex < chunk.length\n        ) {\n          go(chunk.charCodeAt(point._bufferIndex))\n        }\n      } else {\n        go(chunk)\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   *   Code.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function go(code) {\n    assert(consumed === true, 'expected character to be consumed')\n    consumed = undefined\n    debug('main: passing `%s` to %s', code, state && state.name)\n    expectedCode = code\n    assert(typeof state === 'function', 'expected state')\n    state = state(code)\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    assert(code === expectedCode, 'expected given code to equal expected code')\n\n    debug('consume: `%s`', code)\n\n    assert(\n      consumed === undefined,\n      'expected code to not have been consumed: this might be because `return x(code)` instead of `return x` was used'\n    )\n    assert(\n      code === null\n        ? context.events.length === 0 ||\n            context.events[context.events.length - 1][0] === 'exit'\n        : context.events[context.events.length - 1][0] === 'enter',\n      'expected last token to be open'\n    )\n\n    if (markdownLineEnding(code)) {\n      point.line++\n      point.column = 1\n      point.offset += code === codes.carriageReturnLineFeed ? 2 : 1\n      accountForPotentialSkip()\n      debug('position: after eol: `%j`', point)\n    } else if (code !== codes.virtualSpace) {\n      point.column++\n      point.offset++\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++\n    } else {\n      point._bufferIndex++\n\n      // At end of string chunk.\n      if (\n        point._bufferIndex ===\n        // Points w/ non-negative `_bufferIndex` reference\n        // strings.\n        /** @type {string} */ (chunks[point._index]).length\n      ) {\n        point._bufferIndex = -1\n        point._index++\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code\n\n    // Mark as consumed.\n    consumed = true\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {}\n    token.type = type\n    token.start = now()\n\n    assert(typeof type === 'string', 'expected string type')\n    assert(type.length > 0, 'expected non-empty string')\n    debug('enter: `%s`', type)\n\n    context.events.push(['enter', token, context])\n\n    stack.push(token)\n\n    return token\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    assert(typeof type === 'string', 'expected string type')\n    assert(type.length > 0, 'expected non-empty string')\n\n    const token = stack.pop()\n    assert(token, 'cannot close w/o open tokens')\n    token.end = now()\n\n    assert(type === token.type, 'expected exit token to match current token')\n\n    assert(\n      !(\n        token.start._index === token.end._index &&\n        token.start._bufferIndex === token.end._bufferIndex\n      ),\n      'expected non-empty token (`' + type + '`)'\n    )\n\n    debug('exit: `%s`', token.type)\n    context.events.push(['exit', token, context])\n\n    return token\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from)\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore()\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   *   Callback.\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   *   Fields.\n   */\n  function constructFactory(onreturn, fields) {\n    return hook\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | ConstructRecord | Construct} constructs\n     *   Constructs.\n     * @param {State} returnState\n     *   State.\n     * @param {State | undefined} [bogusState]\n     *   State.\n     * @returns {State}\n     *   State.\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {ReadonlyArray<Construct>} */\n      let listOfConstructs\n      /** @type {number} */\n      let constructIndex\n      /** @type {Construct} */\n      let currentConstruct\n      /** @type {Info} */\n      let info\n\n      return Array.isArray(constructs)\n        ? /* c8 ignore next 1 */\n          handleListOfConstructs(constructs)\n        : 'tokenize' in constructs\n          ? // Looks like a construct.\n            handleListOfConstructs([/** @type {Construct} */ (constructs)])\n          : handleMapOfConstructs(constructs)\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       *   Constructs.\n       * @returns {State}\n       *   State.\n       */\n      function handleMapOfConstructs(map) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          const left = code !== null && map[code]\n          const all = code !== null && map.null\n          const list = [\n            // To do: add more extension tests.\n            /* c8 ignore next 2 */\n            ...(Array.isArray(left) ? left : left ? [left] : []),\n            ...(Array.isArray(all) ? all : all ? [all] : [])\n          ]\n\n          return handleListOfConstructs(list)(code)\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ReadonlyArray<Construct>} list\n       *   Constructs.\n       * @returns {State}\n       *   State.\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list\n        constructIndex = 0\n\n        if (list.length === 0) {\n          assert(bogusState, 'expected `bogusState` to be given')\n          return bogusState\n        }\n\n        return handleConstruct(list[constructIndex])\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       *   Construct.\n       * @returns {State}\n       *   State.\n       */\n      function handleConstruct(construct) {\n        return start\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store()\n          currentConstruct = construct\n\n          if (!construct.partial) {\n            context.currentConstruct = construct\n          }\n\n          // Always populated by defaults.\n          assert(\n            context.parser.constructs.disable.null,\n            'expected `disable.null` to be populated'\n          )\n\n          if (\n            construct.name &&\n            context.parser.constructs.disable.null.includes(construct.name)\n          ) {\n            return nok(code)\n          }\n\n          return construct.tokenize.call(\n            // If we do have fields, create an object w/ `context` as its\n            // prototype.\n            // This allows a “live binding”, which is needed for `interrupt`.\n            fields ? Object.assign(Object.create(context), fields) : context,\n            effects,\n            ok,\n            nok\n          )(code)\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        assert(code === expectedCode, 'expected code')\n        consumed = true\n        onreturn(currentConstruct, info)\n        return returnState\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        assert(code === expectedCode, 'expected code')\n        consumed = true\n        info.restore()\n\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex])\n        }\n\n        return bogusState\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   *   Construct.\n   * @param {number} from\n   *   From.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct)\n    }\n\n    if (construct.resolve) {\n      splice(\n        context.events,\n        from,\n        context.events.length - from,\n        construct.resolve(context.events.slice(from), context)\n      )\n    }\n\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context)\n    }\n\n    assert(\n      construct.partial ||\n        context.events.length === 0 ||\n        context.events[context.events.length - 1][0] === 'exit',\n      'expected last token to end'\n    )\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   *   Info.\n   */\n  function store() {\n    const startPoint = now()\n    const startPrevious = context.previous\n    const startCurrentConstruct = context.currentConstruct\n    const startEventsIndex = context.events.length\n    const startStack = Array.from(stack)\n\n    return {from: startEventsIndex, restore}\n\n    /**\n     * Restore state.\n     *\n     * @returns {undefined}\n     *   Nothing.\n     */\n    function restore() {\n      point = startPoint\n      context.previous = startPrevious\n      context.currentConstruct = startCurrentConstruct\n      context.events.length = startEventsIndex\n      stack = startStack\n      accountForPotentialSkip()\n      debug('position: restore: `%j`', point)\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line]\n      point.offset += columnStart[point.line] - 1\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {ReadonlyArray<Chunk>} chunks\n *   Chunks.\n * @param {Pick<Token, 'end' | 'start'>} token\n *   Token.\n * @returns {Array<Chunk>}\n *   Chunks.\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index\n  const startBufferIndex = token.start._bufferIndex\n  const endIndex = token.end._index\n  const endBufferIndex = token.end._bufferIndex\n  /** @type {Array<Chunk>} */\n  let view\n\n  if (startIndex === endIndex) {\n    assert(endBufferIndex > -1, 'expected non-negative end buffer index')\n    assert(startBufferIndex > -1, 'expected non-negative start buffer index')\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)]\n  } else {\n    view = chunks.slice(startIndex, endIndex)\n\n    if (startBufferIndex > -1) {\n      const head = view[0]\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex)\n        /* c8 ignore next 4 -- used to be used, no longer */\n      } else {\n        assert(startBufferIndex === 0, 'expected `startBufferIndex` to be `0`')\n        view.shift()\n      }\n    }\n\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex))\n    }\n  }\n\n  return view\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {ReadonlyArray<Chunk>} chunks\n *   Chunks.\n * @param {boolean | undefined} [expandTabs=false]\n *   Whether to expand tabs (default: `false`).\n * @returns {string}\n *   Result.\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {boolean | undefined} */\n  let atTab\n\n  while (++index < chunks.length) {\n    const chunk = chunks[index]\n    /** @type {string} */\n    let value\n\n    if (typeof chunk === 'string') {\n      value = chunk\n    } else\n      switch (chunk) {\n        case codes.carriageReturn: {\n          value = values.cr\n\n          break\n        }\n\n        case codes.lineFeed: {\n          value = values.lf\n\n          break\n        }\n\n        case codes.carriageReturnLineFeed: {\n          value = values.cr + values.lf\n\n          break\n        }\n\n        case codes.horizontalTab: {\n          value = expandTabs ? values.space : values.ht\n\n          break\n        }\n\n        case codes.virtualSpace: {\n          if (!expandTabs && atTab) continue\n          value = values.space\n\n          break\n        }\n\n        default: {\n          assert(typeof chunk === 'number', 'expected number')\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk)\n        }\n      }\n\n    atTab = chunk === codes.horizontalTab\n    result.push(value)\n  }\n\n  return result.join('')\n}\n","/**\n * @import {\n *   Create,\n *   FullNormalizedExtension,\n *   InitialConstruct,\n *   ParseContext,\n *   ParseOptions\n * } from 'micromark-util-types'\n */\n\nimport {combineExtensions} from 'micromark-util-combine-extensions'\nimport {content} from './initialize/content.js'\nimport {document} from './initialize/document.js'\nimport {flow} from './initialize/flow.js'\nimport {string, text} from './initialize/text.js'\nimport * as defaultConstructs from './constructs.js'\nimport {createTokenizer} from './create-tokenizer.js'\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ParseContext}\n *   Parser.\n */\nexport function parse(options) {\n  const settings = options || {}\n  const constructs = /** @type {FullNormalizedExtension} */ (\n    combineExtensions([defaultConstructs, ...(settings.extensions || [])])\n  )\n\n  /** @type {ParseContext} */\n  const parser = {\n    constructs,\n    content: create(content),\n    defined: [],\n    document: create(document),\n    flow: create(flow),\n    lazy: {},\n    string: create(string),\n    text: create(text)\n  }\n\n  return parser\n\n  /**\n   * @param {InitialConstruct} initial\n   *   Construct to start with.\n   * @returns {Create}\n   *   Create a tokenizer.\n   */\n  function create(initial) {\n    return creator\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from)\n    }\n  }\n}\n","/**\n * @import {Event} from 'micromark-util-types'\n */\n\nimport {subtokenize} from 'micromark-util-subtokenize'\n\n/**\n * @param {Array<Event>} events\n *   Events.\n * @returns {Array<Event>}\n *   Events.\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n\n  return events\n}\n","/**\n * @import {Chunk, Code, Encoding, Value} from 'micromark-util-types'\n */\n\n/**\n * @callback Preprocessor\n *   Preprocess a value.\n * @param {Value} value\n *   Value.\n * @param {Encoding | null | undefined} [encoding]\n *   Encoding when `value` is a typed array (optional).\n * @param {boolean | null | undefined} [end=false]\n *   Whether this is the last chunk (default: `false`).\n * @returns {Array<Chunk>}\n *   Chunks.\n */\n\nimport {codes, constants} from 'micromark-util-symbol'\n\nconst search = /[\\0\\t\\n\\r]/g\n\n/**\n * @returns {Preprocessor}\n *   Preprocess a value.\n */\nexport function preprocess() {\n  let column = 1\n  let buffer = ''\n  /** @type {boolean | undefined} */\n  let start = true\n  /** @type {boolean | undefined} */\n  let atCarriageReturn\n\n  return preprocessor\n\n  /** @type {Preprocessor} */\n  // eslint-disable-next-line complexity\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = []\n    /** @type {RegExpMatchArray | null} */\n    let match\n    /** @type {number} */\n    let next\n    /** @type {number} */\n    let startPosition\n    /** @type {number} */\n    let endPosition\n    /** @type {Code} */\n    let code\n\n    value =\n      buffer +\n      (typeof value === 'string'\n        ? value.toString()\n        : new TextDecoder(encoding || undefined).decode(value))\n\n    startPosition = 0\n    buffer = ''\n\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === codes.byteOrderMarker) {\n        startPosition++\n      }\n\n      start = undefined\n    }\n\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition\n      match = search.exec(value)\n      endPosition =\n        match && match.index !== undefined ? match.index : value.length\n      code = value.charCodeAt(endPosition)\n\n      if (!match) {\n        buffer = value.slice(startPosition)\n        break\n      }\n\n      if (\n        code === codes.lf &&\n        startPosition === endPosition &&\n        atCarriageReturn\n      ) {\n        chunks.push(codes.carriageReturnLineFeed)\n        atCarriageReturn = undefined\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(codes.carriageReturn)\n          atCarriageReturn = undefined\n        }\n\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition))\n          column += endPosition - startPosition\n        }\n\n        switch (code) {\n          case codes.nul: {\n            chunks.push(codes.replacementCharacter)\n            column++\n\n            break\n          }\n\n          case codes.ht: {\n            next = Math.ceil(column / constants.tabSize) * constants.tabSize\n            chunks.push(codes.horizontalTab)\n            while (column++ < next) chunks.push(codes.virtualSpace)\n\n            break\n          }\n\n          case codes.lf: {\n            chunks.push(codes.lineFeed)\n            column = 1\n\n            break\n          }\n\n          default: {\n            atCarriageReturn = true\n            column = 1\n          }\n        }\n      }\n\n      startPosition = endPosition + 1\n    }\n\n    if (end) {\n      if (atCarriageReturn) chunks.push(codes.carriageReturn)\n      if (buffer) chunks.push(buffer)\n      chunks.push(codes.eof)\n    }\n\n    return chunks\n  }\n}\n","import {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {codes, constants} from 'micromark-util-symbol'\n\nconst characterEscapeOrReference =\n  /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode)\n}\n\n/**\n * @param {string} $0\n *   Match.\n * @param {string} $1\n *   Character escape.\n * @param {string} $2\n *   Character reference.\n * @returns {string}\n *   Decoded value\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0)\n\n  if (head === codes.numberSign) {\n    const head = $2.charCodeAt(1)\n    const hex = head === codes.lowercaseX || head === codes.uppercaseX\n    return decodeNumericCharacterReference(\n      $2.slice(hex ? 2 : 1),\n      hex ? constants.numericBaseHexadecimal : constants.numericBaseDecimal\n    )\n  }\n\n  return decodeNamedCharacterReference($2) || $0\n}\n","/**\n * @import {\n *   Break,\n *   Blockquote,\n *   Code,\n *   Definition,\n *   Emphasis,\n *   Heading,\n *   Html,\n *   Image,\n *   InlineCode,\n *   Link,\n *   ListItem,\n *   List,\n *   Nodes,\n *   Paragraph,\n *   PhrasingContent,\n *   ReferenceType,\n *   Root,\n *   Strong,\n *   Text,\n *   ThematicBreak\n * } from 'mdast'\n * @import {\n *   Encoding,\n *   Event,\n *   Token,\n *   Value\n * } from 'micromark-util-types'\n * @import {Point} from 'unist'\n * @import {\n *   CompileContext,\n *   CompileData,\n *   Config,\n *   Extension,\n *   Handle,\n *   OnEnterError,\n *   Options\n * } from './types.js'\n */\n\nimport {ok as assert} from 'devlop'\nimport {toString} from 'mdast-util-to-string'\nimport {parse, postprocess, preprocess} from 'micromark'\nimport {decodeNumericCharacterReference} from 'micromark-util-decode-numeric-character-reference'\nimport {decodeString} from 'micromark-util-decode-string'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {codes, constants, types} from 'micromark-util-symbol'\nimport {decodeNamedCharacterReference} from 'decode-named-character-reference'\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Turn markdown into a syntax tree.\n *\n * @overload\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @overload\n * @param {Value} value\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @param {Value} value\n *   Markdown to parse.\n * @param {Encoding | Options | null | undefined} [encoding]\n *   Character encoding for when `value` is `Buffer`.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {Root}\n *   mdast tree.\n */\nexport function fromMarkdown(value, encoding, options) {\n  if (typeof encoding !== 'string') {\n    options = encoding\n    encoding = undefined\n  }\n\n  return compiler(options)(\n    postprocess(\n      parse(options)\n        .document()\n        .write(preprocess()(value, encoding, true))\n    )\n  )\n}\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      characterReference: onexitcharacterreference,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  }\n\n  configure(config, (options || {}).mdastExtensions || [])\n\n  /** @type {CompileData} */\n  const data = {}\n\n  return compile\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {type: 'root', children: []}\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      data\n    }\n    /** @type {Array<number>} */\n    const listStack = []\n    let index = -1\n\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (\n        events[index][1].type === types.listOrdered ||\n        events[index][1].type === types.listUnordered\n      ) {\n        if (events[index][0] === 'enter') {\n          listStack.push(index)\n        } else {\n          const tail = listStack.pop()\n          assert(typeof tail === 'number', 'expected list ot be open')\n          index = prepareList(events, tail, index)\n        }\n      }\n    }\n\n    index = -1\n\n    while (++index < events.length) {\n      const handler = config[events[index][0]]\n\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(\n          Object.assign(\n            {sliceSerialize: events[index][2].sliceSerialize},\n            context\n          ),\n          events[index][1]\n        )\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1]\n      const handler = tail[1] || defaultOnError\n      handler.call(context, undefined, tail[0])\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(\n        events.length > 0 ? events[0][1].start : {line: 1, column: 1, offset: 0}\n      ),\n      end: point(\n        events.length > 0\n          ? events[events.length - 2][1].end\n          : {line: 1, column: 1, offset: 0}\n      )\n    }\n\n    // Call transforms.\n    index = -1\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree\n    }\n\n    return tree\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1\n    let containerBalance = -1\n    let listSpread = false\n    /** @type {Token | undefined} */\n    let listItem\n    /** @type {number | undefined} */\n    let lineIndex\n    /** @type {number | undefined} */\n    let firstBlankLineIndex\n    /** @type {boolean | undefined} */\n    let atMarker\n\n    while (++index <= length) {\n      const event = events[index]\n\n      switch (event[1].type) {\n        case types.listUnordered:\n        case types.listOrdered:\n        case types.blockQuote: {\n          if (event[0] === 'enter') {\n            containerBalance++\n          } else {\n            containerBalance--\n          }\n\n          atMarker = undefined\n\n          break\n        }\n\n        case types.lineEndingBlank: {\n          if (event[0] === 'enter') {\n            if (\n              listItem &&\n              !atMarker &&\n              !containerBalance &&\n              !firstBlankLineIndex\n            ) {\n              firstBlankLineIndex = index\n            }\n\n            atMarker = undefined\n          }\n\n          break\n        }\n\n        case types.linePrefix:\n        case types.listItemValue:\n        case types.listItemMarker:\n        case types.listItemPrefix:\n        case types.listItemPrefixWhitespace: {\n          // Empty.\n\n          break\n        }\n\n        default: {\n          atMarker = undefined\n        }\n      }\n\n      if (\n        (!containerBalance &&\n          event[0] === 'enter' &&\n          event[1].type === types.listItemPrefix) ||\n        (containerBalance === -1 &&\n          event[0] === 'exit' &&\n          (event[1].type === types.listUnordered ||\n            event[1].type === types.listOrdered))\n      ) {\n        if (listItem) {\n          let tailIndex = index\n          lineIndex = undefined\n\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex]\n\n            if (\n              tailEvent[1].type === types.lineEnding ||\n              tailEvent[1].type === types.lineEndingBlank\n            ) {\n              if (tailEvent[0] === 'exit') continue\n\n              if (lineIndex) {\n                events[lineIndex][1].type = types.lineEndingBlank\n                listSpread = true\n              }\n\n              tailEvent[1].type = types.lineEnding\n              lineIndex = tailIndex\n            } else if (\n              tailEvent[1].type === types.linePrefix ||\n              tailEvent[1].type === types.blockQuotePrefix ||\n              tailEvent[1].type === types.blockQuotePrefixWhitespace ||\n              tailEvent[1].type === types.blockQuoteMarker ||\n              tailEvent[1].type === types.listItemIndent\n            ) {\n              // Empty\n            } else {\n              break\n            }\n          }\n\n          if (\n            firstBlankLineIndex &&\n            (!lineIndex || firstBlankLineIndex < lineIndex)\n          ) {\n            listItem._spread = true\n          }\n\n          // Fix position.\n          listItem.end = Object.assign(\n            {},\n            lineIndex ? events[lineIndex][1].start : event[1].end\n          )\n\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]])\n          index++\n          length++\n        }\n\n        // Create a new list item.\n        if (event[1].type === types.listItemPrefix) {\n          /** @type {Token} */\n          const item = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          }\n          listItem = item\n          events.splice(index, 0, ['enter', item, event[2]])\n          index++\n          length++\n          firstBlankLineIndex = undefined\n          atMarker = true\n        }\n      }\n    }\n\n    events[start][1]._spread = listSpread\n    return length\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Nodes} create\n   *   Create a node.\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function open(token) {\n      enter.call(this, create(token), token)\n      if (and) and.call(this, token)\n    }\n  }\n\n  /**\n   * @type {CompileContext['buffer']}\n   */\n  function buffer() {\n    this.stack.push({type: 'fragment', children: []})\n  }\n\n  /**\n   * @type {CompileContext['enter']}\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1]\n    assert(parent, 'expected `parent`')\n    assert('children' in parent, 'expected `parent`')\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children\n    siblings.push(node)\n    this.stack.push(node)\n    this.tokenStack.push([token, errorHandler || undefined])\n    node.position = {\n      start: point(token.start),\n      // @ts-expect-error: `end` will be patched later.\n      end: undefined\n    }\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function close(token) {\n      if (and) and.call(this, token)\n      exit.call(this, token)\n    }\n  }\n\n  /**\n   * @type {CompileContext['exit']}\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop()\n    assert(node, 'expected `node`')\n    const open = this.tokenStack.pop()\n\n    if (!open) {\n      throw new Error(\n        'Cannot close `' +\n          token.type +\n          '` (' +\n          stringifyPosition({start: token.start, end: token.end}) +\n          '): it’s not open'\n      )\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0])\n      } else {\n        const handler = open[1] || defaultOnError\n        handler.call(this, token, open[0])\n      }\n    }\n\n    assert(node.type !== 'fragment', 'unexpected fragment `exit`ed')\n    assert(node.position, 'expected `position` to be defined')\n    node.position.end = point(token.end)\n  }\n\n  /**\n   * @type {CompileContext['resume']}\n   */\n  function resume() {\n    return toString(this.stack.pop())\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    this.data.expectingFirstListItemValue = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (this.data.expectingFirstListItemValue) {\n      const ancestor = this.stack[this.stack.length - 2]\n      assert(ancestor, 'expected nodes on stack')\n      assert(ancestor.type === 'list', 'expected list on stack')\n      ancestor.start = Number.parseInt(\n        this.sliceSerialize(token),\n        constants.numericBaseDecimal\n      )\n      this.data.expectingFirstListItemValue = undefined\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    assert(node, 'expected node on stack')\n    assert(node.type === 'code', 'expected code on stack')\n    node.lang = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    assert(node, 'expected node on stack')\n    assert(node.type === 'code', 'expected code on stack')\n    node.meta = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (this.data.flowCodeInside) return\n    this.buffer()\n    this.data.flowCodeInside = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    assert(node, 'expected node on stack')\n    assert(node.type === 'code', 'expected code on stack')\n\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n    this.data.flowCodeInside = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    assert(node, 'expected node on stack')\n    assert(node.type === 'code', 'expected code on stack')\n\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '')\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    assert(node, 'expected node on stack')\n    assert(node.type === 'definition', 'expected definition on stack')\n\n    node.label = label\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    assert(node, 'expected node on stack')\n    assert(node.type === 'definition', 'expected definition on stack')\n\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    assert(node, 'expected node on stack')\n    assert(node.type === 'definition', 'expected definition on stack')\n\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    assert(node, 'expected node on stack')\n    assert(node.type === 'heading', 'expected heading on stack')\n\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length\n\n      assert(\n        depth === 1 ||\n          depth === 2 ||\n          depth === 3 ||\n          depth === 4 ||\n          depth === 5 ||\n          depth === 6,\n        'expected `depth` between `1` and `6`'\n      )\n\n      node.depth = depth\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    this.data.setextHeadingSlurpLineEnding = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1]\n    assert(node, 'expected node on stack')\n    assert(node.type === 'heading', 'expected heading on stack')\n\n    node.depth =\n      this.sliceSerialize(token).codePointAt(0) === codes.equalsTo ? 1 : 2\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    this.data.setextHeadingSlurpLineEnding = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1]\n    assert(node, 'expected node on stack')\n    assert('children' in node, 'expected parent on stack')\n    /** @type {Array<Nodes>} */\n    const siblings = node.children\n\n    let tail = siblings[siblings.length - 1]\n\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text()\n      tail.position = {\n        start: point(token.start),\n        // @ts-expect-error: we’ll add `end` later.\n        end: undefined\n      }\n      siblings.push(tail)\n    }\n\n    this.stack.push(tail)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop()\n    assert(tail, 'expected a `node` to be on the stack')\n    assert('value' in tail, 'expected a `literal` to be on the stack')\n    assert(tail.position, 'expected `node` to have an open position')\n    tail.value += this.sliceSerialize(token)\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1]\n    assert(context, 'expected `node`')\n\n    // If we’re at a hard break, include the line ending in there.\n    if (this.data.atHardBreak) {\n      assert('children' in context, 'expected `parent`')\n      const tail = context.children[context.children.length - 1]\n      assert(tail.position, 'expected tail to have a starting position')\n      tail.position.end = point(token.end)\n      this.data.atHardBreak = undefined\n      return\n    }\n\n    if (\n      !this.data.setextHeadingSlurpLineEnding &&\n      config.canContainEols.includes(context.type)\n    ) {\n      onenterdata.call(this, token)\n      onexitdata.call(this, token)\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    this.data.atHardBreak = true\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    assert(node, 'expected node on stack')\n    assert(node.type === 'html', 'expected html on stack')\n\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    assert(node, 'expected node on stack')\n    assert(node.type === 'html', 'expected html on stack')\n\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    assert(node, 'expected node on stack')\n    assert(node.type === 'inlineCode', 'expected inline code on stack')\n\n    node.value = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1]\n    assert(node, 'expected node on stack')\n    assert(node.type === 'link', 'expected link on stack')\n\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut'\n\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n\n    this.data.referenceType = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1]\n    assert(node, 'expected node on stack')\n    assert(node.type === 'image', 'expected image on stack')\n\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut'\n\n      node.type += 'Reference'\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType\n      // @ts-expect-error: mutate.\n      delete node.url\n      delete node.title\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier\n      // @ts-expect-error: mutate.\n      delete node.label\n    }\n\n    this.data.referenceType = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token)\n    const ancestor = this.stack[this.stack.length - 2]\n    assert(ancestor, 'expected ancestor on stack')\n    assert(\n      ancestor.type === 'image' || ancestor.type === 'link',\n      'expected image or link on stack'\n    )\n\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string)\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase()\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1]\n    assert(fragment, 'expected node on stack')\n    assert(fragment.type === 'fragment', 'expected fragment on stack')\n    const value = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    assert(node, 'expected node on stack')\n    assert(\n      node.type === 'image' || node.type === 'link',\n      'expected image or link on stack'\n    )\n\n    // Assume a reference.\n    this.data.inReference = true\n\n    if (node.type === 'link') {\n      /** @type {Array<PhrasingContent>} */\n      const children = fragment.children\n\n      node.children = children\n    } else {\n      node.alt = value\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    assert(node, 'expected node on stack')\n    assert(\n      node.type === 'image' || node.type === 'link',\n      'expected image or link on stack'\n    )\n    node.url = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    assert(node, 'expected node on stack')\n    assert(\n      node.type === 'image' || node.type === 'link',\n      'expected image or link on stack'\n    )\n    node.title = data\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    this.data.inReference = undefined\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    this.data.referenceType = 'collapsed'\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume()\n    const node = this.stack[this.stack.length - 1]\n    assert(node, 'expected node on stack')\n    assert(\n      node.type === 'image' || node.type === 'link',\n      'expected image reference or link reference on stack'\n    )\n\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(\n      this.sliceSerialize(token)\n    ).toLowerCase()\n    this.data.referenceType = 'full'\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    assert(\n      token.type === 'characterReferenceMarkerNumeric' ||\n        token.type === 'characterReferenceMarkerHexadecimal'\n    )\n    this.data.characterReferenceType = token.type\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token)\n    const type = this.data.characterReferenceType\n    /** @type {string} */\n    let value\n\n    if (type) {\n      value = decodeNumericCharacterReference(\n        data,\n        type === types.characterReferenceMarkerNumeric\n          ? constants.numericBaseDecimal\n          : constants.numericBaseHexadecimal\n      )\n      this.data.characterReferenceType = undefined\n    } else {\n      const result = decodeNamedCharacterReference(data)\n      assert(result !== false, 'expected reference to decode')\n      value = result\n    }\n\n    const tail = this.stack[this.stack.length - 1]\n    assert(tail, 'expected `node`')\n    assert('value' in tail, 'expected `node.value`')\n    tail.value += value\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreference(token) {\n    const tail = this.stack.pop()\n    assert(tail, 'expected `node`')\n    assert(tail.position, 'expected `node.position`')\n    tail.position.end = point(token.end)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    assert(node, 'expected node on stack')\n    assert(node.type === 'link', 'expected link on stack')\n\n    node.url = this.sliceSerialize(token)\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token)\n    const node = this.stack[this.stack.length - 1]\n    assert(node, 'expected node on stack')\n    assert(node.type === 'link', 'expected link on stack')\n\n    node.url = 'mailto:' + this.sliceSerialize(token)\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {type: 'blockquote', children: []}\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {type: 'code', lang: null, meta: null, value: ''}\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {type: 'inlineCode', value: ''}\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    }\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {type: 'emphasis', children: []}\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    return {\n      type: 'heading',\n      // @ts-expect-error `depth` will be set later.\n      depth: 0,\n      children: []\n    }\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {type: 'break'}\n  }\n\n  /** @returns {Html} */\n  function html() {\n    return {type: 'html', value: ''}\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {type: 'image', title: null, url: '', alt: null}\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {type: 'link', title: null, url: '', children: []}\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    }\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    }\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {type: 'paragraph', children: []}\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {type: 'strong', children: []}\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {type: 'text', value: ''}\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {type: 'thematicBreak'}\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {line: d.line, column: d.column, offset: d.offset}\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Array<Extension> | Extension>} extensions\n * @returns {undefined}\n */\nfunction configure(combined, extensions) {\n  let index = -1\n\n  while (++index < extensions.length) {\n    const value = extensions[index]\n\n    if (Array.isArray(value)) {\n      configure(combined, value)\n    } else {\n      extension(combined, value)\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {undefined}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key\n\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      switch (key) {\n        case 'canContainEols': {\n          const right = extension[key]\n          if (right) {\n            combined[key].push(...right)\n          }\n\n          break\n        }\n\n        case 'transforms': {\n          const right = extension[key]\n          if (right) {\n            combined[key].push(...right)\n          }\n\n          break\n        }\n\n        case 'enter':\n        case 'exit': {\n          const right = extension[key]\n          if (right) {\n            Object.assign(combined[key], right)\n          }\n\n          break\n        }\n        // No default\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error(\n      'Cannot close `' +\n        left.type +\n        '` (' +\n        stringifyPosition({start: left.start, end: left.end}) +\n        '): a different token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({start: right.start, end: right.end}) +\n        ') is open'\n    )\n  } else {\n    throw new Error(\n      'Cannot close document, a token (`' +\n        right.type +\n        '`, ' +\n        stringifyPosition({start: right.start, end: right.end}) +\n        ') is still open'\n    )\n  }\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} FromMarkdownOptions\n * @typedef {import('unified').Parser<Root>} Parser\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\n/**\n * @typedef {Omit<FromMarkdownOptions, 'extensions' | 'mdastExtensions'>} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * Aadd support for parsing from markdown.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkParse(options) {\n  /** @type {Processor} */\n  // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.\n  const self = this\n\n  self.parser = parser\n\n  /**\n   * @type {Parser}\n   */\n  function parser(doc) {\n    return fromMarkdown(doc, {\n      ...self.data('settings'),\n      ...options,\n      // Note: these options are not in the readme.\n      // The goal is for them to be set by plugins on `data` instead of being\n      // passed by users.\n      extensions: self.data('micromarkExtensions') || [],\n      mdastExtensions: self.data('fromMarkdownExtensions') || []\n    })\n  }\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  /** @type {Properties} */\n  const properties = {}\n\n  if (node.lang) {\n    properties.className = ['language-' + node.lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  let reuseCounter = state.footnoteCounts.get(id)\n\n  if (reuseCounter === undefined) {\n    reuseCounter = 0\n    state.footnoteOrder.push(id)\n    counter = state.footnoteOrder.length\n  } else {\n    counter = index + 1\n  }\n\n  reuseCounter += 1\n  state.footnoteCounts.set(id, reuseCounter)\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + clobberPrefix + 'fn-' + safeId,\n      id:\n        clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Html} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Element | Raw | undefined}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.options.allowDangerousHtml) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  return undefined\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Reference} Reference\n *\n * @typedef {import('./state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Extract<Nodes, Reference>} node\n *   Reference node (image, link).\n * @returns {Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return [{type: 'text', value: '![' + node.alt + suffix}]\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const definition = state.definitionById.get(id)\n\n  if (!definition) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(definition.url || ''), alt: node.alt}\n\n  if (definition.title !== null && definition.title !== undefined) {\n    properties.title = definition.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const definition = state.definitionById.get(id)\n\n  if (!definition) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(definition.url || '')}\n\n  if (definition.title !== null && definition.title !== undefined) {\n    properties.title = definition.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === null || spread === undefined\n    ? node.children.length > 1\n    : spread\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Parents} HastParents\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastParents}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointEnd, pointStart} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start && end) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  // To do: option to use `style`?\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(cell, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastElement | HastText}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n *\n * @satisfies {import('../state.js').Handlers}\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  // @ts-expect-error: root is different, but hard to type.\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  return undefined\n}\n","export const VOID       = -1;\nexport const PRIMITIVE  = 0;\nexport const ARRAY      = 1;\nexport const OBJECT     = 2;\nexport const DATE       = 3;\nexport const REGEXP     = 4;\nexport const MAP        = 5;\nexport const SET        = 6;\nexport const ERROR      = 7;\nexport const BIGINT     = 8;\n// export const SYMBOL = 9;\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst env = typeof self === 'object' ? self : globalThis;\n\nconst deserializer = ($, _) => {\n  const as = (out, index) => {\n    $.set(index, out);\n    return out;\n  };\n\n  const unpair = index => {\n    if ($.has(index))\n      return $.get(index);\n\n    const [type, value] = _[index];\n    switch (type) {\n      case PRIMITIVE:\n      case VOID:\n        return as(value, index);\n      case ARRAY: {\n        const arr = as([], index);\n        for (const index of value)\n          arr.push(unpair(index));\n        return arr;\n      }\n      case OBJECT: {\n        const object = as({}, index);\n        for (const [key, index] of value)\n          object[unpair(key)] = unpair(index);\n        return object;\n      }\n      case DATE:\n        return as(new Date(value), index);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as(new RegExp(source, flags), index);\n      }\n      case MAP: {\n        const map = as(new Map, index);\n        for (const [key, index] of value)\n          map.set(unpair(key), unpair(index));\n        return map;\n      }\n      case SET: {\n        const set = as(new Set, index);\n        for (const index of value)\n          set.add(unpair(index));\n        return set;\n      }\n      case ERROR: {\n        const {name, message} = value;\n        return as(new env[name](message), index);\n      }\n      case BIGINT:\n        return as(BigInt(value), index);\n      case 'BigInt':\n        return as(Object(BigInt(value)), index);\n      case 'ArrayBuffer':\n        return as(new Uint8Array(value).buffer, value);\n      case 'DataView': {\n        const { buffer } = new Uint8Array(value);\n        return as(new DataView(buffer), value);\n      }\n    }\n    return as(new env[type](value), index);\n  };\n\n  return unpair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns a deserialized value from a serialized array of Records.\n * @param {Record[]} serialized a previously serialized value.\n * @returns {any}\n */\nexport const deserialize = serialized => deserializer(new Map, serialized)(0);\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst EMPTY = '';\n\nconst {toString} = {};\nconst {keys} = Object;\n\nconst typeOf = value => {\n  const type = typeof value;\n  if (type !== 'object' || !value)\n    return [PRIMITIVE, type];\n\n  const asString = toString.call(value).slice(8, -1);\n  switch (asString) {\n    case 'Array':\n      return [ARRAY, EMPTY];\n    case 'Object':\n      return [OBJECT, EMPTY];\n    case 'Date':\n      return [DATE, EMPTY];\n    case 'RegExp':\n      return [REGEXP, EMPTY];\n    case 'Map':\n      return [MAP, EMPTY];\n    case 'Set':\n      return [SET, EMPTY];\n    case 'DataView':\n      return [ARRAY, asString];\n  }\n\n  if (asString.includes('Array'))\n    return [ARRAY, asString];\n\n  if (asString.includes('Error'))\n    return [ERROR, asString];\n\n  return [OBJECT, asString];\n};\n\nconst shouldSkip = ([TYPE, type]) => (\n  TYPE === PRIMITIVE &&\n  (type === 'function' || type === 'symbol')\n);\n\nconst serializer = (strict, json, $, _) => {\n\n  const as = (out, value) => {\n    const index = _.push(out) - 1;\n    $.set(value, index);\n    return index;\n  };\n\n  const pair = value => {\n    if ($.has(value))\n      return $.get(value);\n\n    let [TYPE, type] = typeOf(value);\n    switch (TYPE) {\n      case PRIMITIVE: {\n        let entry = value;\n        switch (type) {\n          case 'bigint':\n            TYPE = BIGINT;\n            entry = value.toString();\n            break;\n          case 'function':\n          case 'symbol':\n            if (strict)\n              throw new TypeError('unable to serialize ' + type);\n            entry = null;\n            break;\n          case 'undefined':\n            return as([VOID], value);\n        }\n        return as([TYPE, entry], value);\n      }\n      case ARRAY: {\n        if (type) {\n          let spread = value;\n          if (type === 'DataView') {\n            spread = new Uint8Array(value.buffer);\n          }\n          else if (type === 'ArrayBuffer') {\n            spread = new Uint8Array(value);\n          }\n          return as([type, [...spread]], value);\n        }\n\n        const arr = [];\n        const index = as([TYPE, arr], value);\n        for (const entry of value)\n          arr.push(pair(entry));\n        return index;\n      }\n      case OBJECT: {\n        if (type) {\n          switch (type) {\n            case 'BigInt':\n              return as([type, value.toString()], value);\n            case 'Boolean':\n            case 'Number':\n            case 'String':\n              return as([type, value.valueOf()], value);\n          }\n        }\n\n        if (json && ('toJSON' in value))\n          return pair(value.toJSON());\n\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const key of keys(value)) {\n          if (strict || !shouldSkip(typeOf(value[key])))\n            entries.push([pair(key), pair(value[key])]);\n        }\n        return index;\n      }\n      case DATE:\n        return as([TYPE, value.toISOString()], value);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as([TYPE, {source, flags}], value);\n      }\n      case MAP: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const [key, entry] of value) {\n          if (strict || !(shouldSkip(typeOf(key)) || shouldSkip(typeOf(entry))))\n            entries.push([pair(key), pair(entry)]);\n        }\n        return index;\n      }\n      case SET: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const entry of value) {\n          if (strict || !shouldSkip(typeOf(entry)))\n            entries.push(pair(entry));\n        }\n        return index;\n      }\n    }\n\n    const {message} = value;\n    return as([TYPE, {name: type, message}], value);\n  };\n\n  return pair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} value a serializable value.\n * @param {{json?: boolean, lossy?: boolean}?} options an object with a `lossy` or `json` property that,\n *  if `true`, will not throw errors on incompatible types, and behave more\n *  like JSON stringify would behave. Symbol and Function will be discarded.\n * @returns {Record[]}\n */\n export const serialize = (value, {json, lossy} = {}) => {\n  const _ = [];\n  return serializer(!(json || lossy), !!json, new Map, _)(value), _;\n};\n","import {deserialize} from './deserialize.js';\nimport {serialize} from './serialize.js';\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} any a serializable value.\n * @param {{transfer?: any[], json?: boolean, lossy?: boolean}?} options an object with\n * a transfer option (ignored when polyfilled) and/or non standard fields that\n * fallback to the polyfill if present.\n * @returns {Record[]}\n */\nexport default typeof structuredClone === \"function\" ?\n  /* c8 ignore start */\n  (any, options) => (\n    options && ('json' in options || 'lossy' in options) ?\n      deserialize(serialize(any, options)) : structuredClone(any)\n  ) :\n  (any, options) => deserialize(serialize(any, options));\n  /* c8 ignore stop */\n\nexport {deserialize, serialize};\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @callback FootnoteBackContentTemplate\n *   Generate content for the backreference dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent> | ElementContent | string}\n *   Content for the backreference when linking back from definitions to their\n *   reference.\n *\n * @callback FootnoteBackLabelTemplate\n *   Generate a back label dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Back label to use when linking back from definitions to their reference.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate the default content that GitHub uses on backreferences.\n *\n * @param {number} _\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent>}\n *   Content.\n */\nexport function defaultFootnoteBackContent(_, rereferenceIndex) {\n  /** @type {Array<ElementContent>} */\n  const result = [{type: 'text', value: '↩'}]\n\n  if (rereferenceIndex > 1) {\n    result.push({\n      type: 'element',\n      tagName: 'sup',\n      properties: {},\n      children: [{type: 'text', value: String(rereferenceIndex)}]\n    })\n  }\n\n  return result\n}\n\n/**\n * Generate the default label that GitHub uses on backreferences.\n *\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Label.\n */\nexport function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n  return (\n    'Back to reference ' +\n    (referenceIndex + 1) +\n    (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n  )\n}\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\n// eslint-disable-next-line complexity\nexport function footer(state) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const footnoteBackContent =\n    state.options.footnoteBackContent || defaultFootnoteBackContent\n  const footnoteBackLabel =\n    state.options.footnoteBackLabel || defaultFootnoteBackLabel\n  const footnoteLabel = state.options.footnoteLabel || 'Footnotes'\n  const footnoteLabelTagName = state.options.footnoteLabelTagName || 'h2'\n  const footnoteLabelProperties = state.options.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let referenceIndex = -1\n\n  while (++referenceIndex < state.footnoteOrder.length) {\n    const definition = state.footnoteById.get(\n      state.footnoteOrder[referenceIndex]\n    )\n\n    if (!definition) {\n      continue\n    }\n\n    const content = state.all(definition)\n    const id = String(definition.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let rereferenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n    const counts = state.footnoteCounts.get(id)\n\n    // eslint-disable-next-line no-unmodified-loop-condition\n    while (counts !== undefined && ++rereferenceIndex <= counts) {\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      let children =\n        typeof footnoteBackContent === 'string'\n          ? footnoteBackContent\n          : footnoteBackContent(referenceIndex, rereferenceIndex)\n\n      if (typeof children === 'string') {\n        children = {type: 'text', value: children}\n      }\n\n      backReferences.push({\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            clobberPrefix +\n            'fnref-' +\n            safeId +\n            (rereferenceIndex > 1 ? '-' + rereferenceIndex : ''),\n          dataFootnoteBackref: '',\n          ariaLabel:\n            typeof footnoteBackLabel === 'string'\n              ? footnoteBackLabel\n              : footnoteBackLabel(referenceIndex, rereferenceIndex),\n          className: ['data-footnote-backref']\n        },\n        children: Array.isArray(children) ? children : [children]\n      })\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(definition, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: footnoteLabelTagName,\n        properties: {\n          ...structuredClone(footnoteLabelProperties),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n// To do: use types from `unist-util-visit-parents` when it’s released.\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends UnistNode ? number | undefined : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [Ancestor=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\n *   Build a typed `Visitor` function from a node and all possible parents.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Visited\n *   Node type.\n * @template {UnistParent} Ancestor\n *   Parent type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     Matches<Descendant, Check>,\n *     Extract<Descendant, UnistParent>\n *   >\n * )} BuildVisitorFromDescendants\n *   Build a typed `Visitor` function from a list of descendants and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Node type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} testOrVisitor\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\n *   Handle each node (when test is omitted, pass `reverse`).\n * @param {boolean | null | undefined} [maybeReverse=false]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n  /** @type {boolean | null | undefined} */\n  let reverse\n  /** @type {Test} */\n  let test\n  /** @type {Visitor} */\n  let visitor\n\n  if (\n    typeof testOrVisitor === 'function' &&\n    typeof visitorOrReverse !== 'function'\n  ) {\n    test = undefined\n    visitor = testOrVisitor\n    reverse = visitorOrReverse\n  } else {\n    // @ts-expect-error: assume the overload with test was given.\n    test = testOrVisitor\n    // @ts-expect-error: assume the overload with test was given.\n    visitor = visitorOrReverse\n    reverse = maybeReverse\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  /**\n   * @param {UnistNode} node\n   * @param {Array<UnistParent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1]\n    const index = parent ? parent.children.indexOf(node) : undefined\n    return visitor(node, index, parent)\n  }\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').RootContent} HastRootContent\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('mdast').Parents} MdastParents\n *\n * @typedef {import('vfile').VFile} VFile\n *\n * @typedef {import('./footer.js').FootnoteBackContentTemplate} FootnoteBackContentTemplate\n * @typedef {import('./footer.js').FootnoteBackLabelTemplate} FootnoteBackLabelTemplate\n */\n\n/**\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | undefined} parent\n *   Parent of `node`.\n * @returns {Array<HastElementContent> | HastElementContent | undefined}\n *   hast node.\n *\n * @typedef {Partial<Record<MdastNodes['type'], Handler>>} Handlers\n *   Handle nodes.\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree (default:\n *   `false`).\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` property on footnotes to prevent them from\n *   *clobbering* (default: `'user-content-'`).\n *\n *   Pass `''` for trusted markdown and when you are careful with\n *   polyfilling.\n *   You could pass a different prefix.\n *\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=\"x\"></p>\n *   <script>alert(x) // `x` now refers to the `p#x` DOM element</script>\n *   ```\n *\n *   The above example shows that elements are made available by browsers, by\n *   their ID, on the `window` object.\n *   This is a security risk because you might be expecting some other variable\n *   at that place.\n *   It can also break polyfills.\n *   Using a prefix solves these problems.\n * @property {VFile | null | undefined} [file]\n *   Corresponding virtual file representing the input document (optional).\n * @property {FootnoteBackContentTemplate | string | null | undefined} [footnoteBackContent]\n *   Content of the backreference back to references (default: `defaultFootnoteBackContent`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackContent(_, rereferenceIndex) {\n *     const result = [{type: 'text', value: '↩'}]\n *\n *     if (rereferenceIndex > 1) {\n *       result.push({\n *         type: 'element',\n *         tagName: 'sup',\n *         properties: {},\n *         children: [{type: 'text', value: String(rereferenceIndex)}]\n *       })\n *     }\n *\n *     return result\n *   }\n *   ```\n *\n *   This content is used in the `a` element of each backreference (the `↩`\n *   links).\n * @property {FootnoteBackLabelTemplate | string | null | undefined} [footnoteBackLabel]\n *   Label to describe the backreference back to references (default:\n *   `defaultFootnoteBackLabel`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n *    return (\n *      'Back to reference ' +\n *      (referenceIndex + 1) +\n *      (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n *    )\n *   }\n *   ```\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is used in the `ariaLabel` property on each backreference\n *   (the `↩` links).\n *   It affects users of assistive technology.\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Textual label to use for the footnotes section (default: `'Footnotes'`).\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (default: `{className:\n *   ['sr-only']}`).\n *\n *   Change it to show the label and add other properties.\n *\n *   This label is typically hidden visually (assuming an `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass an empty string.\n *   You can also add different properties.\n *\n *   > **Note**: `id: 'footnote-label'` is always added, because footnote\n *   > calls use it with `aria-describedby` to provide an accessible label.\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   HTML tag name to use for the footnote label element (default: `'h2'`).\n *\n *   Change it to match your document structure.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes (optional).\n * @property {Array<MdastNodes['type']> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed)\n *   (optional).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes (optional).\n *\n * @typedef State\n *   Info passed around.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => HastElement | Type} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {Map<string, MdastDefinition>} definitionById\n *   Definitions by their identifier.\n * @property {Map<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Map<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {(node: MdastNodes, parent: MdastParents | undefined) => Array<HastElementContent> | HastElementContent | undefined} one\n *   Transform an mdast node to hast.\n * @property {Options} options\n *   Configuration.\n * @property {(from: MdastNodes, node: HastNodes) => undefined} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastRootContent>(nodes: Array<Type>, loose?: boolean | undefined) => Array<HastText | Type>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {visit} from 'unist-util-visit'\nimport {position} from 'unist-util-position'\nimport {handlers as defaultHandlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || emptyOptions\n  /** @type {Map<string, MdastDefinition>} */\n  const definitionById = new Map()\n  /** @type {Map<string, MdastFootnoteDefinition>} */\n  const footnoteById = new Map()\n  /** @type {Map<string, number>} */\n  const footnoteCounts = new Map()\n  /** @type {Handlers} */\n  // @ts-expect-error: the root handler returns a root.\n  // Hard to type.\n  const handlers = {...defaultHandlers, ...settings.handlers}\n\n  /** @type {State} */\n  const state = {\n    all,\n    applyData,\n    definitionById,\n    footnoteById,\n    footnoteCounts,\n    footnoteOrder: [],\n    handlers,\n    one,\n    options: settings,\n    patch,\n    wrap\n  }\n\n  visit(tree, function (node) {\n    if (node.type === 'definition' || node.type === 'footnoteDefinition') {\n      const map = node.type === 'definition' ? definitionById : footnoteById\n      const id = String(node.identifier).toUpperCase()\n\n      // Mimick CM behavior of link definitions.\n      // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/9032189/lib/index.js#L20-L21>.\n      if (!map.has(id)) {\n        // @ts-expect-error: node type matches map.\n        map.set(id, node)\n      }\n    }\n  })\n\n  return state\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {Array<HastElementContent> | HastElementContent | undefined}\n   *   Resulting hast node.\n   */\n  function one(node, parent) {\n    const type = node.type\n    const handle = state.handlers[type]\n\n    if (own.call(state.handlers, type) && handle) {\n      return handle(state, node, parent)\n    }\n\n    if (state.options.passThrough && state.options.passThrough.includes(type)) {\n      if ('children' in node) {\n        const {children, ...shallow} = node\n        const result = structuredClone(shallow)\n        // @ts-expect-error: TS doesn’t understand…\n        result.children = state.all(node)\n        // @ts-expect-error: TS doesn’t understand…\n        return result\n      }\n\n      // @ts-expect-error: it’s custom.\n      return structuredClone(node)\n    }\n\n    const unknown = state.options.unknownHandler || defaultUnknownHandler\n\n    return unknown(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function all(parent) {\n    /** @type {Array<HastElementContent>} */\n    const values = []\n\n    if ('children' in parent) {\n      const nodes = parent.children\n      let index = -1\n      while (++index < nodes.length) {\n        const result = state.one(nodes[index], parent)\n\n        // To do: see if we van clean this? Can we merge texts?\n        if (result) {\n          if (index && nodes[index - 1].type === 'break') {\n            if (!Array.isArray(result) && result.type === 'text') {\n              result.value = trimMarkdownSpaceStart(result.value)\n            }\n\n            if (!Array.isArray(result) && result.type === 'element') {\n              const head = result.children[0]\n\n              if (head && head.type === 'text') {\n                head.value = trimMarkdownSpaceStart(head.value)\n              }\n            }\n          }\n\n          if (Array.isArray(result)) {\n            values.push(...result)\n          } else {\n            values.push(result)\n          }\n        }\n      }\n    }\n\n    return values\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {undefined}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {HastElement | Type}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {HastElement | Type} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent of `hName` is to create an element, but likely also to keep\n      // the content around (otherwise: pass `hChildren`).\n      else {\n        /** @type {Array<HastElementContent>} */\n        // @ts-expect-error: assume no doctypes in `root`.\n        const children = 'children' in result ? result.children : [result]\n        result = {type: 'element', tagName: hName, properties: {}, children}\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      Object.assign(result.properties, structuredClone(hProperties))\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastElement | HastText}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastElement | HastText} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: state.all(node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastRootContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | undefined} [loose=false]\n *   Whether to add line endings at start and end (default: `false`).\n * @returns {Array<HastText | Type>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<HastText | Type>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n\n/**\n * Trim spaces and tabs at the start of `value`.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Result.\n */\nfunction trimMarkdownSpaceStart(value) {\n  let index = 0\n  let code = value.charCodeAt(index)\n\n  while (code === 9 || code === 32) {\n    index++\n    code = value.charCodeAt(index)\n  }\n\n  return value.slice(index)\n}\n","/**\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('./state.js').Options} Options\n */\n\nimport {ok as assert} from 'devlop'\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {HastNodes}\n *   hast tree.\n */\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, undefined)\n  const foot = footer(state)\n  /** @type {HastNodes} */\n  const result = Array.isArray(node)\n    ? {type: 'root', children: node}\n    : node || {type: 'root', children: []}\n\n  if (foot) {\n    // If there’s a footer, there were definitions, meaning block\n    // content.\n    // So `result` is a parent node.\n    assert('children' in result)\n    result.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  return result\n}\n","/**\n * @import {Root as HastRoot} from 'hast'\n * @import {Root as MdastRoot} from 'mdast'\n * @import {Options as ToHastOptions} from 'mdast-util-to-hast'\n * @import {Processor} from 'unified'\n * @import {VFile} from 'vfile'\n */\n\n/**\n * @typedef {Omit<ToHastOptions, 'file'>} Options\n *\n * @callback TransformBridge\n *   Bridge-mode.\n *\n *   Runs the destination with the new hast tree.\n *   Discards result.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {Promise<undefined>}\n *   Nothing.\n *\n * @callback TransformMutate\n *  Mutate-mode.\n *\n *  Further transformers run on the hast tree.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {HastRoot}\n *   Tree (hast).\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n/**\n * Turn markdown into HTML.\n *\n * ##### Notes\n *\n * ###### Signature\n *\n * * if a processor is given,\n *   runs the (rehype) plugins used on it with a hast tree,\n *   then discards the result (*bridge mode*)\n * * otherwise,\n *   returns a hast tree,\n *   the plugins used after `remarkRehype` are rehype plugins (*mutate mode*)\n *\n * > 👉 **Note**:\n * > It’s highly unlikely that you want to pass a `processor`.\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most plugins ignore `raw` nodes but two notable ones don’t:\n *\n * * `rehype-stringify` also has an option `allowDangerousHtml` which will\n *   output the raw HTML.\n *   This is typically discouraged as noted by the option name but is useful if\n *   you completely trust authors\n * * `rehype-raw` can handle the raw embedded HTML strings by parsing them\n *   into standard hast nodes (`element`, `text`, etc);\n *   this is a heavy task as it needs a full HTML parser,\n *   but it is the only way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark,\n * which we follow by default.\n * They are supported by GitHub,\n * so footnotes can be enabled in markdown with `remark-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes,\n * which is hidden for sighted users but shown to assistive technology.\n * When your page is not in English,\n * you must define translated values.\n *\n * Back references use ARIA attributes,\n * but the section label itself uses a heading that is hidden with an\n * `sr-only` class.\n * To show it to sighted users,\n * define different attributes in `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem,\n * as it links footnote calls to footnote definitions on the page through `id`\n * attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * *Example: headings (DOM clobbering)* in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * * when the node has a `value`\n *   (and doesn’t have `data.hName`, `data.hProperties`, or `data.hChildren`,\n *   see later),\n *   create a hast `text` node\n * * otherwise,\n *   create a `<div>` element (which could be changed with `data.hName`),\n *   with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @overload\n * @param {Processor} processor\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformBridge}\n *\n * @overload\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformMutate}\n *\n * @overload\n * @param {Readonly<Options> | Processor | null | undefined} [destination]\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformBridge | TransformMutate}\n *\n * @param {Readonly<Options> | Processor | null | undefined} [destination]\n *   Processor or configuration (optional).\n * @param {Readonly<Options> | null | undefined} [options]\n *   When a processor was given,\n *   configuration (optional).\n * @returns {TransformBridge | TransformMutate}\n *   Transform.\n */\nexport default function remarkRehype(destination, options) {\n  if (destination && 'run' in destination) {\n    /**\n     * @type {TransformBridge}\n     */\n    return async function (tree, file) {\n      // Cast because root in -> root out.\n      const hastTree = /** @type {HastRoot} */ (\n        toHast(tree, {file, ...options})\n      )\n      await destination.run(hastTree, file)\n    }\n  }\n\n  /**\n   * @type {TransformMutate}\n   */\n  return function (tree, file) {\n    // Cast because root in -> root out.\n    // To do: in the future, disallow ` || options` fallback.\n    // With `unified-engine`, `destination` can be `undefined` but\n    // `options` will be the file set.\n    // We should not pass that as `options`.\n    return /** @type {HastRoot} */ (\n      toHast(tree, {file, ...(destination || options)})\n    )\n  }\n}\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","// To do: remove `void`s\n// To do: remove `null` from output of our APIs, allow it as user APIs.\n\n/**\n * @typedef {(error?: Error | null | undefined, ...output: Array<any>) => void} Callback\n *   Callback.\n *\n * @typedef {(...input: Array<any>) => any} Middleware\n *   Ware.\n *\n * @typedef Pipeline\n *   Pipeline.\n * @property {Run} run\n *   Run the pipeline.\n * @property {Use} use\n *   Add middleware.\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n *\n *   Calls `done` on completion with either an error or the output of the\n *   last middleware.\n *\n *   > 👉 **Note**: as the length of input defines whether async functions get a\n *   > `next` function,\n *   > it’s recommended to keep `input` at one value normally.\n\n *\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n *   Pipeline.\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error | null | undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware` into a uniform interface.\n *\n * You can pass all input to the resulting function.\n * `callback` is then called with the output of `middleware`.\n *\n * If `middleware` accepts more arguments than the later given in input,\n * an extra `done` function is passed to it after that input,\n * which must be called by `middleware`.\n *\n * The first value in `input` is the main input value.\n * All other input values are the rest input values.\n * The values given to `callback` are the input values,\n * merged with every non-nullish output value.\n *\n * * if `middleware` throws an error,\n *   returns a promise that is rejected,\n *   or calls the given `done` function with an error,\n *   `callback` is called with that error\n * * if `middleware` returns a value or returns a promise that is resolved,\n *   that value is the main output value\n * * if `middleware` calls `done`,\n *   all non-nullish values except for the first one (the error) overwrite the\n *   output values\n *\n * @param {Middleware} middleware\n *   Function to wrap.\n * @param {Callback} callback\n *   Callback called with the output of `middleware`.\n * @returns {Run}\n *   Wrapped middleware.\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result && result.then && typeof result.then === 'function') {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   *\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const minpath = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | null | undefined} [extname]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, extname) {\n  if (extname !== undefined && typeof extname !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (\n    extname === undefined ||\n    extname.length === 0 ||\n    extname.length > path.length\n  ) {\n    while (index--) {\n      if (path.codePointAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (extname === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extnameIndex = extname.length - 1\n\n  while (index--) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extnameIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.codePointAt(index) === extname.codePointAt(extnameIndex--)) {\n          if (extnameIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extnameIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.codePointAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.codePointAt(0) === 47 /* `/` */\n      ? '//'\n      : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.codePointAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.codePointAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.codePointAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.codePointAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.codePointAt(result.length - 1) !== 46 /* `.` */ ||\n          result.codePointAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const minproc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * Checks if a value has the shape of a WHATWG URL object.\n *\n * Using a symbol or instanceof would not be able to recognize URL objects\n * coming from other implementations (e.g. in Electron), so instead we are\n * checking some well known properties for a lack of a better test.\n *\n * We use `href` and `protocol` as they are the only properties that are\n * easy to retrieve and calculate due to the lazy nature of the getters.\n *\n * We check for auth attribute to distinguish legacy url instance with\n * WHATWG URL instance.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js#L720>\nexport function isUrl(fileUrlOrPath) {\n  return Boolean(\n    fileUrlOrPath !== null &&\n      typeof fileUrlOrPath === 'object' &&\n      'href' in fileUrlOrPath &&\n      fileUrlOrPath.href &&\n      'protocol' in fileUrlOrPath &&\n      fileUrlOrPath.protocol &&\n      // @ts-expect-error: indexing is fine.\n      fileUrlOrPath.auth === undefined\n  )\n}\n","import {isUrl} from './minurl.shared.js'\n\nexport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js>\n\n/**\n * @param {URL | string} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.codePointAt(index) === 37 /* `%` */ &&\n      pathname.codePointAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.codePointAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n","/**\n * @import {Node, Point, Position} from 'unist'\n * @import {Options as MessageOptions} from 'vfile-message'\n * @import {Compatible, Data, Map, Options, Value} from 'vfile'\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n */\n\nimport {VFileMessage} from 'vfile-message'\nimport {minpath} from '#minpath'\nimport {minproc} from '#minproc'\nimport {urlToPath, isUrl} from '#minurl'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n */\nconst order = /** @type {const} */ ([\n  'history',\n  'path',\n  'basename',\n  'stem',\n  'extname',\n  'dirname'\n])\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Uint8Array` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else if (typeof value === 'string' || isUint8Array(value)) {\n      options = {value}\n    } else {\n      options = value\n    }\n\n    /* eslint-disable no-unused-expressions */\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    // Prevent calling `cwd` (which could be expensive) if it’s not needed;\n    // the empty string will be overridden in the next block.\n    this.cwd = 'cwd' in options ? '' : minproc.cwd()\n\n    /**\n     * Place to store custom info (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of file paths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const field = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        field in options &&\n        options[field] !== undefined &&\n        options[field] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[field] = field === 'history' ? [...options[field]] : options[field]\n      }\n    }\n\n    /** @type {string} */\n    let field\n\n    // Set non-path related properties.\n    for (field in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(field)) {\n        // @ts-expect-error: fine to set other things.\n        this[field] = options[field]\n      }\n    }\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   *\n   * @returns {string | undefined}\n   *   Basename.\n   */\n  get basename() {\n    return typeof this.path === 'string'\n      ? minpath.basename(this.path)\n      : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} basename\n   *   Basename.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = minpath.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   *\n   * @returns {string | undefined}\n   *   Dirname.\n   */\n  get dirname() {\n    return typeof this.path === 'string'\n      ? minpath.dirname(this.path)\n      : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} dirname\n   *   Dirname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = minpath.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   *\n   * @returns {string | undefined}\n   *   Extname.\n   */\n  get extname() {\n    return typeof this.path === 'string'\n      ? minpath.extname(this.path)\n      : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} extname\n   *   Extname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.codePointAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = minpath.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   *   Path.\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {URL | string} path\n   *   Path.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * @returns {string | undefined}\n   *   Stem.\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? minpath.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} stem\n   *   Stem.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = minpath.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  // Normal prototypal methods.\n  /**\n   * Create a fatal message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `true` (error; file not usable)\n   * and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Never.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n\n  /**\n   * Create an info message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `undefined` (info; change\n   * likely not needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = undefined\n\n    return message\n  }\n\n  /**\n   * Create a message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `false` (warning; change may be\n   * needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(causeOrReason, optionsOrParentOrPlace, origin) {\n    const message = new VFileMessage(\n      // @ts-expect-error: the overloads are fine.\n      causeOrReason,\n      optionsOrParentOrPlace,\n      origin\n    )\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * > **Note**: which encodings are supported depends on the engine.\n   * > For info on Node.js, see:\n   * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.\n   *\n   * @param {string | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Uint8Array`\n   *   (default: `'utf-8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    if (this.value === undefined) {\n      return ''\n    }\n\n    if (typeof this.value === 'string') {\n      return this.value\n    }\n\n    const decoder = new TextDecoder(encoding || undefined)\n    return decoder.decode(this.value)\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {undefined}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(minpath.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + minpath.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","export const CallableInstance =\n  /**\n   * @type {new <Parameters extends Array<unknown>, Result>(property: string | symbol) => (...parameters: Parameters) => Result}\n   */\n  (\n    /** @type {unknown} */\n    (\n      /**\n       * @this {Function}\n       * @param {string | symbol} property\n       * @returns {(...parameters: Array<unknown>) => unknown}\n       */\n      function (property) {\n        const self = this\n        const constr = self.constructor\n        const proto = /** @type {Record<string | symbol, Function>} */ (\n          // Prototypes do exist.\n          // type-coverage:ignore-next-line\n          constr.prototype\n        )\n        const value = proto[property]\n        /** @type {(...parameters: Array<unknown>) => unknown} */\n        const apply = function () {\n          return value.apply(apply, arguments)\n        }\n\n        Object.setPrototypeOf(apply, proto)\n\n        // Not needed for us in `unified`: we only call this on the `copy`\n        // function,\n        // and we don't need to add its fields (`length`, `name`)\n        // over.\n        // See also: GH-246.\n        // const names = Object.getOwnPropertyNames(value)\n        //\n        // for (const p of names) {\n        //   const descriptor = Object.getOwnPropertyDescriptor(value, p)\n        //   if (descriptor) Object.defineProperty(apply, p, descriptor)\n        // }\n\n        return apply\n      }\n    )\n  )\n","/**\n * @typedef {import('trough').Pipeline} Pipeline\n *\n * @typedef {import('unist').Node} Node\n *\n * @typedef {import('vfile').Compatible} Compatible\n * @typedef {import('vfile').Value} Value\n *\n * @typedef {import('../index.js').CompileResultMap} CompileResultMap\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Settings} Settings\n */\n\n/**\n * @typedef {CompileResultMap[keyof CompileResultMap]} CompileResults\n *   Acceptable results from compilers.\n *\n *   To register custom results, add them to\n *   {@linkcode CompileResultMap}.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the compiler receives (default: `Node`).\n * @template {CompileResults} [Result=CompileResults]\n *   The thing that the compiler yields (default: `CompileResults`).\n * @callback Compiler\n *   A **compiler** handles the compiling of a syntax tree to something else\n *   (in most cases, text) (TypeScript type).\n *\n *   It is used in the stringify phase and called with a {@linkcode Node}\n *   and {@linkcode VFile} representation of the document to compile.\n *   It should return the textual representation of the given tree (typically\n *   `string`).\n *\n *   > **Note**: unified typically compiles by serializing: most compilers\n *   > return `string` (or `Uint8Array`).\n *   > Some compilers, such as the one configured with\n *   > [`rehype-react`][rehype-react], return other values (in this case, a\n *   > React tree).\n *   > If you’re using a compiler that doesn’t serialize, expect different\n *   > result values.\n *   >\n *   > To register custom results in TypeScript, add them to\n *   > {@linkcode CompileResultMap}.\n *\n *   [rehype-react]: https://github.com/rehypejs/rehype-react\n * @param {Tree} tree\n *   Tree to compile.\n * @param {VFile} file\n *   File associated with `tree`.\n * @returns {Result}\n *   New content: compiled text (`string` or `Uint8Array`, for `file.value`) or\n *   something else (for `file.result`).\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the parser yields (default: `Node`)\n * @callback Parser\n *   A **parser** handles the parsing of text to a syntax tree.\n *\n *   It is used in the parse phase and is called with a `string` and\n *   {@linkcode VFile} of the document to parse.\n *   It must return the syntax tree representation of the given file\n *   ({@linkcode Node}).\n * @param {string} document\n *   Document to parse.\n * @param {VFile} file\n *   File associated with `document`.\n * @returns {Tree}\n *   Node representing the given file.\n */\n\n/**\n * @typedef {(\n *   Plugin<Array<any>, any, any> |\n *   PluginTuple<Array<any>, any, any> |\n *   Preset\n * )} Pluggable\n *   Union of the different ways to add plugins and settings.\n */\n\n/**\n * @typedef {Array<Pluggable>} PluggableList\n *   List of plugins and presets.\n */\n\n// Note: we can’t use `callback` yet as it messes up `this`:\n//  <https://github.com/microsoft/TypeScript/issues/55197>.\n/**\n * @template {Array<unknown>} [PluginParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=Node]\n *   Value that is expected as input (default: `Node`).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@linkcode Parser}, this should be\n *       `string`.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be the\n *       node it expects.\n * @template [Output=Input]\n *   Value that is yielded as output (default: `Input`).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@linkcode Parser}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be\n *       result it yields.\n * @typedef {(\n *   (this: Processor, ...parameters: PluginParameters) =>\n *     Input extends string ? // Parser.\n *        Output extends Node | undefined ? undefined | void : never :\n *     Output extends CompileResults ? // Compiler.\n *        Input extends Node | undefined ? undefined | void : never :\n *     Transformer<\n *       Input extends Node ? Input : Node,\n *       Output extends Node ? Output : Node\n *     > | undefined | void\n * )} Plugin\n *   Single plugin.\n *\n *   Plugins configure the processors they are applied on in the following\n *   ways:\n *\n *   *   they change the processor, such as the parser, the compiler, or by\n *       configuring data\n *   *   they specify how to handle trees and files\n *\n *   In practice, they are functions that can receive options and configure the\n *   processor (`this`).\n *\n *   > **Note**: plugins are called when the processor is *frozen*, not when\n *   > they are applied.\n */\n\n/**\n * Tuple of a plugin and its configuration.\n *\n * The first item is a plugin, the rest are its parameters.\n *\n * @template {Array<unknown>} [TupleParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=undefined]\n *   Value that is expected as input (optional).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@linkcode Parser}, this should be\n *       `string`.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be the\n *       node it expects.\n * @template [Output=undefined] (optional).\n *   Value that is yielded as output.\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@linkcode Parser}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be\n *       result it yields.\n * @typedef {(\n *   [\n *     plugin: Plugin<TupleParameters, Input, Output>,\n *     ...parameters: TupleParameters\n *   ]\n * )} PluginTuple\n */\n\n/**\n * @typedef Preset\n *   Sharable configuration.\n *\n *   They can contain plugins and settings.\n * @property {PluggableList | undefined} [plugins]\n *   List of plugins and presets (optional).\n * @property {Settings | undefined} [settings]\n *   Shared settings for parsers and compilers (optional).\n */\n\n/**\n * @template {VFile} [File=VFile]\n *   The file that the callback receives (default: `VFile`).\n * @callback ProcessCallback\n *   Callback called when the process is done.\n *\n *   Called with either an error or a result.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {File | undefined} [file]\n *   Processed file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The tree that the callback receives (default: `Node`).\n * @callback RunCallback\n *   Callback called when transformers are done.\n *\n *   Called with either an error or results.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {Tree | undefined} [tree]\n *   Transformed tree (optional).\n * @param {VFile | undefined} [file]\n *   File (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Output=Node]\n *   Node type that the transformer yields (default: `Node`).\n * @callback TransformCallback\n *   Callback passed to transforms.\n *\n *   If the signature of a `transformer` accepts a third argument, the\n *   transformer may perform asynchronous operations, and must call it.\n * @param {Error | undefined} [error]\n *   Fatal error to stop the process (optional).\n * @param {Output | undefined} [tree]\n *   New, changed, tree (optional).\n * @param {VFile | undefined} [file]\n *   New, changed, file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Input=Node]\n *   Node type that the transformer expects (default: `Node`).\n * @template {Node} [Output=Input]\n *   Node type that the transformer yields (default: `Input`).\n * @callback Transformer\n *   Transformers handle syntax trees and files.\n *\n *   They are functions that are called each time a syntax tree and file are\n *   passed through the run phase.\n *   When an error occurs in them (either because it’s thrown, returned,\n *   rejected, or passed to `next`), the process stops.\n *\n *   The run phase is handled by [`trough`][trough], see its documentation for\n *   the exact semantics of these functions.\n *\n *   > **Note**: you should likely ignore `next`: don’t accept it.\n *   > it supports callback-style async work.\n *   > But promises are likely easier to reason about.\n *\n *   [trough]: https://github.com/wooorm/trough#function-fninput-next\n * @param {Input} tree\n *   Tree to handle.\n * @param {VFile} file\n *   File to handle.\n * @param {TransformCallback<Output>} next\n *   Callback.\n * @returns {(\n *   Promise<Output | undefined | void> |\n *   Promise<never> | // For some reason this is needed separately.\n *   Output |\n *   Error |\n *   undefined |\n *   void\n * )}\n *   If you accept `next`, nothing.\n *   Otherwise:\n *\n *   *   `Error` — fatal error to stop the process\n *   *   `Promise<undefined>` or `undefined` — the next transformer keeps using\n *       same tree\n *   *   `Promise<Node>` or `Node` — new, changed, tree\n */\n\n/**\n * @template {Node | undefined} ParseTree\n *   Output of `parse`.\n * @template {Node | undefined} HeadTree\n *   Input for `run`.\n * @template {Node | undefined} TailTree\n *   Output for `run`.\n * @template {Node | undefined} CompileTree\n *   Input of `stringify`.\n * @template {CompileResults | undefined} CompileResult\n *   Output of `stringify`.\n * @template {Node | string | undefined} Input\n *   Input of plugin.\n * @template Output\n *   Output of plugin (optional).\n * @typedef {(\n *   Input extends string\n *     ? Output extends Node | undefined\n *       ? // Parser.\n *         Processor<\n *           Output extends undefined ? ParseTree : Output,\n *           HeadTree,\n *           TailTree,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Output extends CompileResults\n *     ? Input extends Node | undefined\n *       ? // Compiler.\n *         Processor<\n *           ParseTree,\n *           HeadTree,\n *           TailTree,\n *           Input extends undefined ? CompileTree : Input,\n *           Output extends undefined ? CompileResult : Output\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Input extends Node | undefined\n *     ? Output extends Node | undefined\n *       ? // Transform.\n *         Processor<\n *           ParseTree,\n *           HeadTree extends undefined ? Input : HeadTree,\n *           Output extends undefined ? TailTree : Output,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : // Unknown.\n *       Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n * )} UsePlugin\n *   Create a processor based on the input/output of a {@link Plugin plugin}.\n */\n\n/**\n * @template {CompileResults | undefined} Result\n *   Node type that the transformer yields.\n * @typedef {(\n *   Result extends Value | undefined ?\n *     VFile :\n *     VFile & {result: Result}\n *   )} VFileWithOutput\n *   Type to generate a {@linkcode VFile} corresponding to a compiler result.\n *\n *   If a result that is not acceptable on a `VFile` is used, that will\n *   be stored on the `result` field of {@linkcode VFile}.\n */\n\nimport {bail} from 'bail'\nimport extend from 'extend'\nimport {ok as assert} from 'devlop'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\nimport {CallableInstance} from './callable-instance.js'\n\n// To do: next major: drop `Compiler`, `Parser`: prefer lowercase.\n\n// To do: we could start yielding `never` in TS when a parser is missing and\n// `parse` is called.\n// Currently, we allow directly setting `processor.parser`, which is untyped.\n\nconst own = {}.hasOwnProperty\n\n/**\n * @template {Node | undefined} [ParseTree=undefined]\n *   Output of `parse` (optional).\n * @template {Node | undefined} [HeadTree=undefined]\n *   Input for `run` (optional).\n * @template {Node | undefined} [TailTree=undefined]\n *   Output for `run` (optional).\n * @template {Node | undefined} [CompileTree=undefined]\n *   Input of `stringify` (optional).\n * @template {CompileResults | undefined} [CompileResult=undefined]\n *   Output of `stringify` (optional).\n * @extends {CallableInstance<[], Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>>}\n */\nexport class Processor extends CallableInstance {\n  /**\n   * Create a processor.\n   */\n  constructor() {\n    // If `Processor()` is called (w/o new), `copy` is called instead.\n    super('copy')\n\n    /**\n     * Compiler to use (deprecated).\n     *\n     * @deprecated\n     *   Use `compiler` instead.\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.Compiler = undefined\n\n    /**\n     * Parser to use (deprecated).\n     *\n     * @deprecated\n     *   Use `parser` instead.\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.Parser = undefined\n\n    // Note: the following fields are considered private.\n    // However, they are needed for tests, and TSC generates an untyped\n    // `private freezeIndex` field for, which trips `type-coverage` up.\n    // Instead, we use `@deprecated` to visualize that they shouldn’t be used.\n    /**\n     * Internal list of configured plugins.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Array<PluginTuple<Array<unknown>>>}\n     */\n    this.attachers = []\n\n    /**\n     * Compiler to use.\n     *\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.compiler = undefined\n\n    /**\n     * Internal state to track where we are while freezing.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {number}\n     */\n    this.freezeIndex = -1\n\n    /**\n     * Internal state to track whether we’re frozen.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {boolean | undefined}\n     */\n    this.frozen = undefined\n\n    /**\n     * Internal state.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Data}\n     */\n    this.namespace = {}\n\n    /**\n     * Parser to use.\n     *\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.parser = undefined\n\n    /**\n     * Internal list of configured transformers.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Pipeline}\n     */\n    this.transformers = trough()\n  }\n\n  /**\n   * Copy a processor.\n   *\n   * @deprecated\n   *   This is a private internal method and should not be used.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   New *unfrozen* processor ({@linkcode Processor}) that is\n   *   configured to work the same as its ancestor.\n   *   When the descendant processor is configured in the future it does not\n   *   affect the ancestral processor.\n   */\n  copy() {\n    // Cast as the type parameters will be the same after attaching.\n    const destination =\n      /** @type {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>} */ (\n        new Processor()\n      )\n    let index = -1\n\n    while (++index < this.attachers.length) {\n      const attacher = this.attachers[index]\n      destination.use(...attacher)\n    }\n\n    destination.data(extend(true, {}, this.namespace))\n\n    return destination\n  }\n\n  /**\n   * Configure the processor with info available to all plugins.\n   * Information is stored in an object.\n   *\n   * Typically, options can be given to a specific plugin, but sometimes it\n   * makes sense to have information shared with several plugins.\n   * For example, a list of HTML elements that are self-closing, which is\n   * needed during all phases.\n   *\n   * > **Note**: setting information cannot occur on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * > **Note**: to register custom data in TypeScript, augment the\n   * > {@linkcode Data} interface.\n   *\n   * @example\n   *   This example show how to get and set info:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   const processor = unified().data('alpha', 'bravo')\n   *\n   *   processor.data('alpha') // => 'bravo'\n   *\n   *   processor.data() // => {alpha: 'bravo'}\n   *\n   *   processor.data({charlie: 'delta'})\n   *\n   *   processor.data() // => {charlie: 'delta'}\n   *   ```\n   *\n   * @template {keyof Data} Key\n   *\n   * @overload\n   * @returns {Data}\n   *\n   * @overload\n   * @param {Data} dataset\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Key} key\n   * @returns {Data[Key]}\n   *\n   * @overload\n   * @param {Key} key\n   * @param {Data[Key]} value\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @param {Data | Key} [key]\n   *   Key to get or set, or entire dataset to set, or nothing to get the\n   *   entire dataset (optional).\n   * @param {Data[Key]} [value]\n   *   Value to set (optional).\n   * @returns {unknown}\n   *   The current processor when setting, the value at `key` when getting, or\n   *   the entire dataset when getting without key.\n   */\n  data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', this.frozen)\n        this.namespace[key] = value\n        return this\n      }\n\n      // Get `key`.\n      return (own.call(this.namespace, key) && this.namespace[key]) || undefined\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', this.frozen)\n      this.namespace = key\n      return this\n    }\n\n    // Get space.\n    return this.namespace\n  }\n\n  /**\n   * Freeze a processor.\n   *\n   * Frozen processors are meant to be extended and not to be configured\n   * directly.\n   *\n   * When a processor is frozen it cannot be unfrozen.\n   * New processors working the same way can be created by calling the\n   * processor.\n   *\n   * It’s possible to freeze processors explicitly by calling `.freeze()`.\n   * Processors freeze automatically when `.parse()`, `.run()`, `.runSync()`,\n   * `.stringify()`, `.process()`, or `.processSync()` are called.\n   *\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   The current processor.\n   */\n  freeze() {\n    if (this.frozen) {\n      return this\n    }\n\n    // Cast so that we can type plugins easier.\n    // Plugins are supposed to be usable on different processors, not just on\n    // this exact processor.\n    const self = /** @type {Processor} */ (/** @type {unknown} */ (this))\n\n    while (++this.freezeIndex < this.attachers.length) {\n      const [attacher, ...options] = this.attachers[this.freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      const transformer = attacher.call(self, ...options)\n\n      if (typeof transformer === 'function') {\n        this.transformers.use(transformer)\n      }\n    }\n\n    this.frozen = true\n    this.freezeIndex = Number.POSITIVE_INFINITY\n\n    return this\n  }\n\n  /**\n   * Parse text to a syntax tree.\n   *\n   * > **Note**: `parse` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `parse` performs the parse phase, not the run phase or other\n   * > phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   file to parse (optional); typically `string` or `VFile`; any value\n   *   accepted as `x` in `new VFile(x)`.\n   * @returns {ParseTree extends undefined ? Node : ParseTree}\n   *   Syntax tree representing `file`.\n   */\n  parse(file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const parser = this.parser || this.Parser\n    assertParser('parse', parser)\n    return parser(String(realFile), realFile)\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * > **Note**: `process` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `process` performs the parse, run, and stringify phases.\n   *\n   * @overload\n   * @param {Compatible | undefined} file\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<VFileWithOutput<CompileResult>>}\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`]; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>> | undefined} [done]\n   *   Callback (optional).\n   * @returns {Promise<VFile> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise a promise, rejected with a fatal error or resolved with the\n   *   processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  process(file, done) {\n    const self = this\n\n    this.freeze()\n    assertParser('process', this.parser || this.Parser)\n    assertCompiler('process', this.compiler || this.Compiler)\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {((file: VFileWithOutput<CompileResult>) => undefined | void) | undefined} resolve\n     * @param {(error: Error | undefined) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      const realFile = vfile(file)\n      // Assume `ParseTree` (the result of the parser) matches `HeadTree` (the\n      // input of the first transform).\n      const parseTree =\n        /** @type {HeadTree extends undefined ? Node : HeadTree} */ (\n          /** @type {unknown} */ (self.parse(realFile))\n        )\n\n      self.run(parseTree, realFile, function (error, tree, file) {\n        if (error || !tree || !file) {\n          return realDone(error)\n        }\n\n        // Assume `TailTree` (the output of the last transform) matches\n        // `CompileTree` (the input of the compiler).\n        const compileTree =\n          /** @type {CompileTree extends undefined ? Node : CompileTree} */ (\n            /** @type {unknown} */ (tree)\n          )\n\n        const compileResult = self.stringify(compileTree, file)\n\n        if (looksLikeAValue(compileResult)) {\n          file.value = compileResult\n        } else {\n          file.result = compileResult\n        }\n\n        realDone(error, /** @type {VFileWithOutput<CompileResult>} */ (file))\n      })\n\n      /**\n       * @param {Error | undefined} error\n       * @param {VFileWithOutput<CompileResult> | undefined} [file]\n       * @returns {undefined}\n       */\n      function realDone(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > **Note**: `processSync` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `processSync` performs the parse, run, and stringify phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @returns {VFileWithOutput<CompileResult>}\n   *   The processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  processSync(file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {VFileWithOutput<CompileResult> | undefined} */\n    let result\n\n    this.freeze()\n    assertParser('processSync', this.parser || this.Parser)\n    assertCompiler('processSync', this.compiler || this.Compiler)\n\n    this.process(file, realDone)\n    assertDone('processSync', 'process', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n\n    return result\n\n    /**\n     * @type {ProcessCallback<VFileWithOutput<CompileResult>>}\n     */\n    function realDone(error, file) {\n      complete = true\n      bail(error)\n      result = file\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * > **Note**: `run` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `run` performs the run phase, not other phases.\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} file\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree>}\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {(\n   *   RunCallback<TailTree extends undefined ? Node : TailTree> |\n   *   Compatible\n   * )} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} [done]\n   *   Callback (optional).\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise, a promise rejected with a fatal error or resolved with the\n   *   transformed tree.\n   */\n  run(tree, file, done) {\n    assertNode(tree)\n    this.freeze()\n\n    const transformers = this.transformers\n\n    if (!done && typeof file === 'function') {\n      done = file\n      file = undefined\n    }\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {(\n     *   ((tree: TailTree extends undefined ? Node : TailTree) => undefined | void) |\n     *   undefined\n     * )} resolve\n     * @param {(error: Error) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      assert(\n        typeof file !== 'function',\n        '`file` can’t be a `done` anymore, we checked'\n      )\n      const realFile = vfile(file)\n      transformers.run(tree, realFile, realDone)\n\n      /**\n       * @param {Error | undefined} error\n       * @param {Node} outputTree\n       * @param {VFile} file\n       * @returns {undefined}\n       */\n      function realDone(error, outputTree, file) {\n        const resultingTree =\n          /** @type {TailTree extends undefined ? Node : TailTree} */ (\n            outputTree || tree\n          )\n\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(resultingTree)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, resultingTree, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > **Note**: `runSync` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `runSync` performs the run phase, not other phases.\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {TailTree extends undefined ? Node : TailTree}\n   *   Transformed tree.\n   */\n  runSync(tree, file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {(TailTree extends undefined ? Node : TailTree) | undefined} */\n    let result\n\n    this.run(tree, file, realDone)\n\n    assertDone('runSync', 'run', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n    return result\n\n    /**\n     * @type {RunCallback<TailTree extends undefined ? Node : TailTree>}\n     */\n    function realDone(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * Compile a syntax tree.\n   *\n   * > **Note**: `stringify` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `stringify` performs the stringify phase, not the run phase\n   * > or other phases.\n   *\n   * @param {CompileTree extends undefined ? Node : CompileTree} tree\n   *   Tree to compile.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {CompileResult extends undefined ? Value : CompileResult}\n   *   Textual representation of the tree (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most compilers\n   *   > return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  stringify(tree, file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const compiler = this.compiler || this.Compiler\n    assertCompiler('stringify', compiler)\n    assertNode(tree)\n\n    return compiler(tree, realFile)\n  }\n\n  /**\n   * Configure the processor to use a plugin, a list of usable values, or a\n   * preset.\n   *\n   * If the processor is already using a plugin, the previous plugin\n   * configuration is changed based on the options that are passed in.\n   * In other words, the plugin is not added a second time.\n   *\n   * > **Note**: `use` cannot be called on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * @example\n   *   There are many ways to pass plugins to `.use()`.\n   *   This example gives an overview:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   unified()\n   *     // Plugin with options:\n   *     .use(pluginA, {x: true, y: true})\n   *     // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):\n   *     .use(pluginA, {y: false, z: true})\n   *     // Plugins:\n   *     .use([pluginB, pluginC])\n   *     // Two plugins, the second with options:\n   *     .use([pluginD, [pluginE, {}]])\n   *     // Preset with plugins and settings:\n   *     .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})\n   *     // Settings only:\n   *     .use({settings: {position: false}})\n   *   ```\n   *\n   * @template {Array<unknown>} [Parameters=[]]\n   * @template {Node | string | undefined} [Input=undefined]\n   * @template [Output=Input]\n   *\n   * @overload\n   * @param {Preset | null | undefined} [preset]\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {PluggableList} list\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Plugin<Parameters, Input, Output>} plugin\n   * @param {...(Parameters | [boolean])} parameters\n   * @returns {UsePlugin<ParseTree, HeadTree, TailTree, CompileTree, CompileResult, Input, Output>}\n   *\n   * @param {PluggableList | Plugin | Preset | null | undefined} value\n   *   Usable value.\n   * @param {...unknown} parameters\n   *   Parameters, when a plugin is given as a usable value.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   Current processor.\n   */\n  use(value, ...parameters) {\n    const attachers = this.attachers\n    const namespace = this.namespace\n\n    assertUnfrozen('use', this.frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, parameters)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    return this\n\n    /**\n     * @param {Pluggable} value\n     * @returns {undefined}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value, [])\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...parameters] =\n            /** @type {PluginTuple<Array<unknown>>} */ (value)\n          addPlugin(plugin, parameters)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {undefined}\n     */\n    function addPreset(result) {\n      if (!('plugins' in result) && !('settings' in result)) {\n        throw new Error(\n          'Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither'\n        )\n      }\n\n      addList(result.plugins)\n\n      if (result.settings) {\n        namespace.settings = extend(true, namespace.settings, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList | null | undefined} plugins\n     * @returns {undefined}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {Array<unknown>} parameters\n     * @returns {undefined}\n     */\n    function addPlugin(plugin, parameters) {\n      let index = -1\n      let entryIndex = -1\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entryIndex = index\n          break\n        }\n      }\n\n      if (entryIndex === -1) {\n        attachers.push([plugin, ...parameters])\n      }\n      // Only set if there was at least a `primary` value, otherwise we’d change\n      // `arguments.length`.\n      else if (parameters.length > 0) {\n        let [primary, ...rest] = parameters\n        const currentPrimary = attachers[entryIndex][1]\n        if (isPlainObj(currentPrimary) && isPlainObj(primary)) {\n          primary = extend(true, currentPrimary, primary)\n        }\n\n        attachers[entryIndex] = [plugin, primary, ...rest]\n      }\n    }\n  }\n}\n\n// Note: this returns a *callable* instance.\n// That’s why it’s documented as a function.\n/**\n * Create a new processor.\n *\n * @example\n *   This example shows how a new processor can be created (from `remark`) and linked\n *   to **stdin**(4) and **stdout**(4).\n *\n *   ```js\n *   import process from 'node:process'\n *   import concatStream from 'concat-stream'\n *   import {remark} from 'remark'\n *\n *   process.stdin.pipe(\n *     concatStream(function (buf) {\n *       process.stdout.write(String(remark().processSync(buf)))\n *     })\n *   )\n *   ```\n *\n * @returns\n *   New *unfrozen* processor (`processor`).\n *\n *   This processor is configured to work the same as its ancestor.\n *   When the descendant processor is configured in the future it does not\n *   affect the ancestral processor.\n */\nexport const unified = new Processor().freeze()\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is Value}\n */\nfunction looksLikeAValue(value) {\n  return typeof value === 'string' || isUint8Array(value)\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","/**\n * @import {Element, Nodes, Parents, Root} from 'hast'\n * @import {Root as MdastRoot} from 'mdast'\n * @import {ComponentType, JSX, ReactElement, ReactNode} from 'react'\n * @import {Options as RemarkRehypeOptions} from 'remark-rehype'\n * @import {BuildVisitor} from 'unist-util-visit'\n * @import {PluggableList, Processor} from 'unified'\n */\n\n/**\n * @callback AllowElement\n *   Filter elements.\n * @param {Readonly<Element>} element\n *   Element to check.\n * @param {number} index\n *   Index of `element` in `parent`.\n * @param {Readonly<Parents> | undefined} parent\n *   Parent of `element`.\n * @returns {boolean | null | undefined}\n *   Whether to allow `element` (default: `false`).\n */\n\n/**\n * @typedef ExtraProps\n *   Extra fields we pass.\n * @property {Element | undefined} [node]\n *   passed when `passNode` is on.\n */\n\n/**\n * @typedef {{\n *   [Key in keyof JSX.IntrinsicElements]?: ComponentType<JSX.IntrinsicElements[Key] & ExtraProps> | keyof JSX.IntrinsicElements\n * }} Components\n *   Map tag names to components.\n */\n\n/**\n * @typedef Deprecation\n *   Deprecation.\n * @property {string} from\n *   Old field.\n * @property {string} id\n *   ID in readme.\n * @property {keyof Options} [to]\n *   New field.\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {AllowElement | null | undefined} [allowElement]\n *   Filter elements (optional);\n *   `allowedElements` / `disallowedElements` is used first.\n * @property {ReadonlyArray<string> | null | undefined} [allowedElements]\n *   Tag names to allow (default: all tag names);\n *   cannot combine w/ `disallowedElements`.\n * @property {string | null | undefined} [children]\n *   Markdown.\n * @property {Components | null | undefined} [components]\n *   Map tag names to components.\n * @property {ReadonlyArray<string> | null | undefined} [disallowedElements]\n *   Tag names to disallow (default: `[]`);\n *   cannot combine w/ `allowedElements`.\n * @property {PluggableList | null | undefined} [rehypePlugins]\n *   List of rehype plugins to use.\n * @property {PluggableList | null | undefined} [remarkPlugins]\n *   List of remark plugins to use.\n * @property {Readonly<RemarkRehypeOptions> | null | undefined} [remarkRehypeOptions]\n *   Options to pass through to `remark-rehype`.\n * @property {boolean | null | undefined} [skipHtml=false]\n *   Ignore HTML in markdown completely (default: `false`).\n * @property {boolean | null | undefined} [unwrapDisallowed=false]\n *   Extract (unwrap) what’s in disallowed elements (default: `false`);\n *   normally when say `strong` is not allowed, it and it’s children are dropped,\n *   with `unwrapDisallowed` the element itself is replaced by its children.\n * @property {UrlTransform | null | undefined} [urlTransform]\n *   Change URLs (default: `defaultUrlTransform`)\n */\n\n/**\n * @typedef HooksOptionsOnly\n *   Configuration specifically for {@linkcode MarkdownHooks}.\n * @property {ReactNode | null | undefined} [fallback]\n *   Content to render while the processor processing the markdown (optional).\n */\n\n/**\n * @typedef {Options & HooksOptionsOnly} HooksOptions\n *   Configuration for {@linkcode MarkdownHooks};\n *   extends the regular {@linkcode Options} with a `fallback` prop.\n */\n\n/**\n * @callback UrlTransform\n *   Transform all URLs.\n * @param {string} url\n *   URL.\n * @param {string} key\n *   Property name (example: `'href'`).\n * @param {Readonly<Element>} node\n *   Node.\n * @returns {string | null | undefined}\n *   Transformed URL (optional).\n */\n\nimport {unreachable} from 'devlop'\nimport {toJsxRuntime} from 'hast-util-to-jsx-runtime'\nimport {urlAttributes} from 'html-url-attributes'\nimport {Fragment, jsx, jsxs} from 'react/jsx-runtime'\nimport {useEffect, useState} from 'react'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport {unified} from 'unified'\nimport {visit} from 'unist-util-visit'\nimport {VFile} from 'vfile'\n\nconst changelog =\n  'https://github.com/remarkjs/react-markdown/blob/main/changelog.md'\n\n/** @type {PluggableList} */\nconst emptyPlugins = []\n/** @type {Readonly<RemarkRehypeOptions>} */\nconst emptyRemarkRehypeOptions = {allowDangerousHtml: true}\nconst safeProtocol = /^(https?|ircs?|mailto|xmpp)$/i\n\n// Mutable because we `delete` any time it’s used and a message is sent.\n/** @type {ReadonlyArray<Readonly<Deprecation>>} */\nconst deprecations = [\n  {from: 'astPlugins', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'allowDangerousHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {\n    from: 'allowNode',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowElement'\n  },\n  {\n    from: 'allowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowedElements'\n  },\n  {from: 'className', id: 'remove-classname'},\n  {\n    from: 'disallowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'disallowedElements'\n  },\n  {from: 'escapeHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'includeElementIndex', id: '#remove-includeelementindex'},\n  {\n    from: 'includeNodeIndex',\n    id: 'change-includenodeindex-to-includeelementindex'\n  },\n  {from: 'linkTarget', id: 'remove-linktarget'},\n  {from: 'plugins', id: 'change-plugins-to-remarkplugins', to: 'remarkPlugins'},\n  {from: 'rawSourcePos', id: '#remove-rawsourcepos'},\n  {from: 'renderers', id: 'change-renderers-to-components', to: 'components'},\n  {from: 'source', id: 'change-source-to-children', to: 'children'},\n  {from: 'sourcePos', id: '#remove-sourcepos'},\n  {from: 'transformImageUri', id: '#add-urltransform', to: 'urlTransform'},\n  {from: 'transformLinkUri', id: '#add-urltransform', to: 'urlTransform'}\n]\n\n/**\n * Component to render markdown.\n *\n * This is a synchronous component.\n * When using async plugins,\n * see {@linkcode MarkdownAsync} or {@linkcode MarkdownHooks}.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {ReactElement}\n *   React element.\n */\nexport function Markdown(options) {\n  const processor = createProcessor(options)\n  const file = createFile(options)\n  return post(processor.runSync(processor.parse(file), file), options)\n}\n\n/**\n * Component to render markdown with support for async plugins\n * through async/await.\n *\n * Components returning promises are supported on the server.\n * For async support on the client,\n * see {@linkcode MarkdownHooks}.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {Promise<ReactElement>}\n *   Promise to a React element.\n */\nexport async function MarkdownAsync(options) {\n  const processor = createProcessor(options)\n  const file = createFile(options)\n  const tree = await processor.run(processor.parse(file), file)\n  return post(tree, options)\n}\n\n/**\n * Component to render markdown with support for async plugins through hooks.\n *\n * This uses `useEffect` and `useState` hooks.\n * Hooks run on the client and do not immediately render something.\n * For async support on the server,\n * see {@linkcode MarkdownAsync}.\n *\n * @param {Readonly<HooksOptions>} options\n *   Props.\n * @returns {ReactNode}\n *   React node.\n */\nexport function MarkdownHooks(options) {\n  const processor = createProcessor(options)\n  const [error, setError] = useState(\n    /** @type {Error | undefined} */ (undefined)\n  )\n  const [tree, setTree] = useState(/** @type {Root | undefined} */ (undefined))\n\n  useEffect(\n    function () {\n      let cancelled = false\n      const file = createFile(options)\n\n      processor.run(processor.parse(file), file, function (error, tree) {\n        if (!cancelled) {\n          setError(error)\n          setTree(tree)\n        }\n      })\n\n      /**\n       * @returns {undefined}\n       *   Nothing.\n       */\n      return function () {\n        cancelled = true\n      }\n    },\n    [\n      options.children,\n      options.rehypePlugins,\n      options.remarkPlugins,\n      options.remarkRehypeOptions\n    ]\n  )\n\n  if (error) throw error\n\n  return tree ? post(tree, options) : options.fallback\n}\n\n/**\n * Set up the `unified` processor.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {Processor<MdastRoot, MdastRoot, Root, undefined, undefined>}\n *   Result.\n */\nfunction createProcessor(options) {\n  const rehypePlugins = options.rehypePlugins || emptyPlugins\n  const remarkPlugins = options.remarkPlugins || emptyPlugins\n  const remarkRehypeOptions = options.remarkRehypeOptions\n    ? {...options.remarkRehypeOptions, ...emptyRemarkRehypeOptions}\n    : emptyRemarkRehypeOptions\n\n  const processor = unified()\n    .use(remarkParse)\n    .use(remarkPlugins)\n    .use(remarkRehype, remarkRehypeOptions)\n    .use(rehypePlugins)\n\n  return processor\n}\n\n/**\n * Set up the virtual file.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {VFile}\n *   Result.\n */\nfunction createFile(options) {\n  const children = options.children || ''\n  const file = new VFile()\n\n  if (typeof children === 'string') {\n    file.value = children\n  } else {\n    unreachable(\n      'Unexpected value `' +\n        children +\n        '` for `children` prop, expected `string`'\n    )\n  }\n\n  return file\n}\n\n/**\n * Process the result from unified some more.\n *\n * @param {Nodes} tree\n *   Tree.\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {ReactElement}\n *   React element.\n */\nfunction post(tree, options) {\n  const allowedElements = options.allowedElements\n  const allowElement = options.allowElement\n  const components = options.components\n  const disallowedElements = options.disallowedElements\n  const skipHtml = options.skipHtml\n  const unwrapDisallowed = options.unwrapDisallowed\n  const urlTransform = options.urlTransform || defaultUrlTransform\n\n  for (const deprecation of deprecations) {\n    if (Object.hasOwn(options, deprecation.from)) {\n      unreachable(\n        'Unexpected `' +\n          deprecation.from +\n          '` prop, ' +\n          (deprecation.to\n            ? 'use `' + deprecation.to + '` instead'\n            : 'remove it') +\n          ' (see <' +\n          changelog +\n          '#' +\n          deprecation.id +\n          '> for more info)'\n      )\n    }\n  }\n\n  if (allowedElements && disallowedElements) {\n    unreachable(\n      'Unexpected combined `allowedElements` and `disallowedElements`, expected one or the other'\n    )\n  }\n\n  visit(tree, transform)\n\n  return toJsxRuntime(tree, {\n    Fragment,\n    components,\n    ignoreInvalidStyle: true,\n    jsx,\n    jsxs,\n    passKeys: true,\n    passNode: true\n  })\n\n  /** @type {BuildVisitor<Root>} */\n  function transform(node, index, parent) {\n    if (node.type === 'raw' && parent && typeof index === 'number') {\n      if (skipHtml) {\n        parent.children.splice(index, 1)\n      } else {\n        parent.children[index] = {type: 'text', value: node.value}\n      }\n\n      return index\n    }\n\n    if (node.type === 'element') {\n      /** @type {string} */\n      let key\n\n      for (key in urlAttributes) {\n        if (\n          Object.hasOwn(urlAttributes, key) &&\n          Object.hasOwn(node.properties, key)\n        ) {\n          const value = node.properties[key]\n          const test = urlAttributes[key]\n          if (test === null || test.includes(node.tagName)) {\n            node.properties[key] = urlTransform(String(value || ''), key, node)\n          }\n        }\n      }\n    }\n\n    if (node.type === 'element') {\n      let remove = allowedElements\n        ? !allowedElements.includes(node.tagName)\n        : disallowedElements\n          ? disallowedElements.includes(node.tagName)\n          : false\n\n      if (!remove && allowElement && typeof index === 'number') {\n        remove = !allowElement(node, index, parent)\n      }\n\n      if (remove && parent && typeof index === 'number') {\n        if (unwrapDisallowed && node.children) {\n          parent.children.splice(index, 1, ...node.children)\n        } else {\n          parent.children.splice(index, 1)\n        }\n\n        return index\n      }\n    }\n  }\n}\n\n/**\n * Make a URL safe.\n *\n * @satisfies {UrlTransform}\n * @param {string} value\n *   URL.\n * @returns {string}\n *   Safe URL.\n */\nexport function defaultUrlTransform(value) {\n  // Same as:\n  // <https://github.com/micromark/micromark/blob/929275e/packages/micromark-util-sanitize-uri/dev/index.js#L34>\n  // But without the `encode` part.\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n\n  if (\n    // If there is no protocol, it’s relative.\n    colon === -1 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash !== -1 && colon > slash) ||\n    (questionMark !== -1 && colon > questionMark) ||\n    (numberSign !== -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    safeProtocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n\n  return ''\n}\n"],"names":["AssertionError","message","actual","expected","operator","generated","__publicField","ok","value","assert","unreachable","bool","defaultMessage","userMessage","stringify","values","options","settings","nameRe","nameReJsx","emptyOptions","name","re","whitespace","thing","empty","Schema","property","normal","space","merge","definitions","definition","normalize","Info","attribute","powers","boolean","increment","booleanish","overloadedBoolean","number","spaceSeparated","commaSeparated","commaOrSpaceSeparated","checks","types","DefinedInfo","mask","index","mark","check","key","create","properties","normals","info","aria","_","caseSensitiveTransform","attributes","caseInsensitiveTransform","html","svg","xlink","xmlns","xml","hastToReact","cap","dash","valid","find","schema","Type","rest","camelcase","dashes","kebab","$0","htmlBase","svgBase","COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","NEWLINE","FORWARD_SLASH","ASTERISK","EMPTY_STRING","TYPE_COMMENT","TYPE_DECLARATION","inlineStyleParser","style","lineno","column","updatePosition","str","lines","i","position","start","node","Position","error","msg","err","match","m","comments","rules","c","comment","pos","declaration","prop","val","ret","trim","declarations","decls","decl","__importDefault","this","mod","cjs","StyleToObject","inline_style_parser_1","require$$0","iterator","styleObject","hasIterator","utilities","CUSTOM_PROPERTY_REGEX","HYPHEN_REGEX","NO_HYPHEN_REGEX","VENDOR_PREFIX_REGEX","MS_VENDOR_PREFIX_REGEX","skipCamelCase","capitalize","character","trimHyphen","prefix","camelCase","style_to_object_1","utilities_1","require$$1","StyleToJS","output","pointEnd","point","pointStart","type","end","stringifyPosition","VFileMessage","causeOrReason","optionsOrParentOrPlace","origin","reason","legacyCause","parent","own","emptyMap","tableElements","tableCellElement","docs","toJsxRuntime","tree","filePath","developmentCreate","productionCreate","state","result","one","element","mdxExpression","mdxJsxElement","mdxEsm","root","text","parentSchema","findComponentFromName","props","createElementProps","children","createChildren","child","addNode","addChildren","expression","crashEstree","createJsxElementProps","jsx","jsxs","fn","jsxDEV","isStaticChildren","alignValue","createProperty","objectExpression","countsByName","count","commas","spaces","parseStyle","transformStylesToCssCasing","styleToJs","cause","allowExpression","identifiers","isIdentifierName","place","domCasing","cssCasing","from","transformStyleToCssCasing","to","toDash","urlAttributes","toString","includeImageAlt","includeHtml","all","decodeNamedCharacterReference","characterReference","codes","constants","splice","list","remove","items","chunkStart","parameters","push","hasOwnProperty","combineExtensions","extensions","syntaxExtension","extension","hook","left","right","code","constructs","existing","before","decodeNumericCharacterReference","base","normalizeIdentifier","asciiAlpha","regexCheck","asciiAlphanumeric","asciiAtext","asciiControl","asciiDigit","asciiHexDigit","asciiPunctuation","markdownLineEnding","markdownLineEndingOrSpace","markdownSpace","unicodePunctuation","unicodeWhitespace","regex","normalizeUri","skip","replace","next","factorySpace","effects","max","limit","size","content","initializeContent","contentStart","afterContentStartConstruct","paragraphInitial","previous","lineStart","token","data","document","initializeDocument","containerConstruct","tokenizeContainer","self","stack","continued","childFlow","childToken","lineStartOffset","item","documentContinue","checkNewContainers","closeFlow","indexBeforeExits","indexBeforeFlow","exitContainers","documentContinued","flowStart","thereIsANewContainer","thereIsNoNewContainer","containerContinue","flowContinue","writeToChild","endOfFile","stream","seen","entry","nok","classifyCharacter","resolveAll","events","context","called","resolve","attention","resolveAllAttention","tokenizeAttention","open","group","openingSequence","closingSequence","use","nextEvents","offset","movePoint","attentionMarkers","marker","inside","after","close","autolink","tokenizeAutolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","blankLine","tokenizeBlankLine","blockQuote","tokenizeBlockQuoteContinuation","exit","tokenizeBlockQuoteStart","contStart","contBefore","characterEscape","tokenizeCharacterEscape","tokenizeCharacterReference","test","numeric","nonLazyContinuation","tokenizeNonLazyContinuation","codeFenced","tokenizeCodeFenced","closeStart","tokenizeCloseStart","initialPrefix","sizeOpen","beforeSequenceOpen","tail","sequenceOpen","infoBefore","atNonLazyBreak","metaBefore","meta","contentBefore","beforeContentChunk","contentChunk","startBefore","beforeSequenceClose","sequenceClose","sequenceCloseAfter","codeIndented","tokenizeCodeIndented","furtherStart","tokenizeFurtherStart","afterPrefix","atBreak","codeText","resolveCodeText","tokenizeCodeText","tailExitIndex","headEnterIndex","enter","between","SpliceBuffer","initial","stop","deleteCount","removed","chunkedPush","subtokenize","eventsArray","jumps","event","lineIndex","otherIndex","otherEvent","subevents","more","subcontent","eventIndex","startPosition","startPositions","tokenizer","childEvents","gaps","current","adjust","breaks","slice","resolveContent","tokenizeContent","continuationConstruct","tokenizeContinuation","chunkInside","contentEnd","contentContinue","startLookahead","prefixed","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","enclosedBefore","raw","enclosed","enclosedEscape","rawEscape","factoryLabel","markerType","labelInside","labelEscape","factoryTitle","begin","escape","factoryWhitespace","tokenizeDefinition","titleBefore","tokenizeTitleBefore","identifier","labelAfter","markerAfter","destinationBefore","destinationAfter","afterWhitespace","beforeMarker","titleAfter","titleAfterOptionalWhitespace","hardBreakEscape","tokenizeHardBreakEscape","headingAtx","resolveHeadingAtx","tokenizeHeadingAtx","sequenceFurther","htmlBlockNames","htmlRawNames","htmlFlow","resolveToHtmlFlow","tokenizeHtmlFlow","blankLineBefore","tokenizeBlankLineBefore","nonLazyContinuationStart","tokenizeNonLazyContinuationStart","closingTag","buffer","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","tagName","commentOpenInside","cdataOpenInside","continuation","slash","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationAfter","continuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","htmlText","tokenizeHtmlText","returnState","instruction","tagOpen","commentEnd","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelEnd","resolveAllLabelEnd","resolveToLabelEnd","tokenizeLabelEnd","resourceConstruct","tokenizeResource","referenceFullConstruct","tokenizeReferenceFull","referenceCollapsedConstruct","tokenizeReferenceCollapsed","newEvents","media","label","labelStart","defined","labelEndNok","labelEndOk","referenceNotFull","resourceStart","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFull","referenceFullAfter","referenceFullMissing","referenceCollapsedStart","referenceCollapsedOpen","labelStartImage","tokenizeLabelStartImage","labelStartLink","tokenizeLabelStartLink","lineEnding","tokenizeLineEnding","thematicBreak","tokenizeThematicBreak","sequence","tokenizeListContinuation","tokenizeListEnd","tokenizeListStart","listItemPrefixWhitespaceConstruct","tokenizeListItemPrefixWhitespace","indentConstruct","tokenizeIndent","initialSize","kind","atMarker","onBlank","endOfPrefix","otherPrefix","notBlank","notInCurrentItem","setextUnderline","resolveToSetextUnderline","tokenizeSetextUnderline","heading","paragraph","flow","initializeFlow","atBlankEnding","afterConstruct","resolver","createResolver","string","initializeFactory","field","resolveAllLineSuffixes","initializeText","notText","extraResolver","resolveAllText","chunks","bufferIndex","tabs","chunk","contentInitial","flowInitial","insideSpan","resolveText","disable","s","h","d","w","y","ms","parse","fmtLong","fmtShort","n","msAbs","plural","isPlural","setup","env","createDebug","coerce","enable","enabled","destroy","selectColor","namespace","hash","prevTime","enableOverride","namespacesCache","enabledCache","debug","args","curr","format","formatter","extend","v","delimiter","newDebug","namespaces","split","ns","matchesTemplate","search","template","searchIndex","templateIndex","starIndex","matchIndex","common","exports","formatArgs","save","load","useColors","localstorage","warned","module","lastC","r","define_process_env_default","formatters","createTokenizer","parser","initialize","columnStart","resolveAllConstructs","consumed","constructFactory","onsuccessfulconstruct","onsuccessfulcheck","consume","defineSkip","now","sliceSerialize","sliceStream","write","expectedCode","main","addResult","expandTabs","serializeChunks","sliceChunks","_bufferIndex","_index","line","accountForPotentialSkip","chunkIndex","go","fields","construct","onreturn","bogusState","listOfConstructs","constructIndex","currentConstruct","handleListOfConstructs","handleMapOfConstructs","map","handleConstruct","store","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","restore","startIndex","startBufferIndex","endIndex","endBufferIndex","view","head","atTab","defaultConstructs","creator","postprocess","preprocess","atCarriageReturn","preprocessor","encoding","endPosition","characterEscapeOrReference","decodeString","decode","$1","$2","hex","fromMarkdown","compiler","config","opener","link","onenterdata","codeFlow","emphasis","hardBreak","image","listItem","onenterlistitemvalue","onenterlistordered","onenterreference","strong","closer","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","onexitdata","onexitcharacterreferencemarker","onexitcharacterreferencevalue","onexitcharacterreference","onexitcodefenced","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","onexitresource","onexitsetextheading","onexitsetextheadinglinesequence","onexitsetextheadingtext","configure","compile","resume","listStack","prepareList","handler","defaultOnError","length","containerBalance","listSpread","firstBlankLineIndex","tailIndex","tailEvent","and","errorHandler","onExitError","ancestor","depth","siblings","referenceType","fragment","combined","remarkParse","doc","blockquote","strikethrough","footnoteReference","clobberPrefix","id","safeId","counter","reuseCounter","sup","revert","subtype","suffix","contents","imageReference","inlineCode","linkReference","results","loose","listLoose","listItemLoose","spread","table","rows","firstRow","tableContent","body","tableRow","align","cellIndex","cells","cell","tableCell","tab","trimLines","source","last","trimLine","handlers","ignore","VOID","PRIMITIVE","ARRAY","OBJECT","DATE","REGEXP","MAP","SET","ERROR","BIGINT","deserializer","$","as","out","unpair","arr","object","flags","set","deserialize","serialized","EMPTY","keys","typeOf","asString","shouldSkip","TYPE","serializer","strict","json","pair","entries","serialize","lossy","structuredClone$1","any","defaultFootnoteBackContent","rereferenceIndex","defaultFootnoteBackLabel","referenceIndex","footer","footnoteBackContent","footnoteBackLabel","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","listItems","backReferences","counts","tailTail","structuredClone","convert","castFactory","anyFactory","propsFactory","typeFactory","tests","checkAsRecord","nodeAsRecord","testFunction","looksLikeANode","CONTINUE","EXIT","SKIP","visitParents","visitor","reverse","is","step","factory","parents","visit","subresult","grandparents","toResult","nodeAsParent","testOrVisitor","visitorOrReverse","maybeReverse","overload","createState","definitionById","footnoteById","footnoteCounts","defaultHandlers","applyData","patch","wrap","handle","shallow","defaultUnknownHandler","nodes","trimMarkdownSpaceStart","hName","hChildren","hProperties","toHast","foot","remarkRehype","destination","file","hastTree","bail","hasOwn","toStr","defineProperty","gOPD","isArray","isPlainObject","obj","hasOwnConstructor","hasIsPrototypeOf","setProperty","target","getProperty","src","copy","copyIsArray","clone","deep","prototype","trough","fns","pipeline","run","middlewareIndex","callback","middelware","middleware","wrapped","fnExpectsCallback","done","exception","then","minpath","basename","dirname","extname","join","path","assertPath","seenNonSlash","firstNonSlashEnd","extnameIndex","unmatchedSlash","startPart","startDot","preDotState","segments","joined","absolute","normalizeString","allowAboveRoot","lastSegmentLength","lastSlash","dots","lastSlashIndex","minproc","cwd","isUrl","fileUrlOrPath","urlToPath","getPathFromURLPosix","url","pathname","third","order","VFile","isUint8Array","assertNonEmpty","assertPart","stem","part","CallableInstance","proto","apply","Processor","attacher","assertUnfrozen","transformer","realFile","vfile","assertParser","assertCompiler","executor","reject","parseTree","realDone","compileTree","compileResult","looksLikeAValue","complete","assertDone","assertNode","transformers","outputTree","resultingTree","attachers","addPlugin","addList","addPreset","add","plugin","plugins","entryIndex","primary","currentPrimary","isPlainObj","unified","frozen","asyncName","looksLikeAVFile","changelog","emptyPlugins","emptyRemarkRehypeOptions","safeProtocol","deprecations","Markdown","processor","createProcessor","createFile","post","rehypePlugins","remarkPlugins","remarkRehypeOptions","allowedElements","allowElement","components","disallowedElements","skipHtml","unwrapDisallowed","urlTransform","defaultUrlTransform","deprecation","transform","Fragment","colon","questionMark","numberSign"],"mappings":"4NAOA,MAAMA,WAAuB,KAAM,CAqBjC,YAAYC,EAASC,EAAQC,EAAUC,EAAUC,EAAW,CAC1D,MAAMJ,CAAO,EArBfK,GAAA,YAA6B,aAC7BA,GAAA,YAA6B,iBAsBvB,MAAM,mBACR,MAAM,kBAAkB,KAAM,KAAK,WAAW,EAMhD,KAAK,OAASJ,EAKd,KAAK,SAAWC,EAKhB,KAAK,UAAYE,EAKjB,KAAK,SAAWD,CAClB,CACF,CA6HO,SAASG,EAAGC,EAAOP,EAAS,CACjCQ,GACE,EAAQD,EACR,GACA,GACA,KACA,8BACAP,CACJ,CACA,CAeO,SAASS,GAAYT,EAAS,CACnCQ,GAAO,GAAO,GAAO,GAAM,KAAM,cAAeR,CAAO,CACzD,CAmBA,SAASQ,GAAOE,EAAMT,EAAQC,EAAUC,EAAUQ,EAAgBC,EAAa,CAC7E,GAAI,CAACF,EACH,MAAME,aAAuB,MACzBA,EACA,IAAIb,GACFa,GAAeD,EACfV,EACAC,EACAC,EACA,CAACS,CACX,CAEA,CCjLO,SAASC,GAAUC,EAAQC,EAAS,CACzC,MAAMC,EAAsB,CAAA,EAK5B,OAFcF,EAAOA,EAAO,OAAS,CAAC,IAAM,GAAK,CAAC,GAAGA,EAAQ,EAAE,EAAIA,GAGhE,MACEE,EAAS,SAAW,IAAM,IACzB,KACCA,EAAS,UAAY,GAAQ,GAAK,IAC3C,EACK,KAAI,CACT,CC/DA,MAAMC,GAAS,0DACTC,GAAY,2DAGZC,GAAe,CAAA,EA0Cd,SAASC,GAAKA,EAAML,EAAS,CAGlC,OAF4BI,GACR,IAAMD,GAAYD,IAC5B,KAAKG,CAAI,CACrB,CCtDA,MAAMC,GAAK,eAaJ,SAASC,GAAWC,EAAO,CAChC,OAAO,OAAOA,GAAU,SACpBA,EAAM,OAAS,OACbC,GAAMD,EAAM,KAAK,EACjB,GACFC,GAAMD,CAAK,CACjB,CAMA,SAASC,GAAMjB,EAAO,CACpB,OAAOA,EAAM,QAAQc,GAAI,EAAE,IAAM,EACnC,CC5BO,MAAMI,EAAO,CAWlB,YAAYC,EAAUC,EAAQC,EAAO,CACnC,KAAK,OAASD,EACd,KAAK,SAAWD,EAEZE,IACF,KAAK,MAAQA,EAEjB,CACF,CAEAH,GAAO,UAAU,OAAS,CAAA,EAC1BA,GAAO,UAAU,SAAW,CAAA,EAC5BA,GAAO,UAAU,MAAQ,OCdlB,SAASI,GAAMC,EAAaF,EAAO,CAExC,MAAMF,EAAW,CAAA,EAEXC,EAAS,CAAA,EAEf,UAAWI,KAAcD,EACvB,OAAO,OAAOJ,EAAUK,EAAW,QAAQ,EAC3C,OAAO,OAAOJ,EAAQI,EAAW,MAAM,EAGzC,OAAO,IAAIN,GAAOC,EAAUC,EAAQC,CAAK,CAC3C,CCjBO,SAASI,GAAUzB,EAAO,CAC/B,OAAOA,EAAM,YAAW,CAC1B,CCNO,MAAM0B,EAAK,CAShB,YAAYP,EAAUQ,EAAW,CAC/B,KAAK,UAAYA,EACjB,KAAK,SAAWR,CAClB,CACF,CAEAO,GAAK,UAAU,UAAY,GAC3BA,GAAK,UAAU,WAAa,GAC5BA,GAAK,UAAU,QAAU,GACzBA,GAAK,UAAU,sBAAwB,GACvCA,GAAK,UAAU,eAAiB,GAChCA,GAAK,UAAU,QAAU,GACzBA,GAAK,UAAU,gBAAkB,GACjCA,GAAK,UAAU,OAAS,GACxBA,GAAK,UAAU,kBAAoB,GACnCA,GAAK,UAAU,SAAW,GAC1BA,GAAK,UAAU,eAAiB,GAChCA,GAAK,UAAU,MAAQ,OC/BvB,IAAIE,GAAS,EAEN,MAAMC,EAAUC,GAAS,EACnBC,EAAaD,GAAS,EACtBE,GAAoBF,GAAS,EAC7BG,EAASH,GAAS,EAClBI,EAAiBJ,GAAS,EAC1BK,GAAiBL,GAAS,EAC1BM,GAAwBN,GAAS,EAE9C,SAASA,IAAY,CACnB,MAAO,IAAK,EAAEF,EAChB,sNCLMS,GACJ,OAAO,KAAKC,EAAK,EAGZ,MAAMC,WAAoBb,EAAK,CAcpC,YAAYP,EAAUQ,EAAWa,EAAMnB,EAAO,CAC5C,IAAIoB,EAAQ,GAMZ,GAJA,MAAMtB,EAAUQ,CAAS,EAEzBe,GAAK,KAAM,QAASrB,CAAK,EAErB,OAAOmB,GAAS,SAClB,KAAO,EAAEC,EAAQJ,GAAO,QAAQ,CAC9B,MAAMM,EAAQN,GAAOI,CAAK,EAC1BC,GAAK,KAAML,GAAOI,CAAK,GAAID,EAAOF,GAAMK,CAAK,KAAOL,GAAMK,CAAK,CAAC,CAClE,CAEJ,CACF,CAEAJ,GAAY,UAAU,QAAU,GAchC,SAASG,GAAKnC,EAAQqC,EAAK5C,EAAO,CAC5BA,IACFO,EAAOqC,CAAG,EAAI5C,EAElB,CCnBO,SAAS6C,GAAOrB,EAAY,CAEjC,MAAMsB,EAAa,CAAA,EAEbC,EAAU,CAAA,EAEhB,SAAW,CAAC5B,EAAUnB,CAAK,IAAK,OAAO,QAAQwB,EAAW,UAAU,EAAG,CACrE,MAAMwB,EAAO,IAAIT,GACfpB,EACAK,EAAW,UAAUA,EAAW,YAAc,CAAA,EAAIL,CAAQ,EAC1DnB,EACAwB,EAAW,KACjB,EAGMA,EAAW,iBACXA,EAAW,gBAAgB,SAASL,CAAQ,IAE5C6B,EAAK,gBAAkB,IAGzBF,EAAW3B,CAAQ,EAAI6B,EAEvBD,EAAQtB,GAAUN,CAAQ,CAAC,EAAIA,EAC/B4B,EAAQtB,GAAUuB,EAAK,SAAS,CAAC,EAAI7B,CACvC,CAEA,OAAO,IAAID,GAAO4B,EAAYC,EAASvB,EAAW,KAAK,CACzD,CCjEO,MAAMyB,GAAOJ,GAAO,CACzB,WAAY,CACV,qBAAsB,KACtB,WAAYd,EACZ,iBAAkB,KAClB,SAAUA,EACV,YAAaA,EACb,aAAcE,EACd,aAAcA,EACd,YAAaA,EACb,aAAcC,EACd,YAAa,KACb,gBAAiBA,EACjB,YAAa,KACb,aAAcH,EACd,eAAgBG,EAChB,iBAAkB,KAClB,aAAcH,EACd,WAAYG,EACZ,YAAaH,EACb,aAAc,KACd,WAAYA,EACZ,YAAa,KACb,iBAAkB,KAClB,UAAW,KACX,eAAgBG,EAChB,UAAWD,EACX,SAAU,KACV,UAAWF,EACX,cAAeA,EACf,oBAAqBA,EACrB,gBAAiB,KACjB,SAAUG,EACV,gBAAiB,KACjB,aAAcD,EACd,YAAaF,EACb,aAAcA,EACd,aAAc,KACd,aAAcA,EACd,oBAAqBG,EACrB,aAAcD,EACd,aAAcA,EACd,YAAaA,EACb,aAAcF,EACd,YAAaE,EACb,SAAU,KACV,aAAcA,EACd,aAAcA,EACd,aAAcA,EACd,cAAe,KACf,KAAM,IACV,EACE,UAAUiB,EAAG/B,EAAU,CACrB,OAAOA,IAAa,OAChBA,EACA,QAAUA,EAAS,MAAM,CAAC,EAAE,YAAW,CAC7C,CACF,CAAC,ECpDM,SAASgC,GAAuBC,EAAYzB,EAAW,CAC5D,OAAOA,KAAayB,EAAaA,EAAWzB,CAAS,EAAIA,CAC3D,CCAO,SAAS0B,GAAyBD,EAAYjC,EAAU,CAC7D,OAAOgC,GAAuBC,EAAYjC,EAAS,YAAW,CAAE,CAClE,CCDO,MAAMmC,GAAOT,GAAO,CACzB,WAAY,CACV,cAAe,iBACf,UAAW,QACX,QAAS,MACT,UAAW,YACf,EACE,gBAAiB,CAAC,UAAW,WAAY,QAAS,UAAU,EAC5D,WAAY,CAEV,KAAM,KACN,OAAQV,GACR,cAAeD,EACf,UAAWA,EACX,OAAQ,KACR,MAAO,KACP,gBAAiBL,EACjB,oBAAqBA,EACrB,eAAgBA,EAChB,IAAK,KACL,GAAI,KACJ,MAAOA,EACP,eAAgB,KAChB,aAAcK,EACd,UAAWL,EACX,SAAUA,EACV,SAAUK,EACV,QAAS,KACT,QAAS,KACT,QAASL,EACT,KAAM,KACN,UAAWK,EACX,KAAMD,EACN,QAAS,KACT,QAAS,KACT,gBAAiBF,EACjB,SAAUF,EACV,aAAcK,EACd,OAAQD,EAASE,GACjB,YAAa,KACb,KAAM,KACN,SAAU,KACV,SAAU,KACV,QAASN,EACT,MAAOA,EACP,IAAK,KACL,QAAS,KACT,SAAUA,EACV,SAAUG,GACV,UAAWD,EACX,QAAS,KACT,aAAc,KACd,cAAe,KACf,KAAM,KACN,WAAY,KACZ,YAAa,KACb,WAAY,KACZ,eAAgBF,EAChB,WAAY,KACZ,QAASK,EACT,OAAQD,EACR,OAAQD,GACR,KAAMC,EACN,KAAM,KACN,SAAU,KACV,QAASC,EACT,UAAWA,EACX,GAAI,KACJ,WAAY,KACZ,YAAa,KACb,MAAOL,EACP,UAAW,KACX,UAAW,KACX,GAAI,KACJ,MAAOA,EACP,OAAQ,KACR,SAAUK,EACV,QAASA,EACT,UAAWL,EACX,SAAUK,EACV,KAAM,KACN,MAAO,KACP,KAAM,KACN,SAAU,KACV,KAAM,KACN,QAAS,KACT,KAAML,EACN,IAAKI,EACL,SAAU,KACV,IAAK,KACL,UAAWA,EACX,MAAO,KACP,OAAQ,KACR,IAAK,KACL,UAAWA,EACX,SAAUJ,EACV,MAAOA,EACP,KAAM,KACN,MAAO,KACP,SAAUA,EACV,WAAYA,EACZ,QAAS,KACT,aAAc,KACd,WAAY,KACZ,cAAe,KACf,cAAe,KACf,eAAgB,KAChB,eAAgB,KAChB,OAAQ,KACR,SAAU,KACV,UAAW,KACX,iBAAkB,KAClB,SAAU,KACV,QAAS,KACT,QAAS,KACT,cAAe,KACf,cAAe,KACf,kBAAmB,KACnB,OAAQ,KACR,YAAa,KACb,MAAO,KACP,WAAY,KACZ,OAAQ,KACR,UAAW,KACX,YAAa,KACb,WAAY,KACZ,YAAa,KACb,WAAY,KACZ,YAAa,KACb,OAAQ,KACR,iBAAkB,KAClB,UAAW,KACX,QAAS,KACT,QAAS,KACT,QAAS,KACT,WAAY,KACZ,aAAc,KACd,QAAS,KACT,UAAW,KACX,UAAW,KACX,WAAY,KACZ,QAAS,KACT,iBAAkB,KAClB,OAAQ,KACR,aAAc,KACd,iBAAkB,KAClB,UAAW,KACX,YAAa,KACb,UAAW,KACX,eAAgB,KAChB,YAAa,KACb,aAAc,KACd,aAAc,KACd,YAAa,KACb,WAAY,KACZ,YAAa,KACb,UAAW,KACX,UAAW,KACX,SAAU,KACV,WAAY,KACZ,WAAY,KACZ,QAAS,KACT,QAAS,KACT,OAAQ,KACR,UAAW,KACX,WAAY,KACZ,WAAY,KACZ,aAAc,KACd,mBAAoB,KACpB,QAAS,KACT,SAAU,KACV,SAAU,KACV,YAAa,KACb,0BAA2B,KAC3B,SAAU,KACV,UAAW,KACX,SAAU,KACV,aAAc,KACd,UAAW,KACX,UAAW,KACX,SAAU,KACV,UAAW,KACX,aAAc,KACd,SAAU,KACV,qBAAsB,KACtB,SAAU,KACV,eAAgB,KAChB,UAAW,KACX,QAAS,KACT,KAAMA,EACN,QAASI,EACT,QAAS,KACT,KAAMC,EACN,YAAa,KACb,YAAaL,EACb,QAAS,KACT,cAAe,KACf,oBAAqB,KACrB,OAAQ,KACR,QAAS,KACT,SAAUA,EACV,eAAgB,KAChB,IAAKK,EACL,SAAUL,EACV,SAAUA,EACV,KAAMI,EACN,QAASA,EACT,QAASC,EACT,MAAO,KACP,OAAQL,EACR,SAAUA,EACV,SAAUA,EACV,mBAAoBA,EACpB,yBAA0BA,EAC1B,eAAgB,KAChB,MAAO,KACP,KAAMI,EACN,MAAO,KACP,KAAM,KACN,KAAMA,EACN,WAAYF,EACZ,IAAK,KACL,OAAQ,KACR,QAAS,KACT,OAAQ,KACR,MAAOE,EACP,KAAM,KACN,MAAO,KACP,SAAUA,EACV,OAAQ,KACR,MAAO,KACP,UAAW,KACX,KAAM,KACN,cAAeJ,EACf,OAAQ,KACR,MAAOE,EACP,MAAOE,EACP,KAAM,KACN,mBAAoB,KAIpB,MAAO,KACP,MAAO,KACP,QAASC,EACT,KAAM,KACN,WAAY,KACZ,QAAS,KACT,OAAQD,EACR,YAAa,KACb,aAAcA,EACd,YAAa,KACb,YAAa,KACb,KAAM,KACN,QAAS,KACT,QAAS,KACT,MAAO,KACP,KAAM,KACN,SAAU,KACV,SAAU,KACV,MAAO,KACP,QAASJ,EACT,QAASA,EACT,MAAO,KACP,KAAM,KACN,MAAO,KACP,YAAa,KACb,OAAQI,EACR,WAAYA,EACZ,KAAM,KACN,SAAU,KACV,OAAQ,KACR,aAAcA,EACd,YAAaA,EACb,SAAUJ,EACV,OAAQA,EACR,QAASA,EACT,OAAQA,EACR,OAAQ,KACR,QAAS,KACT,OAAQ,KACR,IAAK,KACL,YAAaI,EACb,MAAO,KACP,OAAQ,KACR,UAAWF,EACX,QAAS,KACT,QAAS,KACT,KAAM,KACN,UAAWE,EACX,UAAW,KACX,QAAS,KACT,OAAQ,KACR,MAAO,KACP,OAAQA,EAGR,kBAAmB,KACnB,YAAa,KACb,SAAU,KACV,wBAAyBJ,EACzB,sBAAuBA,EACvB,OAAQ,KACR,SAAU,KACV,QAASI,EACT,SAAU,KACV,aAAc,IAClB,EACE,MAAO,OACP,UAAWoB,EACb,CAAC,ECvTYE,GAAMV,GAAO,CACxB,WAAY,CACV,aAAc,gBACd,kBAAmB,qBACnB,WAAY,cACZ,cAAe,iBACf,UAAW,aACX,UAAW,QACX,SAAU,YACV,SAAU,YACV,mBAAoB,sBACpB,0BAA2B,8BAC3B,aAAc,gBACd,eAAgB,kBAChB,YAAa,cACb,SAAU,WACV,iBAAkB,oBAClB,iBAAkB,oBAClB,YAAa,eACb,SAAU,YACV,WAAY,cACZ,aAAc,gBACd,WAAY,cACZ,SAAU,YACV,eAAgB,mBAChB,YAAa,eACb,UAAW,aACX,YAAa,eACb,WAAY,cACZ,UAAW,aACX,2BAA4B,+BAC5B,yBAA0B,6BAC1B,SAAU,WACV,UAAW,cACX,aAAc,iBACd,aAAc,iBACd,eAAgB,kBAChB,cAAe,iBACf,cAAe,iBACf,UAAW,aACX,UAAW,aACX,YAAa,eACb,QAAS,WACT,YAAa,gBACb,aAAc,iBACd,QAAS,WACT,QAAS,WACT,QAAS,WACT,SAAU,YACV,MAAO,SACP,UAAW,cACX,WAAY,eACZ,QAAS,UACT,WAAY,aACZ,aAAc,eACd,cAAe,gBACf,QAAS,UACT,SAAU,WACV,UAAW,YACX,iBAAkB,mBAClB,SAAU,WACV,QAAS,UACT,QAAS,UACT,OAAQ,SACR,YAAa,cACb,MAAO,QACP,WAAY,aACZ,OAAQ,SACR,UAAW,YACX,YAAa,cACb,WAAY,aACZ,YAAa,cACb,WAAY,aACZ,YAAa,cACb,OAAQ,SACR,iBAAkB,mBAClB,UAAW,YACX,MAAO,QACP,QAAS,UACT,QAAS,UACT,QAAS,UACT,UAAW,YACX,WAAY,aACZ,aAAc,eACd,QAAS,UACT,UAAW,YACX,UAAW,YACX,WAAY,aACZ,QAAS,UACT,OAAQ,SACR,aAAc,eACd,iBAAkB,mBAClB,YAAa,cACb,UAAW,YACX,YAAa,cACb,aAAc,eACd,aAAc,eACd,YAAa,cACb,WAAY,aACZ,YAAa,cACb,UAAW,YACX,aAAc,eACd,UAAW,YACX,SAAU,WACV,WAAY,aACZ,WAAY,aACZ,QAAS,UACT,QAAS,UACT,OAAQ,SACR,UAAW,YACX,WAAY,aACZ,WAAY,aACZ,aAAc,eACd,SAAU,WACV,QAAS,UACT,SAAU,WACV,SAAU,WACV,SAAU,WACV,UAAW,YACX,SAAU,WACV,OAAQ,SACR,UAAW,YACX,UAAW,YACX,SAAU,WACV,UAAW,YACX,aAAc,eACd,SAAU,WACV,SAAU,WACV,eAAgB,iBAChB,UAAW,YACX,OAAQ,SACR,iBAAkB,oBAClB,kBAAmB,qBACnB,WAAY,cACZ,QAAS,WACT,cAAe,iBACf,eAAgB,iBAChB,gBAAiB,mBACjB,eAAgB,kBAChB,UAAW,aACX,YAAa,eACb,sBAAuB,yBACvB,uBAAwB,0BACxB,gBAAiB,mBACjB,iBAAkB,oBAClB,cAAe,iBACf,eAAgB,kBAChB,iBAAkB,oBAClB,cAAe,iBACf,YAAa,eACb,SAAU,WACV,WAAY,cACZ,eAAgB,kBAChB,cAAe,iBACf,gBAAiB,mBACjB,OAAQ,SACR,kBAAmB,qBACnB,mBAAoB,sBACpB,YAAa,eACb,aAAc,gBACd,WAAY,eACZ,YAAa,eACb,SAAU,YACV,aAAc,gBACd,cAAe,iBACf,aAAc,gBACd,SAAU,aACV,YAAa,gBACb,YAAa,gBACb,YAAa,eACb,YAAa,eACb,QAAS,WAET,cAAe,gBACf,cAAe,eACnB,EACE,WAAY,CACV,MAAOT,GACP,aAAcH,EACd,WAAY,KACZ,SAAU,KACV,kBAAmB,KACnB,WAAYA,EACZ,UAAWA,EACX,WAAY,KACZ,OAAQA,EACR,cAAe,KACf,cAAe,KACf,QAASA,EACT,UAAW,KACX,cAAe,KACf,cAAe,KACf,YAAa,KACb,KAAM,KACN,MAAO,KACP,KAAMA,EACN,GAAI,KACJ,SAAU,KACV,UAAWA,EACX,UAAWC,EACX,KAAM,KACN,SAAU,KACV,cAAe,KACf,SAAU,KACV,MAAO,KACP,mBAAoB,KACpB,0BAA2B,KAC3B,aAAc,KACd,eAAgB,KAChB,QAAS,KACT,kBAAmB,KACnB,iBAAkB,KAClB,YAAa,KACb,OAAQ,KACR,GAAI,KACJ,GAAI,KACJ,EAAG,KACH,SAAU,KACV,cAAe,KACf,QAASD,EACT,gBAAiBA,EACjB,UAAW,KACX,QAAS,KACT,IAAK,KACL,QAASA,EACT,iBAAkB,KAClB,SAAUJ,EACV,GAAI,KACJ,GAAI,KACJ,SAAU,KACV,SAAU,KACV,UAAWI,EACX,iBAAkB,KAClB,IAAK,KACL,MAAO,KACP,SAAUA,EACV,0BAA2B,KAC3B,KAAM,KACN,YAAaA,EACb,SAAU,KACV,OAAQ,KACR,UAAW,KACX,YAAa,KACb,WAAY,KACZ,aAAc,KACd,UAAW,KACX,eAAgB,KAChB,WAAY,KACZ,SAAU,KACV,eAAgB,KAChB,YAAa,KACb,UAAW,KACX,YAAa,KACb,WAAY,KACZ,OAAQ,KACR,GAAI,KACJ,KAAM,KACN,GAAI,KACJ,GAAI,KACJ,GAAIE,GACJ,GAAIA,GACJ,UAAWA,GACX,2BAA4B,KAC5B,yBAA0B,KAC1B,SAAU,KACV,kBAAmB,KACnB,cAAe,KACf,QAAS,KACT,QAASF,EACT,kBAAmB,KACnB,WAAY,KACZ,OAAQ,KACR,KAAM,KACN,SAAU,KACV,UAAWA,EACX,aAAcA,EACd,aAAcA,EACd,GAAI,KACJ,YAAaA,EACb,eAAgB,KAChB,kBAAmB,KACnB,GAAI,KACJ,IAAK,KACL,UAAWA,EACX,EAAGA,EACH,GAAIA,EACJ,GAAIA,EACJ,GAAIA,EACJ,GAAIA,EACJ,aAAcG,GACd,iBAAkB,KAClB,UAAW,KACX,WAAY,KACZ,SAAU,KACV,QAAS,KACT,KAAM,KACN,aAAc,KACd,cAAe,KACf,cAAe,KACf,kBAAmBH,EACnB,MAAO,KACP,UAAW,KACX,UAAW,KACX,YAAa,KACb,aAAc,KACd,YAAa,KACb,YAAa,KACb,KAAM,KACN,iBAAkB,KAClB,UAAW,KACX,aAAc,KACd,IAAK,KACL,MAAO,KACP,uBAAwB,KACxB,sBAAuB,KACvB,UAAWA,EACX,UAAW,KACX,OAAQ,KACR,IAAK,KACL,KAAM,KACN,KAAM,KACN,QAAS,KACT,YAAa,KACb,aAAc,KACd,QAAS,KACT,QAAS,KACT,QAAS,KACT,SAAU,KACV,MAAO,KACP,UAAW,KACX,WAAY,KACZ,WAAY,KACZ,SAAU,KACV,OAAQ,KACR,QAAS,KACT,WAAY,KACZ,aAAc,KACd,cAAe,KACf,QAAS,KACT,SAAU,KACV,UAAW,KACX,iBAAkB,KAClB,SAAU,KACV,QAAS,KACT,QAAS,KACT,OAAQ,KACR,YAAa,KACb,MAAO,KACP,WAAY,KACZ,OAAQ,KACR,UAAW,KACX,YAAa,KACb,WAAY,KACZ,YAAa,KACb,WAAY,KACZ,YAAa,KACb,OAAQ,KACR,iBAAkB,KAClB,UAAW,KACX,MAAO,KACP,QAAS,KACT,QAAS,KACT,QAAS,KACT,UAAW,KACX,WAAY,KACZ,aAAc,KACd,QAAS,KACT,UAAW,KACX,UAAW,KACX,WAAY,KACZ,QAAS,KACT,OAAQ,KACR,aAAc,KACd,iBAAkB,KAClB,YAAa,KACb,UAAW,KACX,YAAa,KACb,aAAc,KACd,aAAc,KACd,YAAa,KACb,WAAY,KACZ,YAAa,KACb,UAAW,KACX,aAAc,KACd,UAAW,KACX,SAAU,KACV,WAAY,KACZ,WAAY,KACZ,QAAS,KACT,QAAS,KACT,OAAQ,KACR,UAAW,KACX,WAAY,KACZ,WAAY,KACZ,aAAc,KACd,SAAU,KACV,QAAS,KACT,SAAU,KACV,SAAU,KACV,SAAU,KACV,UAAW,KACX,SAAU,KACV,OAAQ,KACR,UAAW,KACX,UAAW,KACX,SAAU,KACV,UAAW,KACX,aAAc,KACd,SAAU,KACV,SAAU,KACV,eAAgB,KAChB,UAAW,KACX,OAAQ,KACR,QAAS,KACT,SAAU,KACV,MAAO,KACP,OAAQ,KACR,YAAa,KACb,OAAQ,KACR,SAAU,KACV,QAAS,KACT,iBAAkBA,EAClB,kBAAmBA,EACnB,WAAY,KACZ,QAAS,KACT,KAAM,KACN,WAAYA,EACZ,oBAAqB,KACrB,iBAAkB,KAClB,aAAc,KACd,MAAO,KACP,KAAMC,EACN,MAAO,KACP,cAAe,KACf,cAAe,KACf,OAAQ,KACR,UAAWD,EACX,UAAWA,EACX,UAAWA,EACX,cAAe,KACf,oBAAqB,KACrB,eAAgB,KAChB,UAAW,KACX,SAAUG,GACV,EAAG,KACH,OAAQ,KACR,eAAgB,KAChB,KAAM,KACN,KAAM,KACN,IAAKA,GACL,IAAKA,GACL,gBAAiB,KACjB,YAAa,KACb,UAAW,KACX,mBAAoBA,GACpB,iBAAkBA,GAClB,cAAeA,GACf,gBAAiBA,GACjB,SAAU,KACV,QAAS,KACT,OAAQ,KACR,OAAQ,KACR,GAAI,KACJ,GAAI,KACJ,MAAO,KACP,KAAM,KACN,eAAgB,KAChB,KAAM,KACN,MAAO,KACP,aAAc,KACd,iBAAkBH,EAClB,iBAAkBA,EAClB,aAAc,KACd,QAAS,KACT,YAAa,KACb,aAAc,KACd,MAAO,KACP,MAAO,KACP,YAAa,KACb,UAAW,KACX,YAAa,KACb,sBAAuBA,EACvB,uBAAwBA,EACxB,OAAQ,KACR,OAAQ,KACR,gBAAiBG,GACjB,iBAAkB,KAClB,cAAe,KACf,eAAgB,KAChB,iBAAkBH,EAClB,cAAeA,EACf,YAAa,KACb,MAAO,KACP,aAAcA,EACd,aAAc,KACd,oBAAqB,KACrB,WAAY,KACZ,cAAe,KACf,qBAAsB,KACtB,eAAgBG,GAChB,SAAUH,EACV,YAAa,KACb,OAAQ,KACR,QAASA,EACT,QAASA,EACT,WAAY,KACZ,eAAgB,KAChB,cAAe,KACf,WAAY,KACZ,cAAe,KACf,MAAO,KACP,kBAAmB,KACnB,KAAM,KACN,OAAQG,GACR,GAAI,KACJ,UAAW,KACX,gBAAiB,KACjB,GAAI,KACJ,GAAI,KACJ,kBAAmBH,EACnB,mBAAoBA,EACpB,QAAS,KACT,YAAa,KACb,aAAc,KACd,WAAYA,EACZ,OAAQ,KACR,YAAaA,EACb,cAAeA,EACf,aAAc,KACd,SAAUA,EACV,aAAcA,EACd,QAAS,KACT,SAAUA,EACV,YAAaA,EACb,YAAaA,EACb,QAAS,KACT,WAAY,KACZ,WAAY,KACZ,MAAO,KACP,OAAQ,KACR,YAAa,KACb,YAAa,KACb,EAAG,KACH,GAAI,KACJ,GAAI,KACJ,iBAAkB,KAClB,QAASA,EACT,EAAG,KACH,GAAI,KACJ,GAAI,KACJ,iBAAkB,KAClB,EAAG,KACH,WAAY,IAChB,EACE,MAAO,MACP,UAAWkB,EACb,CAAC,ECpjBYK,GAAQX,GAAO,CAC1B,WAAY,CACV,aAAc,KACd,aAAc,KACd,UAAW,KACX,UAAW,KACX,UAAW,KACX,WAAY,KACZ,UAAW,IACf,EACE,MAAO,QACP,UAAUK,EAAG/B,EAAU,CACrB,MAAO,SAAWA,EAAS,MAAM,CAAC,EAAE,YAAW,CACjD,CACF,CAAC,ECbYsC,GAAQZ,GAAO,CAC1B,WAAY,CAAC,WAAY,aAAa,EACtC,WAAY,CAAC,WAAY,KAAM,MAAO,IAAI,EAC1C,MAAO,QACP,UAAWQ,EACb,CAAC,ECNYK,GAAMb,GAAO,CACxB,WAAY,CAAC,QAAS,KAAM,QAAS,KAAM,SAAU,IAAI,EACzD,MAAO,MACP,UAAUK,EAAG/B,EAAU,CACrB,MAAO,OAASA,EAAS,MAAM,CAAC,EAAE,YAAW,CAC/C,CACF,CAAC,ECGYwC,GAAc,CACzB,QAAS,UACT,SAAU,WACV,OAAQ,SACR,gBAAiB,kBACjB,iBAAkB,mBAClB,cAAe,gBACf,eAAgB,iBAChB,iBAAkB,mBAClB,OAAQ,SACR,aAAc,eACd,aAAc,eACd,UAAW,YACX,UAAW,YACX,UAAW,YACX,WAAY,aACZ,UAAW,YACX,WAAY,YACd,ECrBMC,GAAM,SACNC,GAAO,UACPC,GAAQ,kBAgCP,SAASC,GAAKC,EAAQhE,EAAO,CAClC,MAAMoB,EAASK,GAAUzB,CAAK,EAC9B,IAAImB,EAAWnB,EACXiE,EAAOvC,GAEX,GAAIN,KAAU4C,EAAO,OACnB,OAAOA,EAAO,SAASA,EAAO,OAAO5C,CAAM,CAAC,EAG9C,GAAIA,EAAO,OAAS,GAAKA,EAAO,MAAM,EAAG,CAAC,IAAM,QAAU0C,GAAM,KAAK9D,CAAK,EAAG,CAE3E,GAAIA,EAAM,OAAO,CAAC,IAAM,IAAK,CAE3B,MAAMkE,EAAOlE,EAAM,MAAM,CAAC,EAAE,QAAQ6D,GAAMM,EAAS,EACnDhD,EAAW,OAAS+C,EAAK,OAAO,CAAC,EAAE,YAAW,EAAKA,EAAK,MAAM,CAAC,CACjE,KAAO,CAEL,MAAMA,EAAOlE,EAAM,MAAM,CAAC,EAE1B,GAAI,CAAC6D,GAAK,KAAKK,CAAI,EAAG,CACpB,IAAIE,EAASF,EAAK,QAAQN,GAAKS,EAAK,EAEhCD,EAAO,OAAO,CAAC,IAAM,MACvBA,EAAS,IAAMA,GAGjBpE,EAAQ,OAASoE,CACnB,CACF,CAEAH,EAAO1B,EACT,CAEA,OAAO,IAAI0B,EAAK9C,EAAUnB,CAAK,CACjC,CAQA,SAASqE,GAAMC,EAAI,CACjB,MAAO,IAAMA,EAAG,YAAW,CAC7B,CAQA,SAASH,GAAUG,EAAI,CACrB,OAAOA,EAAG,OAAO,CAAC,EAAE,YAAW,CACjC,CCrFO,MAAMhB,GAAOhC,GAAM,CAAC2B,GAAMsB,GAAUf,GAAOC,GAAOC,EAAG,EAAG,MAAM,EAKxDH,GAAMjC,GAAM,CAAC2B,GAAMuB,GAAShB,GAAOC,GAAOC,EAAG,EAAG,KAAK,ECK3D,SAASpD,GAAUC,EAAQ,CAChC,OAAOA,EAAO,KAAK,GAAG,EAAE,KAAI,CAC9B,oDCrBA,IAAIkE,EAAgB,kCAEhBC,EAAgB,MAChBC,EAAmB,OAGnBC,EAAiB,yCACjBC,EAAc,QACdC,EAAc,uDACdC,EAAkB,UAGlBC,EAAa,aAGbC,EAAU;AAAA,EACVC,EAAgB,IAChBC,EAAW,IACXC,EAAe,GAGfC,EAAe,UACfC,EAAmB,cASvBC,GAAiB,SAAUC,EAAOhF,EAAS,CACzC,GAAI,OAAOgF,GAAU,SACnB,MAAM,IAAI,UAAU,iCAAiC,EAGvD,GAAI,CAACA,EAAO,MAAO,CAAA,EAEnBhF,EAAUA,GAAW,CAAA,EAKrB,IAAIiF,EAAS,EACTC,EAAS,EAOb,SAASC,EAAeC,EAAK,CAC3B,IAAIC,EAAQD,EAAI,MAAMlB,CAAa,EAC/BmB,IAAOJ,GAAUI,EAAM,QAC3B,IAAIC,EAAIF,EAAI,YAAYX,CAAO,EAC/BS,EAAS,CAACI,EAAIF,EAAI,OAASE,EAAIJ,EAASE,EAAI,MAChD,CAOE,SAASG,GAAW,CAClB,IAAIC,EAAQ,CAAE,KAAMP,EAAQ,OAAQC,CAAM,EAC1C,OAAO,SAAUO,EAAM,CACrB,OAAAA,EAAK,SAAW,IAAIC,EAASF,CAAK,EAClCjF,EAAU,EACHkF,CACb,CACA,CAUE,SAASC,EAASF,EAAO,CACvB,KAAK,MAAQA,EACb,KAAK,IAAM,CAAE,KAAMP,EAAQ,OAAQC,CAAM,EACzC,KAAK,OAASlF,EAAQ,MAC1B,CAKE0F,EAAS,UAAU,QAAUV,EAU7B,SAASW,EAAMC,EAAK,CAClB,IAAIC,EAAM,IAAI,MACZ7F,EAAQ,OAAS,IAAMiF,EAAS,IAAMC,EAAS,KAAOU,GAQxD,GANAC,EAAI,OAASD,EACbC,EAAI,SAAW7F,EAAQ,OACvB6F,EAAI,KAAOZ,EACXY,EAAI,OAASX,EACbW,EAAI,OAASb,EAET,CAAAhF,EAAQ,OAGV,MAAM6F,CAEZ,CAQE,SAASC,EAAMxF,EAAI,CACjB,IAAIyF,EAAIzF,EAAG,KAAK0E,CAAK,EACrB,GAAKe,EACL,KAAIX,EAAMW,EAAE,CAAC,EACb,OAAAZ,EAAeC,CAAG,EAClBJ,EAAQA,EAAM,MAAMI,EAAI,MAAM,EACvBW,EACX,CAKE,SAASxF,GAAa,CACpBuF,EAAM3B,CAAgB,CAC1B,CAQE,SAAS6B,EAASC,EAAO,CACvB,IAAIC,EAEJ,IADAD,EAAQA,GAAS,CAAA,EACTC,EAAIC,KACND,IAAM,IACRD,EAAM,KAAKC,CAAC,EAGhB,OAAOD,CACX,CAQE,SAASE,GAAU,CACjB,IAAIC,EAAMb,EAAQ,EAClB,GAAI,EAAAb,GAAiBM,EAAM,OAAO,CAAC,GAAKL,GAAYK,EAAM,OAAO,CAAC,GAGlE,SADIM,EAAI,EAENV,GAAgBI,EAAM,OAAOM,CAAC,IAC7BX,GAAYK,EAAM,OAAOM,CAAC,GAAKZ,GAAiBM,EAAM,OAAOM,EAAI,CAAC,IAEnE,EAAEA,EAIJ,GAFAA,GAAK,EAEDV,IAAiBI,EAAM,OAAOM,EAAI,CAAC,EACrC,OAAOK,EAAM,wBAAwB,EAGvC,IAAIP,EAAMJ,EAAM,MAAM,EAAGM,EAAI,CAAC,EAC9B,OAAAJ,GAAU,EACVC,EAAeC,CAAG,EAClBJ,EAAQA,EAAM,MAAMM,CAAC,EACrBJ,GAAU,EAEHkB,EAAI,CACT,KAAMvB,EACN,QAASO,CACf,CAAK,EACL,CAQE,SAASiB,GAAc,CACrB,IAAID,EAAMb,EAAQ,EAGde,EAAOR,EAAM1B,CAAc,EAC/B,GAAKkC,EAIL,IAHAH,EAAO,EAGH,CAACL,EAAMzB,CAAW,EAAG,OAAOsB,EAAM,sBAAsB,EAG5D,IAAIY,EAAMT,EAAMxB,CAAW,EAEvBkC,EAAMJ,EAAI,CACZ,KAAMtB,EACN,SAAU2B,EAAKH,EAAK,CAAC,EAAE,QAAQrC,EAAeW,CAAY,CAAC,EAC3D,MAAO2B,EACHE,EAAKF,EAAI,CAAC,EAAE,QAAQtC,EAAeW,CAAY,CAAC,EAChDA,CACV,CAAK,EAGD,OAAAkB,EAAMvB,CAAe,EAEdiC,EACX,CAOE,SAASE,GAAe,CACtB,IAAIC,EAAQ,CAAA,EAEZX,EAASW,CAAK,EAId,QADIC,EACIA,EAAOP,KACTO,IAAS,KACXD,EAAM,KAAKC,CAAI,EACfZ,EAASW,CAAK,GAIlB,OAAOA,CACX,CAEE,OAAApG,EAAU,EACHmG,EAAY,CACrB,EAQA,SAASD,EAAKrB,EAAK,CACjB,OAAOA,EAAMA,EAAI,QAAQZ,EAAYI,CAAY,EAAIA,CACvD,qDCnQA,IAAIiC,EAAmBC,IAAQA,GAAK,iBAAoB,SAAUC,EAAK,CACnE,OAAQA,GAAOA,EAAI,WAAcA,EAAM,CAAE,QAAWA,CAAG,CAC3D,EACA,OAAO,eAAeC,GAAS,aAAc,CAAE,MAAO,GAAM,EAC5DA,GAAA,QAAkBC,EAClB,IAAIC,EAAwBL,EAAgBM,IAA8B,EAe1E,SAASF,EAAcjC,EAAOoC,EAAU,CACpC,IAAIC,EAAc,KAClB,GAAI,CAACrC,GAAS,OAAOA,GAAU,SAC3B,OAAOqC,EAEX,IAAIX,KAAmBQ,EAAsB,SAASlC,CAAK,EACvDsC,EAAc,OAAOF,GAAa,WACtC,OAAAV,EAAa,QAAQ,SAAUL,EAAa,CACxC,GAAIA,EAAY,OAAS,cAGzB,KAAI1F,EAAW0F,EAAY,SAAU7G,EAAQ6G,EAAY,MACrDiB,EACAF,EAASzG,EAAUnB,EAAO6G,CAAW,EAEhC7G,IACL6H,EAAcA,GAAe,CAAA,EAC7BA,EAAY1G,CAAQ,EAAInB,GAEpC,CAAK,EACM6H,CACX,2DCzCA,OAAO,eAAeE,GAAS,aAAc,CAAE,MAAO,GAAM,EAC5DA,GAAA,UAAoB,OACpB,IAAIC,EAAwB,qBACxBC,EAAe,YACfC,EAAkB,UAClBC,EAAsB,6BACtBC,EAAyB,UAIzBC,EAAgB,SAAUlH,EAAU,CACpC,MAAO,CAACA,GACJ+G,EAAgB,KAAK/G,CAAQ,GAC7B6G,EAAsB,KAAK7G,CAAQ,CAC3C,EAIImH,EAAa,SAAUhC,EAAOiC,EAAW,CACzC,OAAOA,EAAU,YAAW,CAChC,EAIIC,EAAa,SAAUlC,EAAOmC,EAAQ,CAAE,MAAO,GAAG,OAAOA,EAAQ,GAAG,CAAE,EAItEC,EAAY,SAAUvH,EAAUX,EAAS,CAEzC,OADIA,IAAY,SAAUA,EAAU,CAAA,GAChC6H,EAAclH,CAAQ,EACfA,GAEXA,EAAWA,EAAS,YAAW,EAC3BX,EAAQ,YAERW,EAAWA,EAAS,QAAQiH,EAAwBI,CAAU,EAI9DrH,EAAWA,EAAS,QAAQgH,EAAqBK,CAAU,EAExDrH,EAAS,QAAQ8G,EAAcK,CAAU,EACpD,EACA,OAAAP,GAAA,UAAoBW,kDC5CpB,IAAIrB,EAAmBC,IAAQA,GAAK,iBAAoB,SAAUC,EAAK,CACnE,OAAQA,GAAOA,EAAI,WAAcA,EAAM,CAAE,QAAWA,CAAG,CAC3D,EACIoB,EAAoBtB,EAAgBM,IAA0B,EAC9DiB,EAAcC,GAAA,EAIlB,SAASC,EAAUtD,EAAOhF,EAAS,CAC/B,IAAIuI,EAAS,CAAA,EACb,MAAI,CAACvD,GAAS,OAAOA,GAAU,aAG3BmD,EAAkB,SAASnD,EAAO,SAAUrE,EAAUnB,EAAO,CAEzDmB,GAAYnB,IACZ+I,KAAWH,EAAY,WAAWzH,EAAUX,CAAO,CAAC,EAAIR,EAEpE,CAAK,EACM+I,CACX,CACA,OAAAD,EAAU,QAAUA,EACpBtB,GAAiBsB,iCCMJE,GAAWC,GAAM,KAAK,EAUtBC,GAAaD,GAAM,OAAO,EAUvC,SAASA,GAAME,EAAM,CACnB,OAAOF,EAQP,SAASA,EAAMhD,EAAM,CACnB,MAAMgD,EAAShD,GAAQA,EAAK,UAAYA,EAAK,SAASkD,CAAI,GAAM,CAAA,EAEhE,GACE,OAAOF,EAAM,MAAS,UACtBA,EAAM,KAAO,GACb,OAAOA,EAAM,QAAW,UACxBA,EAAM,OAAS,EAEf,MAAO,CACL,KAAMA,EAAM,KACZ,OAAQA,EAAM,OACd,OACE,OAAOA,EAAM,QAAW,UAAYA,EAAM,OAAS,GAC/CA,EAAM,OACN,MACd,CAEE,CACF,CAUO,SAASlD,GAASE,EAAM,CAC7B,MAAMD,EAAQkD,GAAWjD,CAAI,EACvBmD,EAAMJ,GAAS/C,CAAI,EAEzB,GAAID,GAASoD,EACX,MAAO,CAAC,MAAApD,EAAO,IAAAoD,CAAG,CAEtB,CC1DO,SAASC,GAAkBrJ,EAAO,CAEvC,MAAI,CAACA,GAAS,OAAOA,GAAU,SACtB,GAIL,aAAcA,GAAS,SAAUA,EAC5B+F,GAAS/F,EAAM,QAAQ,EAI5B,UAAWA,GAAS,QAASA,EACxB+F,GAAS/F,CAAK,EAInB,SAAUA,GAAS,WAAYA,EAC1BiJ,GAAMjJ,CAAK,EAIb,EACT,CAMA,SAASiJ,GAAMA,EAAO,CACpB,OAAOxG,GAAMwG,GAASA,EAAM,IAAI,EAAI,IAAMxG,GAAMwG,GAASA,EAAM,MAAM,CACvE,CAMA,SAASlD,GAASa,EAAK,CACrB,OAAOqC,GAAMrC,GAAOA,EAAI,KAAK,EAAI,IAAMqC,GAAMrC,GAAOA,EAAI,GAAG,CAC7D,CAMA,SAASnE,GAAMzC,EAAO,CACpB,OAAOA,GAAS,OAAOA,GAAU,SAAWA,EAAQ,CACtD,CCzDO,MAAMsJ,UAAqB,KAAM,CAwDtC,YAAYC,EAAeC,EAAwBC,EAAQ,CACzD,MAAK,EAED,OAAOD,GAA2B,WACpCC,EAASD,EACTA,EAAyB,QAI3B,IAAIE,EAAS,GAETlJ,EAAU,CAAA,EACVmJ,EAAc,GAwClB,GAtCIH,IAGA,SAAUA,GACV,WAAYA,EAEZhJ,EAAU,CAAC,MAAOgJ,CAAsB,EAIxC,UAAWA,GACX,QAASA,EAEThJ,EAAU,CAAC,MAAOgJ,CAAsB,EAGjC,SAAUA,EACjBhJ,EAAU,CACR,UAAW,CAACgJ,CAAsB,EAClC,MAAOA,EAAuB,QACxC,EAIQhJ,EAAU,CAAC,GAAGgJ,CAAsB,GAIpC,OAAOD,GAAkB,SAC3BG,EAASH,EAGF,CAAC/I,EAAQ,OAAS+I,IACzBI,EAAc,GACdD,EAASH,EAAc,QACvB/I,EAAQ,MAAQ+I,GAGd,CAAC/I,EAAQ,QAAU,CAACA,EAAQ,QAAU,OAAOiJ,GAAW,SAAU,CACpE,MAAMhH,EAAQgH,EAAO,QAAQ,GAAG,EAE5BhH,IAAU,GACZjC,EAAQ,OAASiJ,GAEjBjJ,EAAQ,OAASiJ,EAAO,MAAM,EAAGhH,CAAK,EACtCjC,EAAQ,OAASiJ,EAAO,MAAMhH,EAAQ,CAAC,EAE3C,CAEA,GAAI,CAACjC,EAAQ,OAASA,EAAQ,WAAaA,EAAQ,UAAW,CAC5D,MAAMoJ,EAASpJ,EAAQ,UAAUA,EAAQ,UAAU,OAAS,CAAC,EAEzDoJ,IACFpJ,EAAQ,MAAQoJ,EAAO,SAE3B,CAEA,MAAM5D,EACJxF,EAAQ,OAAS,UAAWA,EAAQ,MAChCA,EAAQ,MAAM,MACdA,EAAQ,MAOd,KAAK,UAAYA,EAAQ,WAAa,OAOtC,KAAK,MAAQA,EAAQ,OAAS,OAO9B,KAAK,OAASwF,EAAQA,EAAM,OAAS,OAWrC,KAAK,MAAQ,OAOb,KAAK,KAAO,GAQZ,KAAK,QAAU0D,EAOf,KAAK,KAAO1D,EAAQA,EAAM,KAAO,OASjC,KAAK,KAAOqD,GAAkB7I,EAAQ,KAAK,GAAK,MAOhD,KAAK,MAAQA,EAAQ,OAAS,OAO9B,KAAK,OAAS,KAAK,QAOnB,KAAK,OAASA,EAAQ,QAAU,OAOhC,KAAK,OAASA,EAAQ,QAAU,OAWhC,KAAK,MACHmJ,GAAenJ,EAAQ,OAAS,OAAOA,EAAQ,MAAM,OAAU,SAC3DA,EAAQ,MAAM,MACd,GAYN,KAAK,OAAS,OAOd,KAAK,SAAW,OAOhB,KAAK,KAAO,OAUZ,KAAK,IAAM,MACb,CACF,CAEA8I,EAAa,UAAU,KAAO,GAC9BA,EAAa,UAAU,KAAO,GAC9BA,EAAa,UAAU,OAAS,GAChCA,EAAa,UAAU,QAAU,GACjCA,EAAa,UAAU,MAAQ,GAC/BA,EAAa,UAAU,OAAS,OAChCA,EAAa,UAAU,KAAO,OAC9BA,EAAa,UAAU,UAAY,OACnCA,EAAa,UAAU,MAAQ,OAC/BA,EAAa,UAAU,MAAQ,OAC/BA,EAAa,UAAU,MAAQ,OAC/BA,EAAa,UAAU,OAAS,OAChCA,EAAa,UAAU,OAAS,OCnShC,MAAMO,GAAM,CAAA,EAAG,eAGTC,GAAW,IAAI,IAEflG,GAAM,SAaNmG,GAAgB,IAAI,IAAI,CAAC,QAAS,QAAS,QAAS,QAAS,IAAI,CAAC,EAElEC,GAAmB,IAAI,IAAI,CAAC,KAAM,IAAI,CAAC,EAEvCC,GAAO,0DAcN,SAASC,GAAaC,EAAM3J,EAAS,CAC1C,GAAI,CAACA,GAAWA,EAAQ,WAAa,OACnC,MAAM,IAAI,UAAU,gCAAgC,EAGtD,MAAM4J,EAAW5J,EAAQ,UAAY,OAErC,IAAIqC,EAEJ,GAAIrC,EAAQ,YAAa,CACvB,GAAI,OAAOA,EAAQ,QAAW,WAC5B,MAAM,IAAI,UACR,uDACR,EAGIqC,EAASwH,GAAkBD,EAAU5J,EAAQ,MAAM,CACrD,KAAO,CACL,GAAI,OAAOA,EAAQ,KAAQ,WACzB,MAAM,IAAI,UAAU,sCAAsC,EAG5D,GAAI,OAAOA,EAAQ,MAAS,WAC1B,MAAM,IAAI,UAAU,uCAAuC,EAG7DqC,EAASyH,GAAiBF,EAAU5J,EAAQ,IAAKA,EAAQ,IAAI,CAC/D,CAGA,MAAM+J,EAAQ,CACZ,SAAU/J,EAAQ,SAClB,UAAW,CAAA,EACX,WAAYA,EAAQ,YAAc,CAAA,EAClC,OAAAqC,EACA,yBAA0BrC,EAAQ,0BAA4B,QAC9D,UAAWA,EAAQ,gBAAkBA,EAAQ,gBAAe,EAAK,OACjE,SAAA4J,EACA,mBAAoB5J,EAAQ,oBAAsB,GAClD,SAAUA,EAAQ,WAAa,GAC/B,SAAUA,EAAQ,UAAY,GAC9B,OAAQA,EAAQ,QAAU,MAAQ+C,GAAMD,GACxC,sBAAuB9C,EAAQ,uBAAyB,MACxD,sBAAuBA,EAAQ,wBAA0B,EAC7D,EAEQgK,EAASC,GAAIF,EAAOJ,EAAM,MAAS,EAGzC,OAAIK,GAAU,OAAOA,GAAW,SACvBA,EAIFD,EAAM,OACXJ,EACAI,EAAM,SACN,CAAC,SAAUC,GAAU,MAAS,EAC9B,MACJ,CACA,CAcA,SAASC,GAAIF,EAAOtE,EAAMrD,EAAK,CAC7B,GAAIqD,EAAK,OAAS,UAChB,OAAOyE,GAAQH,EAAOtE,EAAMrD,CAAG,EAGjC,GAAIqD,EAAK,OAAS,qBAAuBA,EAAK,OAAS,oBACrD,OAAO0E,GAAcJ,EAAOtE,CAAI,EAGlC,GAAIA,EAAK,OAAS,qBAAuBA,EAAK,OAAS,oBACrD,OAAO2E,GAAcL,EAAOtE,EAAMrD,CAAG,EAGvC,GAAIqD,EAAK,OAAS,WAChB,OAAO4E,GAAON,EAAOtE,CAAI,EAG3B,GAAIA,EAAK,OAAS,OAChB,OAAO6E,GAAKP,EAAOtE,EAAMrD,CAAG,EAG9B,GAAIqD,EAAK,OAAS,OAChB,OAAO8E,GAAKR,EAAOtE,CAAI,CAE3B,CAcA,SAASyE,GAAQH,EAAOtE,EAAMrD,EAAK,CACjC,MAAMoI,EAAeT,EAAM,OAC3B,IAAIvG,EAASgH,EAET/E,EAAK,QAAQ,YAAW,IAAO,OAAS+E,EAAa,QAAU,SACjEhH,EAAST,GACTgH,EAAM,OAASvG,GAGjBuG,EAAM,UAAU,KAAKtE,CAAI,EAEzB,MAAMkD,EAAO8B,GAAsBV,EAAOtE,EAAK,QAAS,EAAK,EACvDiF,EAAQC,GAAmBZ,EAAOtE,CAAI,EAC5C,IAAImF,EAAWC,GAAed,EAAOtE,CAAI,EAEzC,OAAI8D,GAAc,IAAI9D,EAAK,OAAO,IAChCmF,EAAWA,EAAS,OAAO,SAAUE,EAAO,CAC1C,OAAO,OAAOA,GAAU,SAAW,CAACvK,GAAWuK,CAAK,EAAI,EAC1D,CAAC,GAGHC,GAAQhB,EAAOW,EAAO/B,EAAMlD,CAAI,EAChCuF,GAAYN,EAAOE,CAAQ,EAG3Bb,EAAM,UAAU,IAAG,EACnBA,EAAM,OAASS,EAERT,EAAM,OAAOtE,EAAMkD,EAAM+B,EAAOtI,CAAG,CAC5C,CAYA,SAAS+H,GAAcJ,EAAOtE,EAAM,CAClC,GAAIA,EAAK,MAAQA,EAAK,KAAK,QAAUsE,EAAM,UAAW,CAEpD,MAAMkB,EADUxF,EAAK,KAAK,OACC,KAAK,CAAC,EACjChG,OAAAA,EAAOwL,EAAW,OAAS,qBAAqB,EAI9ClB,EAAM,UAAU,mBAAmBkB,EAAW,UAAU,CAE5D,CAEAC,GAAYnB,EAAOtE,EAAK,QAAQ,CAClC,CAYA,SAAS4E,GAAON,EAAOtE,EAAM,CAC3B,GAAIA,EAAK,MAAQA,EAAK,KAAK,QAAUsE,EAAM,UAEzC,OACEA,EAAM,UAAU,gBAAgBtE,EAAK,KAAK,MAAM,EAIpDyF,GAAYnB,EAAOtE,EAAK,QAAQ,CAClC,CAcA,SAAS2E,GAAcL,EAAOtE,EAAMrD,EAAK,CACvC,MAAMoI,EAAeT,EAAM,OAC3B,IAAIvG,EAASgH,EAET/E,EAAK,OAAS,OAAS+E,EAAa,QAAU,SAChDhH,EAAST,GACTgH,EAAM,OAASvG,GAGjBuG,EAAM,UAAU,KAAKtE,CAAI,EAEzB,MAAMkD,EACJlD,EAAK,OAAS,KACVsE,EAAM,SACNU,GAAsBV,EAAOtE,EAAK,KAAM,EAAI,EAC5CiF,EAAQS,GAAsBpB,EAAOtE,CAAI,EACzCmF,EAAWC,GAAed,EAAOtE,CAAI,EAE3C,OAAAsF,GAAQhB,EAAOW,EAAO/B,EAAMlD,CAAI,EAChCuF,GAAYN,EAAOE,CAAQ,EAG3Bb,EAAM,UAAU,IAAG,EACnBA,EAAM,OAASS,EAERT,EAAM,OAAOtE,EAAMkD,EAAM+B,EAAOtI,CAAG,CAC5C,CAcA,SAASkI,GAAKP,EAAOtE,EAAMrD,EAAK,CAE9B,MAAMsI,EAAQ,CAAA,EAEd,OAAAM,GAAYN,EAAOG,GAAed,EAAOtE,CAAI,CAAC,EAEvCsE,EAAM,OAAOtE,EAAMsE,EAAM,SAAUW,EAAOtI,CAAG,CACtD,CAYA,SAASmI,GAAK7H,EAAG+C,EAAM,CACrB,OAAOA,EAAK,KACd,CAgBA,SAASsF,GAAQhB,EAAOW,EAAO/B,EAAMlD,EAAM,CAErC,OAAOkD,GAAS,UAAYA,IAASoB,EAAM,UAAYA,EAAM,WAC/DW,EAAM,KAAOjF,EAEjB,CAYA,SAASuF,GAAYN,EAAOE,EAAU,CACpC,GAAIA,EAAS,OAAS,EAAG,CACvB,MAAMpL,EAAQoL,EAAS,OAAS,EAAIA,EAAWA,EAAS,CAAC,EAErDpL,IACFkL,EAAM,SAAWlL,EAErB,CACF,CAYA,SAASsK,GAAiBpH,EAAG0I,EAAKC,EAAM,CACtC,OAAOhJ,EAEP,SAASA,EAAOK,EAAGiG,EAAM+B,EAAOtI,EAAK,CAGnC,MAAMkJ,EADmB,MAAM,QAAQZ,EAAM,QAAQ,EACvBW,EAAOD,EACrC,OAAOhJ,EAAMkJ,EAAG3C,EAAM+B,EAAOtI,CAAG,EAAIkJ,EAAG3C,EAAM+B,CAAK,CACpD,CACF,CAUA,SAASb,GAAkBD,EAAU2B,EAAQ,CAC3C,OAAOlJ,EAEP,SAASA,EAAOoD,EAAMkD,EAAM+B,EAAOtI,EAAK,CAEtC,MAAMoJ,EAAmB,MAAM,QAAQd,EAAM,QAAQ,EAC/CjC,EAAQC,GAAWjD,CAAI,EAC7B,OAAO8F,EACL5C,EACA+B,EACAtI,EACAoJ,EACA,CACE,aAAc/C,EAAQA,EAAM,OAAS,EAAI,OACzC,SAAUmB,EACV,WAAYnB,EAAQA,EAAM,KAAO,MACzC,EACM,MACN,CACE,CACF,CAYA,SAASkC,GAAmBZ,EAAOtE,EAAM,CAEvC,MAAMiF,EAAQ,CAAA,EAEd,IAAIe,EAEAnF,EAEJ,IAAKA,KAAQb,EAAK,WAChB,GAAIa,IAAS,YAAc+C,GAAI,KAAK5D,EAAK,WAAYa,CAAI,EAAG,CAC1D,MAAM0D,EAAS0B,GAAe3B,EAAOzD,EAAMb,EAAK,WAAWa,CAAI,CAAC,EAEhE,GAAI0D,EAAQ,CACV,KAAM,CAAC5H,EAAK5C,CAAK,EAAIwK,EAGnBD,EAAM,uBACN3H,IAAQ,SACR,OAAO5C,GAAU,UACjBgK,GAAiB,IAAI/D,EAAK,OAAO,EAEjCgG,EAAajM,EAEbkL,EAAMtI,CAAG,EAAI5C,CAEjB,CACF,CAGF,GAAIiM,EAAY,CAEd,MAAMzG,EAA8B0F,EAAM,QAAUA,EAAM,MAAQ,CAAA,GAClE1F,EAAM+E,EAAM,wBAA0B,MAAQ,aAAe,WAAW,EACtE0B,CACJ,CAEA,OAAOf,CACT,CAYA,SAASS,GAAsBpB,EAAOtE,EAAM,CAE1C,MAAMiF,EAAQ,CAAA,EAEd,UAAWvJ,KAAasE,EAAK,WAC3B,GAAItE,EAAU,OAAS,4BACrB,GAAIA,EAAU,MAAQA,EAAU,KAAK,QAAU4I,EAAM,UAAW,CAE9D,MAAMkB,EADU9J,EAAU,KAAK,OACJ,KAAK,CAAC,EACjC1B,EAAOwL,EAAW,OAAS,qBAAqB,EAChD,MAAMU,EAAmBV,EAAW,WACpCxL,EAAOkM,EAAiB,OAAS,kBAAkB,EACnD,MAAMhL,EAAWgL,EAAiB,WAAW,CAAC,EAC9ClM,EAAOkB,EAAS,OAAS,eAAe,EAExC,OAAO,OACL+J,EACAX,EAAM,UAAU,mBAAmBpJ,EAAS,QAAQ,CAC9D,CACM,MACEuK,GAAYnB,EAAOtE,EAAK,QAAQ,MAE7B,CAEL,MAAMpF,EAAOc,EAAU,KAEvB,IAAI3B,EAEJ,GAAI2B,EAAU,OAAS,OAAOA,EAAU,OAAU,SAChD,GACEA,EAAU,MAAM,MAChBA,EAAU,MAAM,KAAK,QACrB4I,EAAM,UACN,CAEA,MAAMkB,EADU9J,EAAU,MAAM,KAAK,OACV,KAAK,CAAC,EACjC1B,EAAOwL,EAAW,OAAS,qBAAqB,EAChDzL,EAAQuK,EAAM,UAAU,mBAAmBkB,EAAW,UAAU,CAClE,MACEC,GAAYnB,EAAOtE,EAAK,QAAQ,OAGlCjG,EAAQ2B,EAAU,QAAU,KAAO,GAAOA,EAAU,MAItDuJ,EAAMrK,CAAI,EAAuCb,CACnD,CAGF,OAAOkL,CACT,CAYA,SAASG,GAAed,EAAOtE,EAAM,CAEnC,MAAMmF,EAAW,CAAA,EACjB,IAAI3I,EAAQ,GAIZ,MAAM2J,EAAe7B,EAAM,SAAW,IAAI,IAAQT,GAElD,KAAO,EAAErH,EAAQwD,EAAK,SAAS,QAAQ,CACrC,MAAMqF,EAAQrF,EAAK,SAASxD,CAAK,EAEjC,IAAIG,EAEJ,GAAI2H,EAAM,SAAU,CAClB,MAAM1J,EACJyK,EAAM,OAAS,UACXA,EAAM,QACNA,EAAM,OAAS,qBACbA,EAAM,OAAS,oBACfA,EAAM,KACN,OAER,GAAIzK,EAAM,CACR,MAAMwL,EAAQD,EAAa,IAAIvL,CAAI,GAAK,EACxC+B,EAAM/B,EAAO,IAAMwL,EACnBD,EAAa,IAAIvL,EAAMwL,EAAQ,CAAC,CAClC,CACF,CAEA,MAAM7B,EAASC,GAAIF,EAAOe,EAAO1I,CAAG,EAChC4H,IAAW,QAAWY,EAAS,KAAKZ,CAAM,CAChD,CAEA,OAAOY,CACT,CAcA,SAASc,GAAe3B,EAAOzD,EAAM9G,EAAO,CAC1C,MAAMgD,EAAOe,GAAKwG,EAAM,OAAQzD,CAAI,EAGpC,GACE,EAAA9G,GAAU,MAET,OAAOA,GAAU,UAAY,OAAO,MAAMA,CAAK,GAYlD,IAPI,MAAM,QAAQA,CAAK,IAGrBA,EAAQgD,EAAK,eAAiBsJ,GAAOtM,CAAK,EAAIuM,GAAOvM,CAAK,GAIxDgD,EAAK,WAAa,QAAS,CAC7B,IAAI6E,EACF,OAAO7H,GAAU,SAAWA,EAAQwM,GAAWjC,EAAO,OAAOvK,CAAK,CAAC,EAErE,OAAIuK,EAAM,wBAA0B,QAClC1C,EAAc4E,GAA2B5E,CAAW,GAG/C,CAAC,QAASA,CAAW,CAC9B,CAEA,MAAO,CACL0C,EAAM,2BAA6B,SAAWvH,EAAK,MAC/CW,GAAYX,EAAK,QAAQ,GAAKA,EAAK,SACnCA,EAAK,UACThD,CACJ,EACA,CAcA,SAASwM,GAAWjC,EAAOvK,EAAO,CAChC,GAAI,CACF,OAAO0M,GAAU1M,EAAO,CAAC,YAAa,EAAI,CAAC,CAC7C,OAASmG,EAAO,CACd,GAAIoE,EAAM,mBACR,MAAO,CAAA,EAGT,MAAMoC,EAA8BxG,EAC9B1G,EAAU,IAAI6J,EAAa,iCAAkC,CACjE,UAAWiB,EAAM,UACjB,MAAAoC,EACA,OAAQ,QACR,OAAQ,0BACd,CAAK,EACD,MAAAlN,EAAQ,KAAO8K,EAAM,UAAY,OACjC9K,EAAQ,IAAMwK,GAAO,gCAEfxK,CACR,CACF,CAcA,SAASwL,GAAsBV,EAAO1J,EAAM+L,EAAiB,CAE3D,IAAIpC,EAEJ,GAAI,CAACoC,EACHpC,EAAS,CAAC,KAAM,UAAW,MAAO3J,CAAI,UAC7BA,EAAK,SAAS,GAAG,EAAG,CAC7B,MAAMgM,EAAchM,EAAK,MAAM,GAAG,EAClC,IAAI4B,EAAQ,GAERwD,EAEJ,KAAO,EAAExD,EAAQoK,EAAY,QAAQ,CAEnC,MAAM/F,EAAOgG,GAAiBD,EAAYpK,CAAK,CAAC,EAC5C,CAAC,KAAM,aAAc,KAAMoK,EAAYpK,CAAK,CAAC,EAC7C,CAAC,KAAM,UAAW,MAAOoK,EAAYpK,CAAK,CAAC,EAC/CwD,EAAOA,EACH,CACE,KAAM,mBACN,OAAQA,EACR,SAAUa,EACV,SAAU,GAAQrE,GAASqE,EAAK,OAAS,WACzC,SAAU,EACtB,EACUA,CACN,CAEA7G,EAAOgG,EAAM,iBAAiB,EAC9BuE,EAASvE,CACX,MACEuE,EACEsC,GAAiBjM,CAAI,GAAK,CAAC,SAAS,KAAKA,CAAI,EACzC,CAAC,KAAM,kBAAcA,CAAI,EACzB,CAAC,KAAM,UAAW,MAAOA,CAAI,EAKrC,GAAI2J,EAAO,OAAS,UAAW,CAC7B,MAAM3J,EAAuC2J,EAAO,MACpD,OAAOX,GAAI,KAAKU,EAAM,WAAY1J,CAAI,EAAI0J,EAAM,WAAW1J,CAAI,EAAIA,CACrE,CAGA,GAAI0J,EAAM,UACR,OAAOA,EAAM,UAAU,mBAAmBC,CAAM,EAGlDkB,GAAYnB,CAAK,CACnB,CAOA,SAASmB,GAAYnB,EAAOwC,EAAO,CACjC,MAAMtN,EAAU,IAAI6J,EAClB,sDACA,CACE,UAAWiB,EAAM,UACjB,MAAAwC,EACA,OAAQ,aACR,OAAQ,0BACd,CACA,EACE,MAAAtN,EAAQ,KAAO8K,EAAM,UAAY,OACjC9K,EAAQ,IAAMwK,GAAO,qDAEfxK,CACR,CAQA,SAASgN,GAA2BO,EAAW,CAE7C,MAAMC,EAAY,CAAA,EAElB,IAAIC,EAEJ,IAAKA,KAAQF,EACPnD,GAAI,KAAKmD,EAAWE,CAAI,IAC1BD,EAAUE,GAA0BD,CAAI,CAAC,EAAIF,EAAUE,CAAI,GAI/D,OAAOD,CACT,CAQA,SAASE,GAA0BD,EAAM,CACvC,IAAIE,EAAKF,EAAK,QAAQtJ,GAAKyJ,EAAM,EAEjC,OAAID,EAAG,MAAM,EAAG,CAAC,IAAM,QAAOA,EAAK,IAAMA,GAClCA,CACT,CAUA,SAASC,GAAO/I,EAAI,CAClB,MAAO,IAAMA,EAAG,YAAW,CAC7B,CC1wBO,MAAMgJ,GAAgB,CAC3B,OAAQ,CAAC,MAAM,EACf,KAAM,CAAC,aAAc,MAAO,MAAO,GAAG,EACtC,KAAM,CAAC,QAAQ,EACf,WAAY,CAAC,SAAU,OAAO,EAC9B,KAAM,CAAC,IAAK,OAAQ,OAAQ,MAAM,EAClC,KAAM,CAAC,UAAU,EACjB,OAAQ,KACR,SAAU,CAAC,MAAM,EACjB,KAAM,CAAC,IAAK,MAAM,EAClB,OAAQ,CAAC,OAAO,EAChB,IAAK,CACH,QACA,QACA,SACA,MACA,QACA,SACA,SACA,QACA,OACJ,CACA,EClBM1M,GAAe,CAAA,EAed,SAAS2M,GAASvN,EAAOQ,EAAS,CACvC,MAAMC,EAAsBG,GACtB4M,EACJ,OAAO/M,EAAS,iBAAoB,UAChCA,EAAS,gBACT,GACAgN,EACJ,OAAOhN,EAAS,aAAgB,UAAYA,EAAS,YAAc,GAErE,OAAOgK,GAAIzK,EAAOwN,EAAiBC,CAAW,CAChD,CAcA,SAAShD,GAAIzK,EAAOwN,EAAiBC,EAAa,CAChD,GAAIxH,GAAKjG,CAAK,EAAG,CACf,GAAI,UAAWA,EACb,OAAOA,EAAM,OAAS,QAAU,CAACyN,EAAc,GAAKzN,EAAM,MAG5D,GAAIwN,GAAmB,QAASxN,GAASA,EAAM,IAC7C,OAAOA,EAAM,IAGf,GAAI,aAAcA,EAChB,OAAO0N,GAAI1N,EAAM,SAAUwN,EAAiBC,CAAW,CAE3D,CAEA,OAAI,MAAM,QAAQzN,CAAK,EACd0N,GAAI1N,EAAOwN,EAAiBC,CAAW,EAGzC,EACT,CAcA,SAASC,GAAInN,EAAQiN,EAAiBC,EAAa,CAEjD,MAAMjD,EAAS,CAAA,EACf,IAAI/H,EAAQ,GAEZ,KAAO,EAAEA,EAAQlC,EAAO,QACtBiK,EAAO/H,CAAK,EAAIgI,GAAIlK,EAAOkC,CAAK,EAAG+K,EAAiBC,CAAW,EAGjE,OAAOjD,EAAO,KAAK,EAAE,CACvB,CAUA,SAASvE,GAAKjG,EAAO,CACnB,MAAO,GAAQA,GAAS,OAAOA,GAAU,SAC3C,CCvGA,MAAM0K,GAAU,SAAS,cAAc,GAAG,EAMnC,SAASiD,GAA8B3N,EAAO,CACnD,MAAM4N,EAAqB,IAAM5N,EAAQ,IACzC0K,GAAQ,UAAYkD,EACpB,MAAMrF,EAAYmC,GAAQ,YAQ1B,OAGEnC,EAAU,WAAWA,EAAU,OAAS,CAAC,IAAM,IAC/CvI,IAAU,QASLuI,IAAcqF,EAPZ,GAOyCrF,CACpD,CCjBO,MAAMsF,EAA8B,CACzC,eAAgB,GAChB,SAAU,GACV,uBAAwB,GACxB,cAAe,GACf,aAAc,GACd,IAAK,KACL,IAAK,EASL,GAAI,EACJ,GAAI,GACJ,GAAI,GAEJ,GAAI,GAmBJ,MAAO,GACP,gBAAiB,GACjB,cAAe,GACf,WAAY,GAEZ,YAAa,GACb,UAAW,GACX,WAAY,GACZ,gBAAiB,GACjB,iBAAkB,GAClB,SAAU,GACV,SAAU,GAEV,KAAM,GACN,IAAK,GACL,MAAO,GACP,OAAQ,GACR,OAAQ,GACR,OAAQ,GACR,OAAQ,GACR,OAAQ,GACR,OAAQ,GACR,OAAQ,GACR,OAAQ,GACR,OAAQ,GACR,OAAQ,GACR,MAAO,GACP,UAAW,GACX,SAAU,GACV,SAAU,GACV,YAAa,GACb,aAAc,GACd,OAAQ,GAwBR,WAAY,GAGZ,kBAAmB,GACnB,UAAW,GACX,mBAAoB,GACpB,MAAO,GACP,WAAY,GACZ,YAAa,GAwBb,WAAY,IAMZ,MAAO,IACP,IAAK,IAEL,gBAAiB,MAEjB,qBAAsB,KACxB,ECrJaC,EAAkC,CAG7C,8BAA+B,EAC/B,sBAAuB,GACvB,sBAAuB,GACvB,mBAAoB,SACpB,0BAA2B,EAC3B,yBAA0B,EAC1B,iCAAkC,EAClC,qCAAsC,EACtC,+BAAgC,GAChC,0BAA2B,EAC3B,mBAAoB,UAEpB,gBAAiB,OACjB,kBAAmB,SACnB,gBAAiB,OACjB,uBAAwB,EACxB,UAAW,EACX,UAAW,EACX,YAAa,EACb,aAAc,EACd,gBAAiB,EACjB,gBAAiB,EACjB,eAAgB,EAChB,QAAS,EACT,kCAAmC,GACnC,qBAAsB,IACtB,qBAAsB,GACtB,mBAAoB,GACpB,uBAAwB,GACxB,QAAS,EACT,4BAA6B,EAC7B,mBAAoB,GACtB,EC9BaxL,EAA8B,CAEzC,KAAM,OAIN,WAAY,aAIZ,WAAY,aAGZ,gBAAiB,kBAIjB,WAAY,aAIZ,WAAY,aAWZ,WAAY,aAGZ,mBAAoB,qBAIpB,eAAgB,iBAIhB,SAAU,WAGV,cAAe,gBAGf,eAAgB,iBAGhB,iBAAkB,mBAIlB,gBAAiB,kBAGjB,qBAAsB,uBAMtB,mBAAoB,qBAGpB,yBAA0B,2BAG1B,gCAAiC,kCAGjC,oCAAqC,sCAGrC,wBAAyB,0BASzB,WAAY,aAIZ,gBAAiB,kBAGjB,wBAAyB,0BAIzB,oBAAqB,sBAIrB,oBAAqB,sBAGrB,cAAe,gBASf,aAAc,eAKd,SAAU,WAEV,aAAc,eAGd,gBAAiB,kBAGjB,iBAAkB,mBAYlB,QAAS,UAST,WAAY,aAKZ,sBAAuB,wBAMvB,6BAA8B,+BAG9B,mCAAoC,qCAKpC,yBAA0B,2BAI1B,4BAA6B,8BAI7B,gBAAiB,kBAGjB,sBAAuB,wBAIvB,sBAAuB,wBAGvB,iBAAkB,mBAIlB,gBAAiB,kBAGjB,sBAAuB,wBAIvB,sBAAuB,wBAIvB,SAAU,WAGV,iBAAkB,mBAIlB,aAAc,eAGd,aAAc,eAId,gBAAiB,kBAIjB,kBAAmB,oBASnB,SAAU,WAEV,aAAc,eAId,SAAU,WAEV,aAAc,eAKd,MAAO,QAIP,MAAO,QAIP,UAAW,YAIX,UAAW,YAIX,WAAY,aAGZ,YAAa,cAGb,iBAAkB,mBAIlB,SAAU,WAIV,KAAM,OAUN,UAAW,YAIX,UAAW,YAGX,gBAAiB,kBAIjB,gBAAiB,kBAKjB,SAAU,WAIV,oBAAqB,sBAKrB,2BAA4B,6BAG5B,iCAAkC,mCAIlC,uBAAwB,yBAIxB,0BAA2B,4BAG3B,eAAgB,iBAIhB,cAAe,gBAGf,oBAAqB,sBAIrB,oBAAqB,sBAYrB,cAAe,gBAIf,kBAAmB,oBAInB,kBAAmB,oBAGnB,0BAA2B,4BAI3B,OAAQ,SAGR,eAAgB,iBAIhB,WAAY,aASZ,cAAe,gBAGf,sBAAuB,wBAWvB,WAAY,aAEZ,iBAAkB,mBAElB,iBAAkB,mBAElB,2BAA4B,6BAW5B,YAAa,cAWb,cAAe,gBAGf,eAAgB,iBAGhB,eAAgB,iBAKhB,eAAgB,iBAGhB,yBAA0B,2BAG1B,cAAe,gBAIf,aAAc,eACd,UAAW,YACX,UAAW,YACX,YAAa,aACf,EC5ba/B,GAA+B,CAC1C,GAAI,IACJ,GAAI;AAAA,EACJ,GAAI,KACJ,MAAO,IA+FP,qBAAsB,GACxB,ECpFO,SAASwN,GAAOC,EAAMhI,EAAOiI,EAAQC,EAAO,CACjD,MAAM9E,EAAM4E,EAAK,OACjB,IAAIG,EAAa,EAEbC,EAYJ,GATIpI,EAAQ,EACVA,EAAQ,CAACA,EAAQoD,EAAM,EAAIA,EAAMpD,EAEjCA,EAAQA,EAAQoD,EAAMA,EAAMpD,EAG9BiI,EAASA,EAAS,EAAIA,EAAS,EAG3BC,EAAM,OAASJ,EAAU,mBAC3BM,EAAa,MAAM,KAAKF,CAAK,EAC7BE,EAAW,QAAQpI,EAAOiI,CAAM,EAEhCD,EAAK,OAAO,GAAGI,CAAU,MAMzB,KAHIH,GAAQD,EAAK,OAAOhI,EAAOiI,CAAM,EAG9BE,EAAaD,EAAM,QACxBE,EAAaF,EAAM,MACjBC,EACAA,EAAaL,EAAU,kBAC/B,EACMM,EAAW,QAAQpI,EAAO,CAAC,EAE3BgI,EAAK,OAAO,GAAGI,CAAU,EAEzBD,GAAcL,EAAU,mBACxB9H,GAAS8H,EAAU,kBAGzB,CAkBO,SAASO,GAAKL,EAAME,EAAO,CAChC,OAAIF,EAAK,OAAS,GAChBD,GAAOC,EAAMA,EAAK,OAAQ,EAAGE,CAAK,EAC3BF,GAGFE,CACT,CC7EA,MAAMI,GAAiB,CAAA,EAAG,eAUnB,SAASC,GAAkBC,EAAY,CAE5C,MAAMd,EAAM,CAAA,EACZ,IAAIjL,EAAQ,GAEZ,KAAO,EAAEA,EAAQ+L,EAAW,QAC1BC,GAAgBf,EAAKc,EAAW/L,CAAK,CAAC,EAGxC,OAAOiL,CACT,CAYA,SAASe,GAAgBf,EAAKgB,EAAW,CAEvC,IAAIC,EAEJ,IAAKA,KAAQD,EAAW,CAGtB,MAAME,GAFQN,GAAe,KAAKZ,EAAKiB,CAAI,EAAIjB,EAAIiB,CAAI,EAAI,UAEpCjB,EAAIiB,CAAI,EAAI,CAAA,GAE7BE,EAAQH,EAAUC,CAAI,EAE5B,IAAIG,EAEJ,GAAID,EACF,IAAKC,KAAQD,EAAO,CACbP,GAAe,KAAKM,EAAME,CAAI,IAAGF,EAAKE,CAAI,EAAI,CAAA,GACnD,MAAM9O,EAAQ6O,EAAMC,CAAI,EACxBC,GAEEH,EAAKE,CAAI,EACT,MAAM,QAAQ9O,CAAK,EAAIA,EAAQA,EAAQ,CAACA,CAAK,EAAI,CAAA,CAC3D,CACM,CAEJ,CACF,CAaA,SAAS+O,GAAWC,EAAUhB,EAAM,CAClC,IAAIvL,EAAQ,GAEZ,MAAMwM,EAAS,CAAA,EAEf,KAAO,EAAExM,EAAQuL,EAAK,SAElBA,EAAKvL,CAAK,EAAE,MAAQ,QAAUuM,EAAWC,GAAQ,KAAKjB,EAAKvL,CAAK,CAAC,EAGrEsL,GAAOiB,EAAU,EAAG,EAAGC,CAAM,CAC/B,CC5EO,SAASC,GAAgClP,EAAOmP,EAAM,CAC3D,MAAML,EAAO,OAAO,SAAS9O,EAAOmP,CAAI,EAExC,OAEEL,EAAOjB,EAAM,IACbiB,IAASjB,EAAM,IACdiB,EAAOjB,EAAM,IAAMiB,EAAOjB,EAAM,OAEhCiB,EAAOjB,EAAM,OAASiB,EAAO,KAE7BA,EAAO,OAAUA,EAAO,OAExBA,EAAO,OAAUA,EAAO,QAExBA,EAAO,SAAY,QACnBA,EAAO,SAAY,OAGpBA,EAAO,QAEAvO,GAAO,qBAGT,OAAO,cAAcuO,CAAI,CAClC,CCpBO,SAASM,GAAoBpP,EAAO,CACzC,OACEA,EAEG,QAAQ,cAAeO,GAAO,KAAK,EAEnC,QAAQ,SAAU,EAAE,EAOpB,YAAW,EACX,YAAW,CAElB,CCdO,MAAM8O,GAAaC,GAAW,UAAU,EAclCC,GAAoBD,GAAW,YAAY,EAuB3CE,GAAaF,GAAW,qBAAqB,EAanD,SAASG,GAAaX,EAAM,CACjC,OAGEA,IAAS,OAASA,EAAOjB,EAAM,OAASiB,IAASjB,EAAM,IAE3D,CAaO,MAAM6B,GAAaJ,GAAW,IAAI,EAoB5BK,GAAgBL,GAAW,YAAY,EAevCM,GAAmBN,GAAW,gBAAgB,EAiBpD,SAASO,EAAmBf,EAAM,CACvC,OAAOA,IAAS,MAAQA,EAAOjB,EAAM,aACvC,CAWO,SAASiC,GAA0BhB,EAAM,CAC9C,OAAOA,IAAS,OAASA,EAAOjB,EAAM,KAAOiB,IAASjB,EAAM,MAC9D,CAiBO,SAASkC,EAAcjB,EAAM,CAClC,OACEA,IAASjB,EAAM,eACfiB,IAASjB,EAAM,cACfiB,IAASjB,EAAM,KAEnB,CAuBO,MAAMmC,GAAqBV,GAAW,cAAc,EAsB9CW,GAAoBX,GAAW,IAAI,EAUhD,SAASA,GAAWY,EAAO,CACzB,OAAOvN,EAUP,SAASA,EAAMmM,EAAM,CACnB,OAAOA,IAAS,MAAQA,EAAO,IAAMoB,EAAM,KAAK,OAAO,aAAapB,CAAI,CAAC,CAC3E,CACF,CC1LO,SAASqB,GAAanQ,EAAO,CAElC,MAAMwK,EAAS,CAAA,EACf,IAAI/H,EAAQ,GACRuD,EAAQ,EACRoK,EAAO,EAEX,KAAO,EAAE3N,EAAQzC,EAAM,QAAQ,CAC7B,MAAM8O,EAAO9O,EAAM,WAAWyC,CAAK,EAEnC,IAAI4N,EAAU,GAGd,GACEvB,IAASjB,EAAM,aACf0B,GAAkBvP,EAAM,WAAWyC,EAAQ,CAAC,CAAC,GAC7C8M,GAAkBvP,EAAM,WAAWyC,EAAQ,CAAC,CAAC,EAE7C2N,EAAO,UAGAtB,EAAO,IACT,oBAAoB,KAAK,OAAO,aAAaA,CAAI,CAAC,IACrDuB,EAAU,OAAO,aAAavB,CAAI,WAI7BA,EAAO,OAAUA,EAAO,MAAQ,CACvC,MAAMwB,EAAOtQ,EAAM,WAAWyC,EAAQ,CAAC,EAGnCqM,EAAO,OAAUwB,EAAO,OAAUA,EAAO,OAC3CD,EAAU,OAAO,aAAavB,EAAMwB,CAAI,EACxCF,EAAO,GAIPC,EAAU9P,GAAO,oBAErB,MAGE8P,EAAU,OAAO,aAAavB,CAAI,EAGhCuB,IACF7F,EAAO,KAAKxK,EAAM,MAAMgG,EAAOvD,CAAK,EAAG,mBAAmB4N,CAAO,CAAC,EAClErK,EAAQvD,EAAQ2N,EAAO,EACvBC,EAAU,IAGRD,IACF3N,GAAS2N,EACTA,EAAO,EAEX,CAEA,OAAO5F,EAAO,KAAK,EAAE,EAAIxK,EAAM,MAAMgG,CAAK,CAC5C,CCnFO,SAASuK,EAAaC,EAASzQ,EAAIoJ,EAAMsH,EAAK,CACnD,MAAMC,EAAQD,EAAMA,EAAM,EAAI,OAAO,kBACrC,IAAIE,EAAO,EAEX,OAAO3K,EAGP,SAASA,EAAM8I,EAAM,CACnB,OAAIiB,EAAcjB,CAAI,GACpB0B,EAAQ,MAAMrH,CAAI,EACXV,EAAOqG,CAAI,GAGb/O,EAAG+O,CAAI,CAChB,CAGA,SAASrG,EAAOqG,EAAM,CACpB,OAAIiB,EAAcjB,CAAI,GAAK6B,IAASD,GAClCF,EAAQ,QAAQ1B,CAAI,EACbrG,IAGT+H,EAAQ,KAAKrH,CAAI,EACVpJ,EAAG+O,CAAI,EAChB,CACF,CClDO,MAAM8B,GAAU,CAAC,SAAUC,EAAiB,EAQnD,SAASA,GAAkBL,EAAS,CAClC,MAAMM,EAAeN,EAAQ,QAC3B,KAAK,OAAO,WAAW,eACvBO,EACAC,CACJ,EAEE,IAAIC,EAEJ,OAAOH,EAGP,SAASC,EAA2BjC,EAAM,CAMxC,GALA7O,EACE6O,IAASjB,EAAM,KAAOgC,EAAmBf,CAAI,EAC7C,qBACN,EAEQA,IAASjB,EAAM,IAAK,CACtB2C,EAAQ,QAAQ1B,CAAI,EACpB,MACF,CAEA,OAAA0B,EAAQ,MAAMlO,EAAM,UAAU,EAC9BkO,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAKlO,EAAM,UAAU,EACtBiO,EAAaC,EAASM,EAAcxO,EAAM,UAAU,CAC7D,CAGA,SAAS0O,EAAiBlC,EAAM,CAC9B7O,OAAAA,EACE6O,IAASjB,EAAM,KAAO,CAACgC,EAAmBf,CAAI,EAC9C,mDACN,EACI0B,EAAQ,MAAMlO,EAAM,SAAS,EACtB4O,EAAUpC,CAAI,CACvB,CAGA,SAASoC,EAAUpC,EAAM,CACvB,MAAMqC,EAAQX,EAAQ,MAAMlO,EAAM,UAAW,CAC3C,YAAawL,EAAU,gBACvB,SAAAmD,CACN,CAAK,EAED,OAAIA,IACFA,EAAS,KAAOE,GAGlBF,EAAWE,EAEJC,EAAKtC,CAAI,CAClB,CAGA,SAASsC,EAAKtC,EAAM,CAClB,GAAIA,IAASjB,EAAM,IAAK,CACtB2C,EAAQ,KAAKlO,EAAM,SAAS,EAC5BkO,EAAQ,KAAKlO,EAAM,SAAS,EAC5BkO,EAAQ,QAAQ1B,CAAI,EACpB,MACF,CAEA,OAAIe,EAAmBf,CAAI,GACzB0B,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAKlO,EAAM,SAAS,EACrB4O,IAITV,EAAQ,QAAQ1B,CAAI,EACbsC,EACT,CACF,CCxEO,MAAMC,GAAW,CAAC,SAAUC,EAAkB,EAG/CC,GAAqB,CAAC,SAAUC,EAAiB,EAQvD,SAASF,GAAmBd,EAAS,CACnC,MAAMiB,EAAO,KAEPC,EAAQ,CAAA,EACd,IAAIC,EAAY,EAEZC,EAEAC,EAEAC,EAEJ,OAAO9L,EAGP,SAASA,EAAM8I,EAAM,CAWnB,GAAI6C,EAAYD,EAAM,OAAQ,CAC5B,MAAMK,EAAOL,EAAMC,CAAS,EAC5B,OAAAF,EAAK,eAAiBM,EAAK,CAAC,EAC5B9R,EACE8R,EAAK,CAAC,EAAE,aACR,8DACR,EACavB,EAAQ,QACbuB,EAAK,CAAC,EAAE,aACRC,EACAC,CACR,EAAQnD,CAAI,CACR,CAGA,OAAOmD,EAAmBnD,CAAI,CAChC,CAGA,SAASkD,EAAiBlD,EAAM,CAW9B,GAVA7O,EACEwR,EAAK,eACL,4DACN,EAEIE,IAKIF,EAAK,eAAe,WAAY,CAClCA,EAAK,eAAe,WAAa,OAE7BG,GACFM,EAAS,EAKX,MAAMC,EAAmBV,EAAK,OAAO,OACrC,IAAIW,EAAkBD,EAElBlJ,EAGJ,KAAOmJ,KACL,GACEX,EAAK,OAAOW,CAAe,EAAE,CAAC,IAAM,QACpCX,EAAK,OAAOW,CAAe,EAAE,CAAC,EAAE,OAAS9P,EAAM,UAC/C,CACA2G,EAAQwI,EAAK,OAAOW,CAAe,EAAE,CAAC,EAAE,IACxC,KACF,CAGFnS,EAAOgJ,EAAO,oCAAoC,EAElDoJ,EAAeV,CAAS,EAGxB,IAAIlP,EAAQ0P,EAEZ,KAAO1P,EAAQgP,EAAK,OAAO,QACzBA,EAAK,OAAOhP,CAAK,EAAE,CAAC,EAAE,IAAM,CAAC,GAAGwG,CAAK,EACrCxG,IAIF,OAAAsL,GACE0D,EAAK,OACLW,EAAkB,EAClB,EACAX,EAAK,OAAO,MAAMU,CAAgB,CAC1C,EAGMV,EAAK,OAAO,OAAShP,EAEdwP,EAAmBnD,CAAI,CAChC,CAEA,OAAO9I,EAAM8I,CAAI,CACnB,CAGA,SAASmD,EAAmBnD,EAAM,CAMhC,GAAI6C,IAAcD,EAAM,OAAQ,CAI9B,GAAI,CAACE,EACH,OAAOU,EAAkBxD,CAAI,EAM/B,GAAI8C,EAAU,kBAAoBA,EAAU,iBAAiB,SAC3D,OAAOW,EAAUzD,CAAI,EAQvB2C,EAAK,UAAY,GACfG,EAAU,kBAAoB,CAACA,EAAU,8BAE7C,CAGA,OAAAH,EAAK,eAAiB,CAAA,EACfjB,EAAQ,MACbe,GACAiB,EACAC,CACN,EAAM3D,CAAI,CACR,CAGA,SAAS0D,EAAqB1D,EAAM,CAClC,OAAI8C,GAAWM,EAAS,EACxBG,EAAeV,CAAS,EACjBW,EAAkBxD,CAAI,CAC/B,CAGA,SAAS2D,EAAsB3D,EAAM,CACnC,OAAA2C,EAAK,OAAO,KAAKA,EAAK,IAAG,EAAG,IAAI,EAAIE,IAAcD,EAAM,OACxDI,EAAkBL,EAAK,MAAM,OACtBc,EAAUzD,CAAI,CACvB,CAGA,SAASwD,EAAkBxD,EAAM,CAE/B,OAAA2C,EAAK,eAAiB,CAAA,EACfjB,EAAQ,QACbe,GACAmB,EACAH,CACN,EAAMzD,CAAI,CACR,CAGA,SAAS4D,EAAkB5D,EAAM,CAC/B7O,OAAAA,EACEwR,EAAK,iBACL,wDACN,EACIxR,EACEwR,EAAK,eACL,sDACN,EACIE,IACAD,EAAM,KAAK,CAACD,EAAK,iBAAkBA,EAAK,cAAc,CAAC,EAEhDa,EAAkBxD,CAAI,CAC/B,CAGA,SAASyD,EAAUzD,EAAM,CACvB,GAAIA,IAASjB,EAAM,IAAK,CAClB+D,GAAWM,EAAS,EACxBG,EAAe,CAAC,EAChB7B,EAAQ,QAAQ1B,CAAI,EACpB,MACF,CAEA,OAAA8C,EAAYA,GAAaH,EAAK,OAAO,KAAKA,EAAK,IAAG,CAAE,EACpDjB,EAAQ,MAAMlO,EAAM,UAAW,CAC7B,WAAYsP,EACZ,YAAa9D,EAAU,gBACvB,SAAU+D,CAChB,CAAK,EAEMc,EAAa7D,CAAI,CAC1B,CAGA,SAAS6D,EAAa7D,EAAM,CAC1B,GAAIA,IAASjB,EAAM,IAAK,CACtB+E,EAAapC,EAAQ,KAAKlO,EAAM,SAAS,EAAG,EAAI,EAChD+P,EAAe,CAAC,EAChB7B,EAAQ,QAAQ1B,CAAI,EACpB,MACF,CAEA,OAAIe,EAAmBf,CAAI,GACzB0B,EAAQ,QAAQ1B,CAAI,EACpB8D,EAAapC,EAAQ,KAAKlO,EAAM,SAAS,CAAC,EAE1CqP,EAAY,EACZF,EAAK,UAAY,OACVzL,IAGTwK,EAAQ,QAAQ1B,CAAI,EACb6D,EACT,CAUA,SAASC,EAAazB,EAAO0B,EAAW,CACtC5S,EAAO2R,EAAW,oDAAoD,EACtE,MAAMkB,EAASrB,EAAK,YAAYN,CAAK,EAyCrC,GAxCI0B,GAAWC,EAAO,KAAK,IAAI,EAC/B3B,EAAM,SAAWU,EACbA,IAAYA,EAAW,KAAOV,GAClCU,EAAaV,EACbS,EAAU,WAAWT,EAAM,KAAK,EAChCS,EAAU,MAAMkB,CAAM,EAmClBrB,EAAK,OAAO,KAAKN,EAAM,MAAM,IAAI,EAAG,CACtC,IAAI1O,EAAQmP,EAAU,OAAO,OAE7B,KAAOnP,KACL,GAEEmP,EAAU,OAAOnP,CAAK,EAAE,CAAC,EAAE,MAAM,OAASqP,IAEzC,CAACF,EAAU,OAAOnP,CAAK,EAAE,CAAC,EAAE,KAE3BmP,EAAU,OAAOnP,CAAK,EAAE,CAAC,EAAE,IAAI,OAASqP,GAI1C,OAMJ,MAAMK,EAAmBV,EAAK,OAAO,OACrC,IAAIW,EAAkBD,EAElBY,EAEA9J,EAGJ,KAAOmJ,KACL,GACEX,EAAK,OAAOW,CAAe,EAAE,CAAC,IAAM,QACpCX,EAAK,OAAOW,CAAe,EAAE,CAAC,EAAE,OAAS9P,EAAM,UAC/C,CACA,GAAIyQ,EAAM,CACR9J,EAAQwI,EAAK,OAAOW,CAAe,EAAE,CAAC,EAAE,IACxC,KACF,CAEAW,EAAO,EACT,CAUF,IAPA9S,EAAOgJ,EAAO,oCAAoC,EAElDoJ,EAAeV,CAAS,EAGxBlP,EAAQ0P,EAED1P,EAAQgP,EAAK,OAAO,QACzBA,EAAK,OAAOhP,CAAK,EAAE,CAAC,EAAE,IAAM,CAAC,GAAGwG,CAAK,EACrCxG,IAIFsL,GACE0D,EAAK,OACLW,EAAkB,EAClB,EACAX,EAAK,OAAO,MAAMU,CAAgB,CAC1C,EAGMV,EAAK,OAAO,OAAShP,CACvB,CACF,CAQA,SAAS4P,EAAe1B,EAAM,CAC5B,IAAIlO,EAAQiP,EAAM,OAGlB,KAAOjP,KAAUkO,GAAM,CACrB,MAAMqC,EAAQtB,EAAMjP,CAAK,EACzBgP,EAAK,eAAiBuB,EAAM,CAAC,EAC7B/S,EACE+S,EAAM,CAAC,EAAE,KACT,sDACR,EACMA,EAAM,CAAC,EAAE,KAAK,KAAKvB,EAAMjB,CAAO,CAClC,CAEAkB,EAAM,OAASf,CACjB,CAEA,SAASuB,GAAY,CACnBjS,EACEwR,EAAK,eACL,2DACN,EACIxR,EAAO2R,EAAW,oDAAoD,EACtEA,EAAU,MAAM,CAAC/D,EAAM,GAAG,CAAC,EAC3BgE,EAAa,OACbD,EAAY,OACZH,EAAK,eAAe,WAAa,MACnC,CACF,CAQA,SAASD,GAAkBhB,EAASzQ,EAAIkT,EAAK,CAE3ChT,OAAAA,EACE,KAAK,OAAO,WAAW,QAAQ,KAC/B,yCACJ,EACSsQ,EACLC,EACAA,EAAQ,QAAQ,KAAK,OAAO,WAAW,SAAUzQ,EAAIkT,CAAG,EACxD3Q,EAAM,WACN,KAAK,OAAO,WAAW,QAAQ,KAAK,SAAS,cAAc,EACvD,OACAwL,EAAU,OAClB,CACA,CCnaO,SAASoF,GAAkBpE,EAAM,CACtC,GACEA,IAASjB,EAAM,KACfiC,GAA0BhB,CAAI,GAC9BmB,GAAkBnB,CAAI,EAEtB,OAAOhB,EAAU,yBAGnB,GAAIkC,GAAmBlB,CAAI,EACzB,OAAOhB,EAAU,yBAErB,CCrBO,SAASqF,GAAWpE,EAAYqE,EAAQC,EAAS,CAEtD,MAAMC,EAAS,CAAA,EACf,IAAI7Q,EAAQ,GAEZ,KAAO,EAAEA,EAAQsM,EAAW,QAAQ,CAClC,MAAMwE,EAAUxE,EAAWtM,CAAK,EAAE,WAE9B8Q,GAAW,CAACD,EAAO,SAASC,CAAO,IACrCH,EAASG,EAAQH,EAAQC,CAAO,EAChCC,EAAO,KAAKC,CAAO,EAEvB,CAEA,OAAOH,CACT,CCVO,MAAMI,GAAY,CACvB,KAAM,YACN,WAAYC,GACZ,SAAUC,EACZ,EAQA,SAASD,GAAoBL,EAAQC,EAAS,CAC5C,IAAI5Q,EAAQ,GAERkR,EAEAC,EAEA7I,EAEA8I,EAEAC,EAEAC,EAEAC,EAEAC,EAMJ,KAAO,EAAExR,EAAQ2Q,EAAO,QAEtB,GACEA,EAAO3Q,CAAK,EAAE,CAAC,IAAM,SACrB2Q,EAAO3Q,CAAK,EAAE,CAAC,EAAE,OAAS,qBAC1B2Q,EAAO3Q,CAAK,EAAE,CAAC,EAAE,QAKjB,IAHAkR,EAAOlR,EAGAkR,KAEL,GACEP,EAAOO,CAAI,EAAE,CAAC,IAAM,QACpBP,EAAOO,CAAI,EAAE,CAAC,EAAE,OAAS,qBACzBP,EAAOO,CAAI,EAAE,CAAC,EAAE,OAEhBN,EAAQ,eAAeD,EAAOO,CAAI,EAAE,CAAC,CAAC,EAAE,WAAW,CAAC,IAClDN,EAAQ,eAAeD,EAAO3Q,CAAK,EAAE,CAAC,CAAC,EAAE,WAAW,CAAC,EACvD,CAKA,IACG2Q,EAAOO,CAAI,EAAE,CAAC,EAAE,QAAUP,EAAO3Q,CAAK,EAAE,CAAC,EAAE,SAC3C2Q,EAAO3Q,CAAK,EAAE,CAAC,EAAE,IAAI,OAAS2Q,EAAO3Q,CAAK,EAAE,CAAC,EAAE,MAAM,QAAU,GAChE,GACG2Q,EAAOO,CAAI,EAAE,CAAC,EAAE,IAAI,OACnBP,EAAOO,CAAI,EAAE,CAAC,EAAE,MAAM,OACtBP,EAAO3Q,CAAK,EAAE,CAAC,EAAE,IAAI,OACrB2Q,EAAO3Q,CAAK,EAAE,CAAC,EAAE,MAAM,QACzB,GAGF,SAIFsR,EACEX,EAAOO,CAAI,EAAE,CAAC,EAAE,IAAI,OAASP,EAAOO,CAAI,EAAE,CAAC,EAAE,MAAM,OAAS,GAC5DP,EAAO3Q,CAAK,EAAE,CAAC,EAAE,IAAI,OAAS2Q,EAAO3Q,CAAK,EAAE,CAAC,EAAE,MAAM,OAAS,EAC1D,EACA,EAEN,MAAMuD,EAAQ,CAAC,GAAGoN,EAAOO,CAAI,EAAE,CAAC,EAAE,GAAG,EAC/BvK,EAAM,CAAC,GAAGgK,EAAO3Q,CAAK,EAAE,CAAC,EAAE,KAAK,EACtCyR,GAAUlO,EAAO,CAAC+N,CAAG,EACrBG,GAAU9K,EAAK2K,CAAG,EAElBF,EAAkB,CAChB,KAAME,EAAM,EAAIzR,EAAM,eAAiBA,EAAM,iBAC7C,MAAA0D,EACA,IAAK,CAAC,GAAGoN,EAAOO,CAAI,EAAE,CAAC,EAAE,GAAG,CACxC,EACUG,EAAkB,CAChB,KAAMC,EAAM,EAAIzR,EAAM,eAAiBA,EAAM,iBAC7C,MAAO,CAAC,GAAG8Q,EAAO3Q,CAAK,EAAE,CAAC,EAAE,KAAK,EACjC,IAAA2G,CACZ,EACU2B,EAAO,CACL,KAAMgJ,EAAM,EAAIzR,EAAM,WAAaA,EAAM,aACzC,MAAO,CAAC,GAAG8Q,EAAOO,CAAI,EAAE,CAAC,EAAE,GAAG,EAC9B,IAAK,CAAC,GAAGP,EAAO3Q,CAAK,EAAE,CAAC,EAAE,KAAK,CAC3C,EACUmR,EAAQ,CACN,KAAMG,EAAM,EAAIzR,EAAM,OAASA,EAAM,SACrC,MAAO,CAAC,GAAGuR,EAAgB,KAAK,EAChC,IAAK,CAAC,GAAGC,EAAgB,GAAG,CACxC,EAEUV,EAAOO,CAAI,EAAE,CAAC,EAAE,IAAM,CAAC,GAAGE,EAAgB,KAAK,EAC/CT,EAAO3Q,CAAK,EAAE,CAAC,EAAE,MAAQ,CAAC,GAAGqR,EAAgB,GAAG,EAEhDE,EAAa,CAAA,EAGTZ,EAAOO,CAAI,EAAE,CAAC,EAAE,IAAI,OAASP,EAAOO,CAAI,EAAE,CAAC,EAAE,MAAM,SACrDK,EAAa3F,GAAK2F,EAAY,CAC5B,CAAC,QAASZ,EAAOO,CAAI,EAAE,CAAC,EAAGN,CAAO,EAClC,CAAC,OAAQD,EAAOO,CAAI,EAAE,CAAC,EAAGN,CAAO,CAC/C,CAAa,GAIHW,EAAa3F,GAAK2F,EAAY,CAC5B,CAAC,QAASJ,EAAOP,CAAO,EACxB,CAAC,QAASQ,EAAiBR,CAAO,EAClC,CAAC,OAAQQ,EAAiBR,CAAO,EACjC,CAAC,QAAStI,EAAMsI,CAAO,CACnC,CAAW,EAGDpT,EACEoT,EAAQ,OAAO,WAAW,WAAW,KACrC,uCACZ,EAGUW,EAAa3F,GACX2F,EACAb,GACEE,EAAQ,OAAO,WAAW,WAAW,KACrCD,EAAO,MAAMO,EAAO,EAAGlR,CAAK,EAC5B4Q,CACd,CACA,EAGUW,EAAa3F,GAAK2F,EAAY,CAC5B,CAAC,OAAQjJ,EAAMsI,CAAO,EACtB,CAAC,QAASS,EAAiBT,CAAO,EAClC,CAAC,OAAQS,EAAiBT,CAAO,EACjC,CAAC,OAAQO,EAAOP,CAAO,CACnC,CAAW,EAGGD,EAAO3Q,CAAK,EAAE,CAAC,EAAE,IAAI,OAAS2Q,EAAO3Q,CAAK,EAAE,CAAC,EAAE,MAAM,QACvDwR,EAAS,EACTD,EAAa3F,GAAK2F,EAAY,CAC5B,CAAC,QAASZ,EAAO3Q,CAAK,EAAE,CAAC,EAAG4Q,CAAO,EACnC,CAAC,OAAQD,EAAO3Q,CAAK,EAAE,CAAC,EAAG4Q,CAAO,CAChD,CAAa,GAEDY,EAAS,EAGXlG,GAAOqF,EAAQO,EAAO,EAAGlR,EAAQkR,EAAO,EAAGK,CAAU,EAErDvR,EAAQkR,EAAOK,EAAW,OAASC,EAAS,EAC5C,KACF,EAQN,IAFAxR,EAAQ,GAED,EAAEA,EAAQ2Q,EAAO,QAClBA,EAAO3Q,CAAK,EAAE,CAAC,EAAE,OAAS,sBAC5B2Q,EAAO3Q,CAAK,EAAE,CAAC,EAAE,KAAO,QAI5B,OAAO2Q,CACT,CAOA,SAASM,GAAkBlD,EAASzQ,EAAI,CACtC,MAAMoU,EAAmB,KAAK,OAAO,WAAW,iBAAiB,KAC3DlD,EAAW,KAAK,SAChBhC,EAASiE,GAAkBjC,CAAQ,EAGzC,IAAImD,EAEJ,OAAOpO,EAYP,SAASA,EAAM8I,EAAM,CACnB7O,OAAAA,EACE6O,IAASjB,EAAM,UAAYiB,IAASjB,EAAM,WAC1C,iCACN,EACIuG,EAAStF,EACT0B,EAAQ,MAAM,mBAAmB,EAC1B6D,EAAOvF,CAAI,CACpB,CAYA,SAASuF,EAAOvF,EAAM,CACpB,GAAIA,IAASsF,EACX,OAAA5D,EAAQ,QAAQ1B,CAAI,EACbuF,EAGT,MAAMlD,EAAQX,EAAQ,KAAK,mBAAmB,EAGxC8D,EAAQpB,GAAkBpE,CAAI,EAGpC7O,EAAOkU,EAAkB,6CAA6C,EAEtE,MAAMR,EACJ,CAACW,GACAA,IAAUxG,EAAU,2BAA6BmB,GAClDkF,EAAiB,SAASrF,CAAI,EAC1ByF,EACJ,CAACtF,GACAA,IAAWnB,EAAU,2BAA6BwG,GACnDH,EAAiB,SAASlD,CAAQ,EAEpC,OAAAE,EAAM,MAAQ,GACZiD,IAAWvG,EAAM,SAAW8F,EAAOA,IAAS1E,GAAU,CAACsF,IAEzDpD,EAAM,OAAS,GACbiD,IAAWvG,EAAM,SAAW0G,EAAQA,IAAUD,GAAS,CAACX,IAEnD5T,EAAG+O,CAAI,CAChB,CACF,CAeA,SAASoF,GAAUjL,EAAOgL,EAAQ,CAChChL,EAAM,QAAUgL,EAChBhL,EAAM,QAAUgL,EAChBhL,EAAM,cAAgBgL,CACxB,CCxRO,MAAMO,GAAW,CAAC,KAAM,WAAY,SAAUC,EAAgB,EAOrE,SAASA,GAAiBjE,EAASzQ,EAAIkT,EAAK,CAC1C,IAAItC,EAAO,EAEX,OAAO3K,EAcP,SAASA,EAAM8I,EAAM,CACnB7O,OAAAA,EAAO6O,IAASjB,EAAM,SAAU,cAAc,EAC9C2C,EAAQ,MAAMlO,EAAM,QAAQ,EAC5BkO,EAAQ,MAAMlO,EAAM,cAAc,EAClCkO,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAKlO,EAAM,cAAc,EACjCkO,EAAQ,MAAMlO,EAAM,gBAAgB,EAC7BqR,CACT,CAcA,SAASA,EAAK7E,EAAM,CAClB,OAAIO,GAAWP,CAAI,GACjB0B,EAAQ,QAAQ1B,CAAI,EACb4F,GAGL5F,IAASjB,EAAM,OACVoF,EAAInE,CAAI,EAGV6F,EAAW7F,CAAI,CACxB,CAcA,SAAS4F,EAAmB5F,EAAM,CAEhC,OACEA,IAASjB,EAAM,UACfiB,IAASjB,EAAM,MACfiB,IAASjB,EAAM,KACf0B,GAAkBT,CAAI,GAGtB6B,EAAO,EACAiE,EAAyB9F,CAAI,GAG/B6F,EAAW7F,CAAI,CACxB,CAcA,SAAS8F,EAAyB9F,EAAM,CACtC,OAAIA,IAASjB,EAAM,OACjB2C,EAAQ,QAAQ1B,CAAI,EACpB6B,EAAO,EACAkE,IAKN/F,IAASjB,EAAM,UACdiB,IAASjB,EAAM,MACfiB,IAASjB,EAAM,KACf0B,GAAkBT,CAAI,IACxB6B,IAAS7C,EAAU,uBAEnB0C,EAAQ,QAAQ1B,CAAI,EACb8F,IAGTjE,EAAO,EACAgE,EAAW7F,CAAI,EACxB,CAYA,SAAS+F,EAAU/F,EAAM,CACvB,OAAIA,IAASjB,EAAM,aACjB2C,EAAQ,KAAKlO,EAAM,gBAAgB,EACnCkO,EAAQ,MAAMlO,EAAM,cAAc,EAClCkO,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAKlO,EAAM,cAAc,EACjCkO,EAAQ,KAAKlO,EAAM,QAAQ,EACpBvC,GAKP+O,IAASjB,EAAM,KACfiB,IAASjB,EAAM,OACfiB,IAASjB,EAAM,UACf4B,GAAaX,CAAI,EAEVmE,EAAInE,CAAI,GAGjB0B,EAAQ,QAAQ1B,CAAI,EACb+F,EACT,CAYA,SAASF,EAAW7F,EAAM,CACxB,OAAIA,IAASjB,EAAM,QACjB2C,EAAQ,QAAQ1B,CAAI,EACbgG,GAGLtF,GAAWV,CAAI,GACjB0B,EAAQ,QAAQ1B,CAAI,EACb6F,GAGF1B,EAAInE,CAAI,CACjB,CAYA,SAASgG,EAAiBhG,EAAM,CAC9B,OAAOS,GAAkBT,CAAI,EAAIiG,EAAWjG,CAAI,EAAImE,EAAInE,CAAI,CAC9D,CAYA,SAASiG,EAAWjG,EAAM,CACxB,OAAIA,IAASjB,EAAM,KACjB2C,EAAQ,QAAQ1B,CAAI,EACpB6B,EAAO,EACAmE,GAGLhG,IAASjB,EAAM,aAEjB2C,EAAQ,KAAKlO,EAAM,gBAAgB,EAAE,KAAOA,EAAM,cAClDkO,EAAQ,MAAMlO,EAAM,cAAc,EAClCkO,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAKlO,EAAM,cAAc,EACjCkO,EAAQ,KAAKlO,EAAM,QAAQ,EACpBvC,GAGFiV,EAAWlG,CAAI,CACxB,CAcA,SAASkG,EAAWlG,EAAM,CAExB,IACGA,IAASjB,EAAM,MAAQ0B,GAAkBT,CAAI,IAC9C6B,IAAS7C,EAAU,sBACnB,CACA,MAAMwC,EAAOxB,IAASjB,EAAM,KAAOmH,EAAaD,EAChD,OAAAvE,EAAQ,QAAQ1B,CAAI,EACbwB,CACT,CAEA,OAAO2C,EAAInE,CAAI,CACjB,CACF,CC9PO,MAAMmG,GAAY,CAAC,QAAS,GAAM,SAAUC,EAAiB,EAOpE,SAASA,GAAkB1E,EAASzQ,EAAIkT,EAAK,CAC3C,OAAOjN,EAgBP,SAASA,EAAM8I,EAAM,CACnB,OAAOiB,EAAcjB,CAAI,EACrByB,EAAaC,EAAS8D,EAAOhS,EAAM,UAAU,EAAEwM,CAAI,EACnDwF,EAAMxF,CAAI,CAChB,CAgBA,SAASwF,EAAMxF,EAAM,CACnB,OAAOA,IAASjB,EAAM,KAAOgC,EAAmBf,CAAI,EAAI/O,EAAG+O,CAAI,EAAImE,EAAInE,CAAI,CAC7E,CACF,CC7CO,MAAMqG,GAAa,CACxB,aAAc,CAAC,SAAUC,EAA8B,EACvD,KAAAC,GACA,KAAM,aACN,SAAUC,EACZ,EAOA,SAASA,GAAwB9E,EAASzQ,EAAIkT,EAAK,CACjD,MAAMxB,EAAO,KAEb,OAAOzL,EAYP,SAASA,EAAM8I,EAAM,CACnB,GAAIA,IAASjB,EAAM,YAAa,CAC9B,MAAMtD,EAAQkH,EAAK,eAEnBxR,OAAAA,EAAOsK,EAAO,sDAAsD,EAE/DA,EAAM,OACTiG,EAAQ,MAAMlO,EAAM,WAAY,CAAC,WAAY,EAAI,CAAC,EAClDiI,EAAM,KAAO,IAGfiG,EAAQ,MAAMlO,EAAM,gBAAgB,EACpCkO,EAAQ,MAAMlO,EAAM,gBAAgB,EACpCkO,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAKlO,EAAM,gBAAgB,EAC5BgS,CACT,CAEA,OAAOrB,EAAInE,CAAI,CACjB,CAYA,SAASwF,EAAMxF,EAAM,CACnB,OAAIiB,EAAcjB,CAAI,GACpB0B,EAAQ,MAAMlO,EAAM,0BAA0B,EAC9CkO,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAKlO,EAAM,0BAA0B,EAC7CkO,EAAQ,KAAKlO,EAAM,gBAAgB,EAC5BvC,IAGTyQ,EAAQ,KAAKlO,EAAM,gBAAgB,EAC5BvC,EAAG+O,CAAI,EAChB,CACF,CAeA,SAASsG,GAA+B5E,EAASzQ,EAAIkT,EAAK,CACxD,MAAMxB,EAAO,KAEb,OAAO8D,EAeP,SAASA,EAAUzG,EAAM,CACvB,OAAIiB,EAAcjB,CAAI,GAEpB7O,EACEwR,EAAK,OAAO,WAAW,QAAQ,KAC/B,yCACR,EAEalB,EACLC,EACAgF,EACAlT,EAAM,WACNmP,EAAK,OAAO,WAAW,QAAQ,KAAK,SAAS,cAAc,EACvD,OACA3D,EAAU,OACtB,EAAQgB,CAAI,GAGD0G,EAAW1G,CAAI,CACxB,CAeA,SAAS0G,EAAW1G,EAAM,CACxB,OAAO0B,EAAQ,QAAQ2E,GAAYpV,EAAIkT,CAAG,EAAEnE,CAAI,CAClD,CACF,CAGA,SAASuG,GAAK7E,EAAS,CACrBA,EAAQ,KAAKlO,EAAM,UAAU,CAC/B,CCnJO,MAAMmT,GAAkB,CAC7B,KAAM,kBACN,SAAUC,EACZ,EAOA,SAASA,GAAwBlF,EAASzQ,EAAIkT,EAAK,CACjD,OAAOjN,EAYP,SAASA,EAAM8I,EAAM,CACnB7O,OAAAA,EAAO6O,IAASjB,EAAM,UAAW,eAAe,EAChD2C,EAAQ,MAAMlO,EAAM,eAAe,EACnCkO,EAAQ,MAAMlO,EAAM,YAAY,EAChCkO,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAKlO,EAAM,YAAY,EACxB+R,CACT,CAYA,SAASA,EAAOvF,EAAM,CAEpB,OAAIc,GAAiBd,CAAI,GACvB0B,EAAQ,MAAMlO,EAAM,oBAAoB,EACxCkO,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAKlO,EAAM,oBAAoB,EACvCkO,EAAQ,KAAKlO,EAAM,eAAe,EAC3BvC,GAGFkT,EAAInE,CAAI,CACjB,CACF,CChDO,MAAMlB,GAAqB,CAChC,KAAM,qBACN,SAAU+H,EACZ,EAOA,SAASA,GAA2BnF,EAASzQ,EAAIkT,EAAK,CACpD,MAAMxB,EAAO,KACb,IAAId,EAAO,EAEPF,EAEAmF,EAEJ,OAAO5P,EAgBP,SAASA,EAAM8I,EAAM,CACnB7O,OAAAA,EAAO6O,IAASjB,EAAM,UAAW,cAAc,EAC/C2C,EAAQ,MAAMlO,EAAM,kBAAkB,EACtCkO,EAAQ,MAAMlO,EAAM,wBAAwB,EAC5CkO,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAKlO,EAAM,wBAAwB,EACpCqR,CACT,CAiBA,SAASA,EAAK7E,EAAM,CAClB,OAAIA,IAASjB,EAAM,YACjB2C,EAAQ,MAAMlO,EAAM,+BAA+B,EACnDkO,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAKlO,EAAM,+BAA+B,EAC3CuT,IAGTrF,EAAQ,MAAMlO,EAAM,uBAAuB,EAC3CmO,EAAM3C,EAAU,+BAChB8H,EAAOrG,GACAvP,EAAM8O,CAAI,EACnB,CAcA,SAAS+G,EAAQ/G,EAAM,CACrB,OAAIA,IAASjB,EAAM,YAAciB,IAASjB,EAAM,YAC9C2C,EAAQ,MAAMlO,EAAM,mCAAmC,EACvDkO,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAKlO,EAAM,mCAAmC,EACtDkO,EAAQ,MAAMlO,EAAM,uBAAuB,EAC3CmO,EAAM3C,EAAU,qCAChB8H,EAAOjG,GACA3P,IAGTwQ,EAAQ,MAAMlO,EAAM,uBAAuB,EAC3CmO,EAAM3C,EAAU,iCAChB8H,EAAOlG,GACA1P,EAAM8O,CAAI,EACnB,CAmBA,SAAS9O,EAAM8O,EAAM,CACnB,GAAIA,IAASjB,EAAM,WAAa8C,EAAM,CACpC,MAAMQ,EAAQX,EAAQ,KAAKlO,EAAM,uBAAuB,EAExD,OACEsT,IAASrG,IACT,CAAC5B,GAA8B8D,EAAK,eAAeN,CAAK,CAAC,EAElD8B,EAAInE,CAAI,GAKjB0B,EAAQ,MAAMlO,EAAM,wBAAwB,EAC5CkO,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAKlO,EAAM,wBAAwB,EAC3CkO,EAAQ,KAAKlO,EAAM,kBAAkB,EAC9BvC,EACT,CAEA,OAAI6V,EAAK9G,CAAI,GAAK6B,IAASF,GACzBD,EAAQ,QAAQ1B,CAAI,EACb9O,GAGFiT,EAAInE,CAAI,CACjB,CACF,CCrJA,MAAMgH,GAAsB,CAC1B,QAAS,GACT,SAAUC,EACZ,EAGaC,GAAa,CACxB,SAAU,GACV,KAAM,aACN,SAAUC,EACZ,EAOA,SAASA,GAAmBzF,EAASzQ,EAAIkT,EAAK,CAC5C,MAAMxB,EAAO,KAEPyE,EAAa,CAAC,QAAS,GAAM,SAAUC,CAAkB,EAC/D,IAAIC,EAAgB,EAChBC,EAAW,EAEXjC,EAEJ,OAAOpO,EAcP,SAASA,EAAM8I,EAAM,CAEnB,OAAOwH,EAAmBxH,CAAI,CAChC,CAcA,SAASwH,EAAmBxH,EAAM,CAChC7O,EACE6O,IAASjB,EAAM,aAAeiB,IAASjB,EAAM,MAC7C,yBACN,EAEI,MAAM0I,EAAO9E,EAAK,OAAOA,EAAK,OAAO,OAAS,CAAC,EAC/C,OAAA2E,EACEG,GAAQA,EAAK,CAAC,EAAE,OAASjU,EAAM,WAC3BiU,EAAK,CAAC,EAAE,eAAeA,EAAK,CAAC,EAAG,EAAI,EAAE,OACtC,EAENnC,EAAStF,EACT0B,EAAQ,MAAMlO,EAAM,UAAU,EAC9BkO,EAAQ,MAAMlO,EAAM,eAAe,EACnCkO,EAAQ,MAAMlO,EAAM,uBAAuB,EACpCkU,EAAa1H,CAAI,CAC1B,CAcA,SAAS0H,EAAa1H,EAAM,CAC1B,OAAIA,IAASsF,GACXiC,IACA7F,EAAQ,QAAQ1B,CAAI,EACb0H,GAGLH,EAAWvI,EAAU,0BAChBmF,EAAInE,CAAI,GAGjB0B,EAAQ,KAAKlO,EAAM,uBAAuB,EACnCyN,EAAcjB,CAAI,EACrByB,EAAaC,EAASiG,EAAYnU,EAAM,UAAU,EAAEwM,CAAI,EACxD2H,EAAW3H,CAAI,EACrB,CAcA,SAAS2H,EAAW3H,EAAM,CACxB,OAAIA,IAASjB,EAAM,KAAOgC,EAAmBf,CAAI,GAC/C0B,EAAQ,KAAKlO,EAAM,eAAe,EAC3BmP,EAAK,UACR1R,EAAG+O,CAAI,EACP0B,EAAQ,MAAMsF,GAAqBY,EAAgBpC,CAAK,EAAExF,CAAI,IAGpE0B,EAAQ,MAAMlO,EAAM,mBAAmB,EACvCkO,EAAQ,MAAMlO,EAAM,YAAa,CAAC,YAAawL,EAAU,iBAAiB,CAAC,EACpE9K,EAAK8L,CAAI,EAClB,CAcA,SAAS9L,EAAK8L,EAAM,CAClB,OAAIA,IAASjB,EAAM,KAAOgC,EAAmBf,CAAI,GAC/C0B,EAAQ,KAAKlO,EAAM,WAAW,EAC9BkO,EAAQ,KAAKlO,EAAM,mBAAmB,EAC/BmU,EAAW3H,CAAI,GAGpBiB,EAAcjB,CAAI,GACpB0B,EAAQ,KAAKlO,EAAM,WAAW,EAC9BkO,EAAQ,KAAKlO,EAAM,mBAAmB,EAC/BiO,EAAaC,EAASmG,EAAYrU,EAAM,UAAU,EAAEwM,CAAI,GAG7DA,IAASjB,EAAM,aAAeiB,IAASsF,EAClCnB,EAAInE,CAAI,GAGjB0B,EAAQ,QAAQ1B,CAAI,EACb9L,EACT,CAcA,SAAS2T,EAAW7H,EAAM,CACxB,OAAIA,IAASjB,EAAM,KAAOgC,EAAmBf,CAAI,EACxC2H,EAAW3H,CAAI,GAGxB0B,EAAQ,MAAMlO,EAAM,mBAAmB,EACvCkO,EAAQ,MAAMlO,EAAM,YAAa,CAAC,YAAawL,EAAU,iBAAiB,CAAC,EACpE8I,EAAK9H,CAAI,EAClB,CAcA,SAAS8H,EAAK9H,EAAM,CAClB,OAAIA,IAASjB,EAAM,KAAOgC,EAAmBf,CAAI,GAC/C0B,EAAQ,KAAKlO,EAAM,WAAW,EAC9BkO,EAAQ,KAAKlO,EAAM,mBAAmB,EAC/BmU,EAAW3H,CAAI,GAGpBA,IAASjB,EAAM,aAAeiB,IAASsF,EAClCnB,EAAInE,CAAI,GAGjB0B,EAAQ,QAAQ1B,CAAI,EACb8H,EACT,CAeA,SAASF,EAAe5H,EAAM,CAC5B7O,OAAAA,EAAO4P,EAAmBf,CAAI,EAAG,cAAc,EACxC0B,EAAQ,QAAQ0F,EAAY5B,EAAOuC,CAAa,EAAE/H,CAAI,CAC/D,CAcA,SAAS+H,EAAc/H,EAAM,CAC3B7O,OAAAA,EAAO4P,EAAmBf,CAAI,EAAG,cAAc,EAC/C0B,EAAQ,MAAMlO,EAAM,UAAU,EAC9BkO,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAKlO,EAAM,UAAU,EACtBwO,CACT,CAcA,SAASA,EAAahC,EAAM,CAC1B,OAAOsH,EAAgB,GAAKrG,EAAcjB,CAAI,EAC1CyB,EACEC,EACAsG,EACAxU,EAAM,WACN8T,EAAgB,CAC1B,EAAUtH,CAAI,EACNgI,EAAmBhI,CAAI,CAC7B,CAcA,SAASgI,EAAmBhI,EAAM,CAChC,OAAIA,IAASjB,EAAM,KAAOgC,EAAmBf,CAAI,EACxC0B,EAAQ,MAAMsF,GAAqBY,EAAgBpC,CAAK,EAAExF,CAAI,GAGvE0B,EAAQ,MAAMlO,EAAM,aAAa,EAC1ByU,EAAajI,CAAI,EAC1B,CAcA,SAASiI,EAAajI,EAAM,CAC1B,OAAIA,IAASjB,EAAM,KAAOgC,EAAmBf,CAAI,GAC/C0B,EAAQ,KAAKlO,EAAM,aAAa,EACzBwU,EAAmBhI,CAAI,IAGhC0B,EAAQ,QAAQ1B,CAAI,EACbiI,EACT,CAcA,SAASzC,EAAMxF,EAAM,CACnB,OAAA0B,EAAQ,KAAKlO,EAAM,UAAU,EACtBvC,EAAG+O,CAAI,CAChB,CAOA,SAASqH,EAAmB3F,EAASzQ,EAAIkT,EAAK,CAC5C,IAAItC,EAAO,EAEX,OAAOqG,EAOP,SAASA,EAAYlI,EAAM,CACzB7O,OAAAA,EAAO4P,EAAmBf,CAAI,EAAG,cAAc,EAC/C0B,EAAQ,MAAMlO,EAAM,UAAU,EAC9BkO,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAKlO,EAAM,UAAU,EACtB0D,CACT,CAcA,SAASA,EAAM8I,EAAM,CAEnB7O,OAAAA,EACEwR,EAAK,OAAO,WAAW,QAAQ,KAC/B,yCACR,EAGMjB,EAAQ,MAAMlO,EAAM,eAAe,EAC5ByN,EAAcjB,CAAI,EACrByB,EACEC,EACAyG,EACA3U,EAAM,WACNmP,EAAK,OAAO,WAAW,QAAQ,KAAK,SAAS,cAAc,EACvD,OACA3D,EAAU,OAC1B,EAAYgB,CAAI,EACNmI,EAAoBnI,CAAI,CAC9B,CAcA,SAASmI,EAAoBnI,EAAM,CACjC,OAAIA,IAASsF,GACX5D,EAAQ,MAAMlO,EAAM,uBAAuB,EACpC4U,EAAcpI,CAAI,GAGpBmE,EAAInE,CAAI,CACjB,CAcA,SAASoI,EAAcpI,EAAM,CAC3B,OAAIA,IAASsF,GACXzD,IACAH,EAAQ,QAAQ1B,CAAI,EACboI,GAGLvG,GAAQ0F,GACV7F,EAAQ,KAAKlO,EAAM,uBAAuB,EACnCyN,EAAcjB,CAAI,EACrByB,EAAaC,EAAS2G,EAAoB7U,EAAM,UAAU,EAAEwM,CAAI,EAChEqI,EAAmBrI,CAAI,GAGtBmE,EAAInE,CAAI,CACjB,CAcA,SAASqI,EAAmBrI,EAAM,CAChC,OAAIA,IAASjB,EAAM,KAAOgC,EAAmBf,CAAI,GAC/C0B,EAAQ,KAAKlO,EAAM,eAAe,EAC3BvC,EAAG+O,CAAI,GAGTmE,EAAInE,CAAI,CACjB,CACF,CACF,CAOA,SAASiH,GAA4BvF,EAASzQ,EAAIkT,EAAK,CACrD,MAAMxB,EAAO,KAEb,OAAOzL,EAOP,SAASA,EAAM8I,EAAM,CACnB,OAAIA,IAASjB,EAAM,IACVoF,EAAInE,CAAI,GAGjB7O,EAAO4P,EAAmBf,CAAI,EAAG,cAAc,EAC/C0B,EAAQ,MAAMlO,EAAM,UAAU,EAC9BkO,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAKlO,EAAM,UAAU,EACtB4O,EACT,CAOA,SAASA,EAAUpC,EAAM,CACvB,OAAO2C,EAAK,OAAO,KAAKA,EAAK,IAAG,EAAG,IAAI,EAAIwB,EAAInE,CAAI,EAAI/O,EAAG+O,CAAI,CAChE,CACF,CClfO,MAAMsI,GAAe,CAC1B,KAAM,eACN,SAAUC,EACZ,EAGMC,GAAe,CAAC,QAAS,GAAM,SAAUC,EAAoB,EAOnE,SAASF,GAAqB7G,EAASzQ,EAAIkT,EAAK,CAC9C,MAAMxB,EAAO,KACb,OAAOzL,EAgBP,SAASA,EAAM8I,EAAM,CAEnB7O,OAAAA,EAAO8P,EAAcjB,CAAI,CAAC,EAC1B0B,EAAQ,MAAMlO,EAAM,YAAY,EAGzBiO,EACLC,EACAgH,EACAlV,EAAM,WACNwL,EAAU,QAAU,CAC1B,EAAMgB,CAAI,CACR,CAYA,SAAS0I,EAAY1I,EAAM,CACzB,MAAMyH,EAAO9E,EAAK,OAAOA,EAAK,OAAO,OAAS,CAAC,EAC/C,OAAO8E,GACLA,EAAK,CAAC,EAAE,OAASjU,EAAM,YACvBiU,EAAK,CAAC,EAAE,eAAeA,EAAK,CAAC,EAAG,EAAI,EAAE,QAAUzI,EAAU,QACxD2J,EAAQ3I,CAAI,EACZmE,EAAInE,CAAI,CACd,CAYA,SAAS2I,EAAQ3I,EAAM,CACrB,OAAIA,IAASjB,EAAM,IACVyG,EAAMxF,CAAI,EAGfe,EAAmBf,CAAI,EAClB0B,EAAQ,QAAQ8G,GAAcG,EAASnD,CAAK,EAAExF,CAAI,GAG3D0B,EAAQ,MAAMlO,EAAM,aAAa,EAC1B+R,EAAOvF,CAAI,EACpB,CAYA,SAASuF,EAAOvF,EAAM,CACpB,OAAIA,IAASjB,EAAM,KAAOgC,EAAmBf,CAAI,GAC/C0B,EAAQ,KAAKlO,EAAM,aAAa,EACzBmV,EAAQ3I,CAAI,IAGrB0B,EAAQ,QAAQ1B,CAAI,EACbuF,EACT,CAGA,SAASC,EAAMxF,EAAM,CACnB,OAAA0B,EAAQ,KAAKlO,EAAM,YAAY,EAIxBvC,EAAG+O,CAAI,CAChB,CACF,CAOA,SAASyI,GAAqB/G,EAASzQ,EAAIkT,EAAK,CAC9C,MAAMxB,EAAO,KAEb,OAAO6F,EAaP,SAASA,EAAaxI,EAAM,CAG1B,OAAI2C,EAAK,OAAO,KAAKA,EAAK,IAAG,EAAG,IAAI,EAC3BwB,EAAInE,CAAI,EAGbe,EAAmBf,CAAI,GACzB0B,EAAQ,MAAMlO,EAAM,UAAU,EAC9BkO,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAKlO,EAAM,UAAU,EACtBgV,GASF/G,EACLC,EACAgH,EACAlV,EAAM,WACNwL,EAAU,QAAU,CAC1B,EAAMgB,CAAI,CACR,CAYA,SAAS0I,EAAY1I,EAAM,CACzB,MAAMyH,EAAO9E,EAAK,OAAOA,EAAK,OAAO,OAAS,CAAC,EAC/C,OAAO8E,GACLA,EAAK,CAAC,EAAE,OAASjU,EAAM,YACvBiU,EAAK,CAAC,EAAE,eAAeA,EAAK,CAAC,EAAG,EAAI,EAAE,QAAUzI,EAAU,QACxD/N,EAAG+O,CAAI,EACPe,EAAmBf,CAAI,EACrBwI,EAAaxI,CAAI,EACjBmE,EAAInE,CAAI,CAChB,CACF,CCxLO,MAAM4I,GAAW,CACtB,KAAM,WACN,SAAAzG,GACA,QAAS0G,GACT,SAAUC,EACZ,EAIA,SAASD,GAAgBvE,EAAQ,CAC/B,IAAIyE,EAAgBzE,EAAO,OAAS,EAChC0E,EAAiB,EAEjBrV,EAEAsV,EAGJ,IACG3E,EAAO0E,CAAc,EAAE,CAAC,EAAE,OAASxV,EAAM,YACxC8Q,EAAO0E,CAAc,EAAE,CAAC,EAAE,OAAS,WACpC1E,EAAOyE,CAAa,EAAE,CAAC,EAAE,OAASvV,EAAM,YACvC8Q,EAAOyE,CAAa,EAAE,CAAC,EAAE,OAAS,UAKpC,IAHApV,EAAQqV,EAGD,EAAErV,EAAQoV,GACf,GAAIzE,EAAO3Q,CAAK,EAAE,CAAC,EAAE,OAASH,EAAM,aAAc,CAEhD8Q,EAAO0E,CAAc,EAAE,CAAC,EAAE,KAAOxV,EAAM,gBACvC8Q,EAAOyE,CAAa,EAAE,CAAC,EAAE,KAAOvV,EAAM,gBACtCwV,GAAkB,EAClBD,GAAiB,EACjB,KACF,EAQJ,IAHApV,EAAQqV,EAAiB,EACzBD,IAEO,EAAEpV,GAASoV,GACZE,IAAU,OAEVtV,IAAUoV,GACVzE,EAAO3Q,CAAK,EAAE,CAAC,EAAE,OAASH,EAAM,aAEhCyV,EAAQtV,IAGVA,IAAUoV,GACVzE,EAAO3Q,CAAK,EAAE,CAAC,EAAE,OAASH,EAAM,cAEhC8Q,EAAO2E,CAAK,EAAE,CAAC,EAAE,KAAOzV,EAAM,aAE1BG,IAAUsV,EAAQ,IACpB3E,EAAO2E,CAAK,EAAE,CAAC,EAAE,IAAM3E,EAAO3Q,EAAQ,CAAC,EAAE,CAAC,EAAE,IAC5C2Q,EAAO,OAAO2E,EAAQ,EAAGtV,EAAQsV,EAAQ,CAAC,EAC1CF,GAAiBpV,EAAQsV,EAAQ,EACjCtV,EAAQsV,EAAQ,GAGlBA,EAAQ,QAIZ,OAAO3E,CACT,CAOA,SAASnC,GAASnC,EAAM,CAEtB,OACEA,IAASjB,EAAM,aACf,KAAK,OAAO,KAAK,OAAO,OAAS,CAAC,EAAE,CAAC,EAAE,OAASvL,EAAM,eAE1D,CAOA,SAASsV,GAAiBpH,EAASzQ,EAAIkT,EAAK,CAC1C,MAAMxB,EAAO,KACb,IAAI4E,EAAW,EAEX1F,EAEAQ,EAEJ,OAAOnL,EAcP,SAASA,EAAM8I,EAAM,CACnB7O,OAAAA,EAAO6O,IAASjB,EAAM,YAAa,kBAAkB,EACrD5N,EAAOgR,GAAS,KAAKQ,EAAMA,EAAK,QAAQ,EAAG,2BAA2B,EACtEjB,EAAQ,MAAMlO,EAAM,QAAQ,EAC5BkO,EAAQ,MAAMlO,EAAM,gBAAgB,EAC7BkU,EAAa1H,CAAI,CAC1B,CAYA,SAAS0H,EAAa1H,EAAM,CAC1B,OAAIA,IAASjB,EAAM,aACjB2C,EAAQ,QAAQ1B,CAAI,EACpBuH,IACOG,IAGThG,EAAQ,KAAKlO,EAAM,gBAAgB,EAC5B0V,EAAQlJ,CAAI,EACrB,CAYA,SAASkJ,EAAQlJ,EAAM,CAErB,OAAIA,IAASjB,EAAM,IACVoF,EAAInE,CAAI,EAMbA,IAASjB,EAAM,OACjB2C,EAAQ,MAAM,OAAO,EACrBA,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK,OAAO,EACbwH,GAILlJ,IAASjB,EAAM,aACjBsD,EAAQX,EAAQ,MAAMlO,EAAM,gBAAgB,EAC5CqO,EAAO,EACAuG,EAAcpI,CAAI,GAGvBe,EAAmBf,CAAI,GACzB0B,EAAQ,MAAMlO,EAAM,UAAU,EAC9BkO,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAKlO,EAAM,UAAU,EACtB0V,IAITxH,EAAQ,MAAMlO,EAAM,YAAY,EACzB8O,EAAKtC,CAAI,EAClB,CAYA,SAASsC,EAAKtC,EAAM,CAClB,OACEA,IAASjB,EAAM,KACfiB,IAASjB,EAAM,OACfiB,IAASjB,EAAM,aACfgC,EAAmBf,CAAI,GAEvB0B,EAAQ,KAAKlO,EAAM,YAAY,EACxB0V,EAAQlJ,CAAI,IAGrB0B,EAAQ,QAAQ1B,CAAI,EACbsC,EACT,CAYA,SAAS8F,EAAcpI,EAAM,CAE3B,OAAIA,IAASjB,EAAM,aACjB2C,EAAQ,QAAQ1B,CAAI,EACpB6B,IACOuG,GAILvG,IAAS0F,GACX7F,EAAQ,KAAKlO,EAAM,gBAAgB,EACnCkO,EAAQ,KAAKlO,EAAM,QAAQ,EACpBvC,EAAG+O,CAAI,IAIhBqC,EAAM,KAAO7O,EAAM,aACZ8O,EAAKtC,CAAI,EAClB,CACF,CCjOO,MAAMmJ,EAAa,CAOxB,YAAYC,EAAS,CAEnB,KAAK,KAAOA,EAAU,CAAC,GAAGA,CAAO,EAAI,CAAA,EAErC,KAAK,MAAQ,CAAA,CACf,CAWA,IAAIzV,EAAO,CACT,GAAIA,EAAQ,GAAKA,GAAS,KAAK,KAAK,OAAS,KAAK,MAAM,OACtD,MAAM,IAAI,WACR,wBACEA,EACA,kCACC,KAAK,KAAK,OAAS,KAAK,MAAM,QAC/B,GACV,EAGI,OAAIA,EAAQ,KAAK,KAAK,OAAe,KAAK,KAAKA,CAAK,EAC7C,KAAK,MAAM,KAAK,MAAM,OAASA,EAAQ,KAAK,KAAK,OAAS,CAAC,CACpE,CAMA,IAAI,QAAS,CACX,OAAO,KAAK,KAAK,OAAS,KAAK,MAAM,MACvC,CASA,OAAQ,CACN,YAAK,UAAU,CAAC,EACT,KAAK,MAAM,IAAG,CACvB,CAaA,MAAMuD,EAAOoD,EAAK,CAEhB,MAAM+O,EACJ/O,GAAoC,OAAO,kBAE7C,OAAI+O,EAAO,KAAK,KAAK,OACZ,KAAK,KAAK,MAAMnS,EAAOmS,CAAI,EAGhCnS,EAAQ,KAAK,KAAK,OACb,KAAK,MACT,MACC,KAAK,MAAM,OAASmS,EAAO,KAAK,KAAK,OACrC,KAAK,MAAM,OAASnS,EAAQ,KAAK,KAAK,MAChD,EACS,QAAO,EAGL,KAAK,KACT,MAAMA,CAAK,EACX,OACC,KAAK,MAAM,MAAM,KAAK,MAAM,OAASmS,EAAO,KAAK,KAAK,MAAM,EAAE,QAAO,CAC7E,CACE,CAsBA,OAAOnS,EAAOoS,EAAalK,EAAO,CAEhC,MAAM7B,EAAQ+L,GAAe,EAE7B,KAAK,UAAU,KAAK,MAAMpS,CAAK,CAAC,EAChC,MAAMqS,EAAU,KAAK,MAAM,OACzB,KAAK,MAAM,OAAShM,EACpB,OAAO,iBACb,EACI,OAAI6B,GAAOoK,GAAY,KAAK,KAAMpK,CAAK,EAChCmK,EAAQ,QAAO,CACxB,CAUA,KAAM,CACJ,YAAK,UAAU,OAAO,iBAAiB,EAChC,KAAK,KAAK,IAAG,CACtB,CAWA,KAAKtG,EAAM,CACT,KAAK,UAAU,OAAO,iBAAiB,EACvC,KAAK,KAAK,KAAKA,CAAI,CACrB,CAWA,SAAS7D,EAAO,CACd,KAAK,UAAU,OAAO,iBAAiB,EACvCoK,GAAY,KAAK,KAAMpK,CAAK,CAC9B,CAWA,QAAQ6D,EAAM,CACZ,KAAK,UAAU,CAAC,EAChB,KAAK,MAAM,KAAKA,CAAI,CACtB,CAWA,YAAY7D,EAAO,CACjB,KAAK,UAAU,CAAC,EAChBoK,GAAY,KAAK,MAAOpK,EAAM,QAAO,CAAE,CACzC,CAcA,UAAU,EAAG,CACX,GACE,MAAM,KAAK,KAAK,QACf,EAAI,KAAK,KAAK,QAAU,KAAK,MAAM,SAAW,GAC9C,EAAI,GAAK,KAAK,KAAK,SAAW,GAGjC,GAAI,EAAI,KAAK,KAAK,OAAQ,CAExB,MAAMmK,EAAU,KAAK,KAAK,OAAO,EAAG,OAAO,iBAAiB,EAC5DC,GAAY,KAAK,MAAOD,EAAQ,QAAO,CAAE,CAC3C,KAAO,CAEL,MAAMA,EAAU,KAAK,MAAM,OACzB,KAAK,KAAK,OAAS,KAAK,MAAM,OAAS,EACvC,OAAO,iBACf,EACMC,GAAY,KAAK,KAAMD,EAAQ,QAAO,CAAE,CAC1C,CACF,CACF,CAcA,SAASC,GAAYtK,EAAMa,EAAO,CAEhC,IAAIV,EAAa,EAEjB,GAAIU,EAAM,OAASf,EAAU,mBAC3BE,EAAK,KAAK,GAAGa,CAAK,MAElB,MAAOV,EAAaU,EAAM,QACxBb,EAAK,KACH,GAAGa,EAAM,MAAMV,EAAYA,EAAaL,EAAU,kBAAkB,CAC5E,EACMK,GAAcL,EAAU,kBAG9B,CC1QO,SAASyK,GAAYC,EAAa,CAEvC,MAAMC,EAAQ,CAAA,EACd,IAAIhW,EAAQ,GAERiW,EAEAC,EAEAC,EAEAC,EAEAzK,EAEA0K,EAEAC,EACJ,MAAM3F,EAAS,IAAI6E,GAAaO,CAAW,EAE3C,KAAO,EAAE/V,EAAQ2Q,EAAO,QAAQ,CAC9B,KAAO3Q,KAASgW,GACdhW,EAAQgW,EAAMhW,CAAK,EAOrB,GAJAiW,EAAQtF,EAAO,IAAI3Q,CAAK,EAKtBA,GACAiW,EAAM,CAAC,EAAE,OAASpW,EAAM,WACxB8Q,EAAO,IAAI3Q,EAAQ,CAAC,EAAE,CAAC,EAAE,OAASH,EAAM,iBAExCrC,EAAOyY,EAAM,CAAC,EAAE,WAAY,oCAAoC,EAChEI,EAAYJ,EAAM,CAAC,EAAE,WAAW,OAChCE,EAAa,EAGXA,EAAaE,EAAU,QACvBA,EAAUF,CAAU,EAAE,CAAC,EAAE,OAAStW,EAAM,kBAExCsW,GAAc,GAIdA,EAAaE,EAAU,QACvBA,EAAUF,CAAU,EAAE,CAAC,EAAE,OAAStW,EAAM,SAExC,KAAO,EAAEsW,EAAaE,EAAU,QAC1BA,EAAUF,CAAU,EAAE,CAAC,EAAE,OAAStW,EAAM,SAIxCwW,EAAUF,CAAU,EAAE,CAAC,EAAE,OAAStW,EAAM,YAC1CwW,EAAUF,CAAU,EAAE,CAAC,EAAE,4BAA8B,GACvDA,KAOR,GAAIF,EAAM,CAAC,IAAM,QACXA,EAAM,CAAC,EAAE,cACX,OAAO,OAAOD,EAAOO,GAAW5F,EAAQ3Q,CAAK,CAAC,EAC9CA,EAAQgW,EAAMhW,CAAK,EACnBsW,EAAO,YAIFL,EAAM,CAAC,EAAE,WAAY,CAI5B,IAHAE,EAAanW,EACbkW,EAAY,OAELC,KAGL,GAFAC,EAAazF,EAAO,IAAIwF,CAAU,EAGhCC,EAAW,CAAC,EAAE,OAASvW,EAAM,YAC7BuW,EAAW,CAAC,EAAE,OAASvW,EAAM,gBAEzBuW,EAAW,CAAC,IAAM,UAChBF,IACFvF,EAAO,IAAIuF,CAAS,EAAE,CAAC,EAAE,KAAOrW,EAAM,iBAGxCuW,EAAW,CAAC,EAAE,KAAOvW,EAAM,WAC3BqW,EAAYC,WAGd,EAAAC,EAAW,CAAC,EAAE,OAASvW,EAAM,YAC7BuW,EAAW,CAAC,EAAE,OAASvW,EAAM,gBAI7B,MAIAqW,IAEFD,EAAM,CAAC,EAAE,IAAM,CAAC,GAAGtF,EAAO,IAAIuF,CAAS,EAAE,CAAC,EAAE,KAAK,EAGjDvK,EAAagF,EAAO,MAAMuF,EAAWlW,CAAK,EAC1C2L,EAAW,QAAQsK,CAAK,EACxBtF,EAAO,OAAOuF,EAAWlW,EAAQkW,EAAY,EAAGvK,CAAU,EAE9D,CACF,CAGA,OAAAL,GAAOyK,EAAa,EAAG,OAAO,kBAAmBpF,EAAO,MAAM,CAAC,CAAC,EACzD,CAAC2F,CACV,CAYA,SAASC,GAAW5F,EAAQ6F,EAAY,CACtC,MAAM9H,EAAQiC,EAAO,IAAI6F,CAAU,EAAE,CAAC,EAChC5F,EAAUD,EAAO,IAAI6F,CAAU,EAAE,CAAC,EACxC,IAAIC,EAAgBD,EAAa,EAEjC,MAAME,EAAiB,CAAA,EACvBlZ,EAAOkR,EAAM,YAAa,qCAAqC,EAE/D,IAAIiI,EAAYjI,EAAM,WAEjBiI,IACHA,EAAY/F,EAAQ,OAAOlC,EAAM,WAAW,EAAEA,EAAM,KAAK,EAErDA,EAAM,2BACRiI,EAAU,yBAA2B,KAIzC,MAAMC,EAAcD,EAAU,OAExBX,EAAQ,CAAA,EAERa,EAAO,CAAA,EAEb,IAAIxG,EAEA7B,EACAxO,EAAQ,GAER8W,EAAUpI,EACVqI,EAAS,EACTxT,EAAQ,EACZ,MAAMyT,EAAS,CAACzT,CAAK,EAIrB,KAAOuT,GAAS,CAEd,KAAOnG,EAAO,IAAI,EAAE8F,CAAa,EAAE,CAAC,IAAMK,GAAS,CAInDtZ,EACE,CAACgR,GAAYsI,EAAQ,WAAatI,EAClC,4BACN,EACIhR,EAAO,CAACgR,GAAYA,EAAS,OAASsI,EAAS,wBAAwB,EAEvEJ,EAAe,KAAKD,CAAa,EAE5BK,EAAQ,aACXzG,EAASO,EAAQ,YAAYkG,CAAO,EAE/BA,EAAQ,MACXzG,EAAO,KAAKjF,EAAM,GAAG,EAGnBoD,GACFmI,EAAU,WAAWG,EAAQ,KAAK,EAGhCA,EAAQ,8BACVH,EAAU,mCAAqC,IAGjDA,EAAU,MAAMtG,CAAM,EAElByG,EAAQ,8BACVH,EAAU,mCAAqC,SAKnDnI,EAAWsI,EACXA,EAAUA,EAAQ,IACpB,CAMA,IAFAA,EAAUpI,EAEH,EAAE1O,EAAQ4W,EAAY,QAGzBA,EAAY5W,CAAK,EAAE,CAAC,IAAM,QAC1B4W,EAAY5W,EAAQ,CAAC,EAAE,CAAC,IAAM,SAC9B4W,EAAY5W,CAAK,EAAE,CAAC,EAAE,OAAS4W,EAAY5W,EAAQ,CAAC,EAAE,CAAC,EAAE,MACzD4W,EAAY5W,CAAK,EAAE,CAAC,EAAE,MAAM,OAAS4W,EAAY5W,CAAK,EAAE,CAAC,EAAE,IAAI,OAE/DxC,EAAOsZ,EAAS,0BAA0B,EAC1CvT,EAAQvD,EAAQ,EAChBgX,EAAO,KAAKzT,CAAK,EAEjBuT,EAAQ,WAAa,OACrBA,EAAQ,SAAW,OACnBA,EAAUA,EAAQ,MAuBtB,IAlBAH,EAAU,OAAS,CAAA,EAKfG,GAEFA,EAAQ,WAAa,OACrBA,EAAQ,SAAW,OACnBtZ,EAAO,CAACsZ,EAAQ,KAAM,wBAAwB,GAE9CE,EAAO,IAAG,EAKZhX,EAAQgX,EAAO,OAERhX,KAAS,CACd,MAAMiX,EAAQL,EAAY,MAAMI,EAAOhX,CAAK,EAAGgX,EAAOhX,EAAQ,CAAC,CAAC,EAC1DuD,EAAQmT,EAAe,IAAG,EAChClZ,EAAO+F,IAAU,OAAW,yCAAyC,EACrEyS,EAAM,KAAK,CAACzS,EAAOA,EAAQ0T,EAAM,OAAS,CAAC,CAAC,EAC5CtG,EAAO,OAAOpN,EAAO,EAAG0T,CAAK,CAC/B,CAKA,IAHAjB,EAAM,QAAO,EACbhW,EAAQ,GAED,EAAEA,EAAQgW,EAAM,QACrBa,EAAKE,EAASf,EAAMhW,CAAK,EAAE,CAAC,CAAC,EAAI+W,EAASf,EAAMhW,CAAK,EAAE,CAAC,EACxD+W,GAAUf,EAAMhW,CAAK,EAAE,CAAC,EAAIgW,EAAMhW,CAAK,EAAE,CAAC,EAAI,EAGhD,OAAO6W,CACT,CCtQO,MAAM1I,GAAU,CAAC,QAAS+I,GAAgB,SAAUC,EAAe,EAGpEC,GAAwB,CAAC,QAAS,GAAM,SAAUC,EAAoB,EAQ5E,SAASH,GAAevG,EAAQ,CAC9B,OAAAmF,GAAYnF,CAAM,EACXA,CACT,CAOA,SAASwG,GAAgBpJ,EAASzQ,EAAI,CAEpC,IAAIkR,EAEJ,OAAO9C,EAYP,SAASA,EAAWW,EAAM,CACxB7O,OAAAA,EACE6O,IAASjB,EAAM,KAAO,CAACgC,EAAmBf,CAAI,EAC9C,wBACN,EAEI0B,EAAQ,MAAMlO,EAAM,OAAO,EAC3B2O,EAAWT,EAAQ,MAAMlO,EAAM,aAAc,CAC3C,YAAawL,EAAU,kBAC7B,CAAK,EACMiM,EAAYjL,CAAI,CACzB,CAYA,SAASiL,EAAYjL,EAAM,CACzB,OAAIA,IAASjB,EAAM,IACVmM,EAAWlL,CAAI,EAKpBe,EAAmBf,CAAI,EAClB0B,EAAQ,MACbqJ,GACAI,EACAD,CACR,EAAQlL,CAAI,GAIR0B,EAAQ,QAAQ1B,CAAI,EACbiL,EACT,CAOA,SAASC,EAAWlL,EAAM,CACxB,OAAA0B,EAAQ,KAAKlO,EAAM,YAAY,EAC/BkO,EAAQ,KAAKlO,EAAM,OAAO,EACnBvC,EAAG+O,CAAI,CAChB,CAOA,SAASmL,EAAgBnL,EAAM,CAC7B7O,OAAAA,EAAO4P,EAAmBf,CAAI,EAAG,cAAc,EAC/C0B,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAKlO,EAAM,YAAY,EAC/BrC,EAAOgR,EAAU,yBAAyB,EAC1CA,EAAS,KAAOT,EAAQ,MAAMlO,EAAM,aAAc,CAChD,YAAawL,EAAU,mBACvB,SAAAmD,CACN,CAAK,EACDA,EAAWA,EAAS,KACb8I,CACT,CACF,CAOA,SAASD,GAAqBtJ,EAASzQ,EAAIkT,EAAK,CAC9C,MAAMxB,EAAO,KAEb,OAAOyI,EAOP,SAASA,EAAepL,EAAM,CAC5B7O,OAAAA,EAAO4P,EAAmBf,CAAI,EAAG,wBAAwB,EACzD0B,EAAQ,KAAKlO,EAAM,YAAY,EAC/BkO,EAAQ,MAAMlO,EAAM,UAAU,EAC9BkO,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAKlO,EAAM,UAAU,EACtBiO,EAAaC,EAAS2J,EAAU7X,EAAM,UAAU,CACzD,CAOA,SAAS6X,EAASrL,EAAM,CACtB,GAAIA,IAASjB,EAAM,KAAOgC,EAAmBf,CAAI,EAC/C,OAAOmE,EAAInE,CAAI,EAIjB7O,EACEwR,EAAK,OAAO,WAAW,QAAQ,KAC/B,yCACN,EAEI,MAAM8E,EAAO9E,EAAK,OAAOA,EAAK,OAAO,OAAS,CAAC,EAE/C,MACE,CAACA,EAAK,OAAO,WAAW,QAAQ,KAAK,SAAS,cAAc,GAC5D8E,GACAA,EAAK,CAAC,EAAE,OAASjU,EAAM,YACvBiU,EAAK,CAAC,EAAE,eAAeA,EAAK,CAAC,EAAG,EAAI,EAAE,QAAUzI,EAAU,QAEnD/N,EAAG+O,CAAI,EAGT0B,EAAQ,UAAUiB,EAAK,OAAO,WAAW,KAAMwB,EAAKlT,CAAE,EAAE+O,CAAI,CACrE,CACF,CCxIO,SAASsL,GACd5J,EACAzQ,EACAkT,EACA9J,EACAkR,EACAC,EACAC,EACAC,EACA/J,EACA,CACA,MAAMC,EAAQD,GAAO,OAAO,kBAC5B,IAAIgK,EAAU,EAEd,OAAOzU,EAcP,SAASA,EAAM8I,EAAM,CACnB,OAAIA,IAASjB,EAAM,UACjB2C,EAAQ,MAAMrH,CAAI,EAClBqH,EAAQ,MAAM6J,CAAW,EACzB7J,EAAQ,MAAM8J,CAAiB,EAC/B9J,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK8J,CAAiB,EACvBI,GAKP5L,IAASjB,EAAM,KACfiB,IAASjB,EAAM,OACfiB,IAASjB,EAAM,kBACf4B,GAAaX,CAAI,EAEVmE,EAAInE,CAAI,GAGjB0B,EAAQ,MAAMrH,CAAI,EAClBqH,EAAQ,MAAM+J,CAAO,EACrB/J,EAAQ,MAAMgK,CAAU,EACxBhK,EAAQ,MAAMlO,EAAM,YAAa,CAAC,YAAawL,EAAU,iBAAiB,CAAC,EACpE6M,EAAI7L,CAAI,EACjB,CAYA,SAAS4L,EAAe5L,EAAM,CAC5B,OAAIA,IAASjB,EAAM,aACjB2C,EAAQ,MAAM8J,CAAiB,EAC/B9J,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAK8J,CAAiB,EAC9B9J,EAAQ,KAAK6J,CAAW,EACxB7J,EAAQ,KAAKrH,CAAI,EACVpJ,IAGTyQ,EAAQ,MAAMgK,CAAU,EACxBhK,EAAQ,MAAMlO,EAAM,YAAa,CAAC,YAAawL,EAAU,iBAAiB,CAAC,EACpE8M,EAAS9L,CAAI,EACtB,CAYA,SAAS8L,EAAS9L,EAAM,CACtB,OAAIA,IAASjB,EAAM,aACjB2C,EAAQ,KAAKlO,EAAM,WAAW,EAC9BkO,EAAQ,KAAKgK,CAAU,EAChBE,EAAe5L,CAAI,GAI1BA,IAASjB,EAAM,KACfiB,IAASjB,EAAM,UACfgC,EAAmBf,CAAI,EAEhBmE,EAAInE,CAAI,GAGjB0B,EAAQ,QAAQ1B,CAAI,EACbA,IAASjB,EAAM,UAAYgN,EAAiBD,EACrD,CAYA,SAASC,EAAe/L,EAAM,CAC5B,OACEA,IAASjB,EAAM,UACfiB,IAASjB,EAAM,aACfiB,IAASjB,EAAM,WAEf2C,EAAQ,QAAQ1B,CAAI,EACb8L,GAGFA,EAAS9L,CAAI,CACtB,CAYA,SAAS6L,EAAI7L,EAAM,CACjB,MACE,CAAC2L,IACA3L,IAASjB,EAAM,KACdiB,IAASjB,EAAM,kBACfiC,GAA0BhB,CAAI,IAEhC0B,EAAQ,KAAKlO,EAAM,WAAW,EAC9BkO,EAAQ,KAAKgK,CAAU,EACvBhK,EAAQ,KAAK+J,CAAO,EACpB/J,EAAQ,KAAKrH,CAAI,EACVpJ,EAAG+O,CAAI,GAGZ2L,EAAU/J,GAAS5B,IAASjB,EAAM,iBACpC2C,EAAQ,QAAQ1B,CAAI,EACpB2L,IACOE,GAGL7L,IAASjB,EAAM,kBACjB2C,EAAQ,QAAQ1B,CAAI,EACpB2L,IACOE,GAOP7L,IAASjB,EAAM,KACfiB,IAASjB,EAAM,OACfiB,IAASjB,EAAM,iBACf4B,GAAaX,CAAI,EAEVmE,EAAInE,CAAI,GAGjB0B,EAAQ,QAAQ1B,CAAI,EACbA,IAASjB,EAAM,UAAYiN,EAAYH,EAChD,CAYA,SAASG,EAAUhM,EAAM,CACvB,OACEA,IAASjB,EAAM,iBACfiB,IAASjB,EAAM,kBACfiB,IAASjB,EAAM,WAEf2C,EAAQ,QAAQ1B,CAAI,EACb6L,GAGFA,EAAI7L,CAAI,CACjB,CACF,CClNO,SAASiM,GAAavK,EAASzQ,EAAIkT,EAAK9J,EAAM6R,EAAYR,EAAY,CAC3E,MAAM/I,EAAO,KACb,IAAId,EAAO,EAEPoC,EAEJ,OAAO/M,EAYP,SAASA,EAAM8I,EAAM,CACnB7O,OAAAA,EAAO6O,IAASjB,EAAM,kBAAmB,cAAc,EACvD2C,EAAQ,MAAMrH,CAAI,EAClBqH,EAAQ,MAAMwK,CAAU,EACxBxK,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAKwK,CAAU,EACvBxK,EAAQ,MAAMgK,CAAU,EACjB/C,CACT,CAYA,SAASA,EAAQ3I,EAAM,CACrB,OACE6B,EAAO7C,EAAU,sBACjBgB,IAASjB,EAAM,KACfiB,IAASjB,EAAM,mBACdiB,IAASjB,EAAM,oBAAsB,CAACkF,GAMtCjE,IAASjB,EAAM,OACd,CAAC8C,GACD,2BAA4Bc,EAAK,OAAO,WAEnCwB,EAAInE,CAAI,EAGbA,IAASjB,EAAM,oBACjB2C,EAAQ,KAAKgK,CAAU,EACvBhK,EAAQ,MAAMwK,CAAU,EACxBxK,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAKwK,CAAU,EACvBxK,EAAQ,KAAKrH,CAAI,EACVpJ,GAIL8P,EAAmBf,CAAI,GACzB0B,EAAQ,MAAMlO,EAAM,UAAU,EAC9BkO,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAKlO,EAAM,UAAU,EACtBmV,IAGTjH,EAAQ,MAAMlO,EAAM,YAAa,CAAC,YAAawL,EAAU,iBAAiB,CAAC,EACpEmN,EAAYnM,CAAI,EACzB,CAYA,SAASmM,EAAYnM,EAAM,CACzB,OACEA,IAASjB,EAAM,KACfiB,IAASjB,EAAM,mBACfiB,IAASjB,EAAM,oBACfgC,EAAmBf,CAAI,GACvB6B,IAAS7C,EAAU,sBAEnB0C,EAAQ,KAAKlO,EAAM,WAAW,EACvBmV,EAAQ3I,CAAI,IAGrB0B,EAAQ,QAAQ1B,CAAI,EACfiE,IAAMA,EAAO,CAAChD,EAAcjB,CAAI,GAC9BA,IAASjB,EAAM,UAAYqN,EAAcD,EAClD,CAYA,SAASC,EAAYpM,EAAM,CACzB,OACEA,IAASjB,EAAM,mBACfiB,IAASjB,EAAM,WACfiB,IAASjB,EAAM,oBAEf2C,EAAQ,QAAQ1B,CAAI,EACpB6B,IACOsK,GAGFA,EAAYnM,CAAI,CACzB,CACF,CC/HO,SAASqM,GAAa3K,EAASzQ,EAAIkT,EAAK9J,EAAM6R,EAAYR,EAAY,CAE3E,IAAIpG,EAEJ,OAAOpO,EAYP,SAASA,EAAM8I,EAAM,CACnB,OACEA,IAASjB,EAAM,eACfiB,IAASjB,EAAM,YACfiB,IAASjB,EAAM,iBAEf2C,EAAQ,MAAMrH,CAAI,EAClBqH,EAAQ,MAAMwK,CAAU,EACxBxK,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAKwK,CAAU,EACvB5G,EAAStF,IAASjB,EAAM,gBAAkBA,EAAM,iBAAmBiB,EAC5DsM,GAGFnI,EAAInE,CAAI,CACjB,CAcA,SAASsM,EAAMtM,EAAM,CACnB,OAAIA,IAASsF,GACX5D,EAAQ,MAAMwK,CAAU,EACxBxK,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAKwK,CAAU,EACvBxK,EAAQ,KAAKrH,CAAI,EACVpJ,IAGTyQ,EAAQ,MAAMgK,CAAU,EACjB/C,EAAQ3I,CAAI,EACrB,CAYA,SAAS2I,EAAQ3I,EAAM,CACrB,OAAIA,IAASsF,GACX5D,EAAQ,KAAKgK,CAAU,EAChBY,EAAMhH,CAAM,GAGjBtF,IAASjB,EAAM,IACVoF,EAAInE,CAAI,EAIbe,EAAmBf,CAAI,GAEzB0B,EAAQ,MAAMlO,EAAM,UAAU,EAC9BkO,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAKlO,EAAM,UAAU,EACtBiO,EAAaC,EAASiH,EAASnV,EAAM,UAAU,IAGxDkO,EAAQ,MAAMlO,EAAM,YAAa,CAAC,YAAawL,EAAU,iBAAiB,CAAC,EACpEuG,EAAOvF,CAAI,EACpB,CAOA,SAASuF,EAAOvF,EAAM,CACpB,OAAIA,IAASsF,GAAUtF,IAASjB,EAAM,KAAOgC,EAAmBf,CAAI,GAClE0B,EAAQ,KAAKlO,EAAM,WAAW,EACvBmV,EAAQ3I,CAAI,IAGrB0B,EAAQ,QAAQ1B,CAAI,EACbA,IAASjB,EAAM,UAAYwN,EAAShH,EAC7C,CAYA,SAASgH,EAAOvM,EAAM,CACpB,OAAIA,IAASsF,GAAUtF,IAASjB,EAAM,WACpC2C,EAAQ,QAAQ1B,CAAI,EACbuF,GAGFA,EAAOvF,CAAI,CACpB,CACF,CC9IO,SAASwM,GAAkB9K,EAASzQ,EAAI,CAE7C,IAAIgT,EAEJ,OAAO/M,EAGP,SAASA,EAAM8I,EAAM,CACnB,OAAIe,EAAmBf,CAAI,GACzB0B,EAAQ,MAAMlO,EAAM,UAAU,EAC9BkO,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAKlO,EAAM,UAAU,EAC7ByQ,EAAO,GACA/M,GAGL+J,EAAcjB,CAAI,EACbyB,EACLC,EACAxK,EACA+M,EAAOzQ,EAAM,WAAaA,EAAM,UACxC,EAAQwM,CAAI,EAGD/O,EAAG+O,CAAI,CAChB,CACF,CC5BO,MAAMtN,GAAa,CAAC,KAAM,aAAc,SAAU+Z,EAAkB,EAGrEC,GAAc,CAAC,QAAS,GAAM,SAAUC,EAAmB,EAOjE,SAASF,GAAmB/K,EAASzQ,EAAIkT,EAAK,CAC5C,MAAMxB,EAAO,KAEb,IAAIiK,EAEJ,OAAO1V,EAYP,SAASA,EAAM8I,EAAM,CAInB,OAAA0B,EAAQ,MAAMlO,EAAM,UAAU,EACvB2M,EAAOH,CAAI,CACpB,CAYA,SAASG,EAAOH,EAAM,CAEpB7O,OAAAA,EAAO6O,IAASjB,EAAM,kBAAmB,cAAc,EAChDkN,GAAa,KAClBtJ,EACAjB,EACAmL,EAEA1I,EACA3Q,EAAM,gBACNA,EAAM,sBACNA,EAAM,qBACZ,EAAMwM,CAAI,CACR,CAYA,SAAS6M,EAAW7M,EAAM,CAKxB,OAJA4M,EAAatM,GACXqC,EAAK,eAAeA,EAAK,OAAOA,EAAK,OAAO,OAAS,CAAC,EAAE,CAAC,CAAC,EAAE,MAAM,EAAG,EAAE,CAC7E,EAEQ3C,IAASjB,EAAM,OACjB2C,EAAQ,MAAMlO,EAAM,gBAAgB,EACpCkO,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAKlO,EAAM,gBAAgB,EAC5BsZ,GAGF3I,EAAInE,CAAI,CACjB,CAYA,SAAS8M,EAAY9M,EAAM,CAEzB,OAAOgB,GAA0BhB,CAAI,EACjCwM,GAAkB9K,EAASqL,CAAiB,EAAE/M,CAAI,EAClD+M,EAAkB/M,CAAI,CAC5B,CAYA,SAAS+M,EAAkB/M,EAAM,CAC/B,OAAOsL,GACL5J,EACAsL,EAEA7I,EACA3Q,EAAM,sBACNA,EAAM,6BACNA,EAAM,mCACNA,EAAM,yBACNA,EAAM,2BACZ,EAAMwM,CAAI,CACR,CAYA,SAASgN,EAAiBhN,EAAM,CAC9B,OAAO0B,EAAQ,QAAQgL,GAAalH,EAAOA,CAAK,EAAExF,CAAI,CACxD,CAcA,SAASwF,EAAMxF,EAAM,CACnB,OAAOiB,EAAcjB,CAAI,EACrByB,EAAaC,EAASuL,EAAiBzZ,EAAM,UAAU,EAAEwM,CAAI,EAC7DiN,EAAgBjN,CAAI,CAC1B,CAcA,SAASiN,EAAgBjN,EAAM,CAC7B,OAAIA,IAASjB,EAAM,KAAOgC,EAAmBf,CAAI,GAC/C0B,EAAQ,KAAKlO,EAAM,UAAU,EAK7BmP,EAAK,OAAO,QAAQ,KAAKiK,CAAU,EAK5B3b,EAAG+O,CAAI,GAGTmE,EAAInE,CAAI,CACjB,CACF,CAOA,SAAS2M,GAAoBjL,EAASzQ,EAAIkT,EAAK,CAC7C,OAAOuI,EAcP,SAASA,EAAY1M,EAAM,CACzB,OAAOgB,GAA0BhB,CAAI,EACjCwM,GAAkB9K,EAASwL,CAAY,EAAElN,CAAI,EAC7CmE,EAAInE,CAAI,CACd,CAaA,SAASkN,EAAalN,EAAM,CAC1B,OAAOqM,GACL3K,EACAyL,EACAhJ,EACA3Q,EAAM,gBACNA,EAAM,sBACNA,EAAM,qBACZ,EAAMwM,CAAI,CACR,CAYA,SAASmN,EAAWnN,EAAM,CACxB,OAAOiB,EAAcjB,CAAI,EACrByB,EACEC,EACA0L,EACA5Z,EAAM,UAChB,EAAUwM,CAAI,EACNoN,EAA6BpN,CAAI,CACvC,CAYA,SAASoN,EAA6BpN,EAAM,CAC1C,OAAOA,IAASjB,EAAM,KAAOgC,EAAmBf,CAAI,EAAI/O,EAAG+O,CAAI,EAAImE,EAAInE,CAAI,CAC7E,CACF,CCxRO,MAAMqN,GAAkB,CAC7B,KAAM,kBACN,SAAUC,EACZ,EAOA,SAASA,GAAwB5L,EAASzQ,EAAIkT,EAAK,CACjD,OAAOjN,EAaP,SAASA,EAAM8I,EAAM,CACnB7O,OAAAA,EAAO6O,IAASjB,EAAM,UAAW,eAAe,EAChD2C,EAAQ,MAAMlO,EAAM,eAAe,EACnCkO,EAAQ,QAAQ1B,CAAI,EACbwF,CACT,CAaA,SAASA,EAAMxF,EAAM,CACnB,OAAIe,EAAmBf,CAAI,GACzB0B,EAAQ,KAAKlO,EAAM,eAAe,EAC3BvC,EAAG+O,CAAI,GAGTmE,EAAInE,CAAI,CACjB,CACF,CC1CO,MAAMuN,GAAa,CACxB,KAAM,aACN,QAASC,GACT,SAAUC,EACZ,EAGA,SAASD,GAAkBlJ,EAAQC,EAAS,CAC1C,IAAI2G,EAAa5G,EAAO,OAAS,EAC7BtC,EAAe,EAEfF,EAEA7F,EAGJ,OAAIqI,EAAOtC,CAAY,EAAE,CAAC,EAAE,OAASxO,EAAM,aACzCwO,GAAgB,GAKhBkJ,EAAa,EAAIlJ,GACjBsC,EAAO4G,CAAU,EAAE,CAAC,EAAE,OAAS1X,EAAM,aAErC0X,GAAc,GAId5G,EAAO4G,CAAU,EAAE,CAAC,EAAE,OAAS1X,EAAM,qBACpCwO,IAAiBkJ,EAAa,GAC5BA,EAAa,EAAIlJ,GAChBsC,EAAO4G,EAAa,CAAC,EAAE,CAAC,EAAE,OAAS1X,EAAM,cAE7C0X,GAAclJ,EAAe,IAAMkJ,EAAa,EAAI,GAGlDA,EAAalJ,IACfF,EAAU,CACR,KAAMtO,EAAM,eACZ,MAAO8Q,EAAOtC,CAAY,EAAE,CAAC,EAAE,MAC/B,IAAKsC,EAAO4G,CAAU,EAAE,CAAC,EAAE,GACjC,EACIjP,EAAO,CACL,KAAMzI,EAAM,UACZ,MAAO8Q,EAAOtC,CAAY,EAAE,CAAC,EAAE,MAC/B,IAAKsC,EAAO4G,CAAU,EAAE,CAAC,EAAE,IAC3B,YAAalM,EAAU,eAC7B,EAEIC,GAAOqF,EAAQtC,EAAckJ,EAAalJ,EAAe,EAAG,CAC1D,CAAC,QAASF,EAASyC,CAAO,EAC1B,CAAC,QAAStI,EAAMsI,CAAO,EACvB,CAAC,OAAQtI,EAAMsI,CAAO,EACtB,CAAC,OAAQzC,EAASyC,CAAO,CAC/B,CAAK,GAGID,CACT,CAOA,SAASmJ,GAAmB/L,EAASzQ,EAAIkT,EAAK,CAC5C,IAAItC,EAAO,EAEX,OAAO3K,EAYP,SAASA,EAAM8I,EAAM,CAEnB,OAAA0B,EAAQ,MAAMlO,EAAM,UAAU,EACvB2M,EAAOH,CAAI,CACpB,CAYA,SAASG,EAAOH,EAAM,CACpB7O,OAAAA,EAAO6O,IAASjB,EAAM,WAAY,cAAc,EAChD2C,EAAQ,MAAMlO,EAAM,kBAAkB,EAC/BkU,EAAa1H,CAAI,CAC1B,CAYA,SAAS0H,EAAa1H,EAAM,CAC1B,OACEA,IAASjB,EAAM,YACf8C,IAAS7C,EAAU,+BAEnB0C,EAAQ,QAAQ1B,CAAI,EACb0H,GAIL1H,IAASjB,EAAM,KAAOiC,GAA0BhB,CAAI,GACtD0B,EAAQ,KAAKlO,EAAM,kBAAkB,EAC9BmV,EAAQ3I,CAAI,GAGdmE,EAAInE,CAAI,CACjB,CAYA,SAAS2I,EAAQ3I,EAAM,CACrB,OAAIA,IAASjB,EAAM,YACjB2C,EAAQ,MAAMlO,EAAM,kBAAkB,EAC/Bka,EAAgB1N,CAAI,GAGzBA,IAASjB,EAAM,KAAOgC,EAAmBf,CAAI,GAC/C0B,EAAQ,KAAKlO,EAAM,UAAU,EAItBvC,EAAG+O,CAAI,GAGZiB,EAAcjB,CAAI,EACbyB,EAAaC,EAASiH,EAASnV,EAAM,UAAU,EAAEwM,CAAI,GAK9D0B,EAAQ,MAAMlO,EAAM,cAAc,EAC3B8O,EAAKtC,CAAI,EAClB,CAcA,SAAS0N,EAAgB1N,EAAM,CAC7B,OAAIA,IAASjB,EAAM,YACjB2C,EAAQ,QAAQ1B,CAAI,EACb0N,IAGThM,EAAQ,KAAKlO,EAAM,kBAAkB,EAC9BmV,EAAQ3I,CAAI,EACrB,CAYA,SAASsC,EAAKtC,EAAM,CAClB,OACEA,IAASjB,EAAM,KACfiB,IAASjB,EAAM,YACfiC,GAA0BhB,CAAI,GAE9B0B,EAAQ,KAAKlO,EAAM,cAAc,EAC1BmV,EAAQ3I,CAAI,IAGrB0B,EAAQ,QAAQ1B,CAAI,EACbsC,EACT,CACF,CCzNO,MAAMqL,GAAiB,CAC5B,UACA,UACA,QACA,OACA,WACA,aACA,OACA,UACA,SACA,MACA,WACA,KACA,UACA,SACA,MACA,MACA,KACA,KACA,WACA,aACA,SACA,SACA,OACA,QACA,WACA,KACA,KACA,KACA,KACA,KACA,KACA,OACA,SACA,KACA,OACA,SACA,SACA,KACA,OACA,OACA,OACA,WACA,MACA,WACA,KACA,WACA,SACA,IACA,QACA,SACA,UACA,UACA,QACA,QACA,KACA,QACA,KACA,QACA,QACA,KACA,QACA,IACF,EAcaC,GAAe,CAAC,MAAO,SAAU,QAAS,UAAU,ECpEpDC,GAAW,CACtB,SAAU,GACV,KAAM,WACN,UAAWC,GACX,SAAUC,EACZ,EAGMC,GAAkB,CAAC,QAAS,GAAM,SAAUC,EAAuB,EACnEC,GAA2B,CAC/B,QAAS,GACT,SAAUC,EACZ,EAGA,SAASL,GAAkBxJ,EAAQ,CACjC,IAAI3Q,EAAQ2Q,EAAO,OAEnB,KAAO3Q,KAEH,EAAA2Q,EAAO3Q,CAAK,EAAE,CAAC,IAAM,SACrB2Q,EAAO3Q,CAAK,EAAE,CAAC,EAAE,OAASH,EAAM,WAFlC,CAQF,OAAIG,EAAQ,GAAK2Q,EAAO3Q,EAAQ,CAAC,EAAE,CAAC,EAAE,OAASH,EAAM,aAEnD8Q,EAAO3Q,CAAK,EAAE,CAAC,EAAE,MAAQ2Q,EAAO3Q,EAAQ,CAAC,EAAE,CAAC,EAAE,MAE9C2Q,EAAO3Q,EAAQ,CAAC,EAAE,CAAC,EAAE,MAAQ2Q,EAAO3Q,EAAQ,CAAC,EAAE,CAAC,EAAE,MAElD2Q,EAAO,OAAO3Q,EAAQ,EAAG,CAAC,GAGrB2Q,CACT,CAOA,SAASyJ,GAAiBrM,EAASzQ,EAAIkT,EAAK,CAC1C,MAAMxB,EAAO,KAEb,IAAI2C,EAEA8I,EAEAC,EAEA1a,EAEA2a,EAEJ,OAAOpX,EAYP,SAASA,EAAM8I,EAAM,CAEnB,OAAOG,EAAOH,CAAI,CACpB,CAYA,SAASG,EAAOH,EAAM,CACpB7O,OAAAA,EAAO6O,IAASjB,EAAM,SAAU,cAAc,EAC9C2C,EAAQ,MAAMlO,EAAM,QAAQ,EAC5BkO,EAAQ,MAAMlO,EAAM,YAAY,EAChCkO,EAAQ,QAAQ1B,CAAI,EACb6E,CACT,CAgBA,SAASA,EAAK7E,EAAM,CAClB,OAAIA,IAASjB,EAAM,iBACjB2C,EAAQ,QAAQ1B,CAAI,EACbuO,GAGLvO,IAASjB,EAAM,OACjB2C,EAAQ,QAAQ1B,CAAI,EACpBoO,EAAa,GACNI,GAGLxO,IAASjB,EAAM,cACjB2C,EAAQ,QAAQ1B,CAAI,EACpBsF,EAAStG,EAAU,gBAMZ2D,EAAK,UAAY1R,EAAKwd,GAI3BlO,GAAWP,CAAI,GACjB7O,EAAO6O,IAAS,IAAI,EACpB0B,EAAQ,QAAQ1B,CAAI,EACpBqO,EAAS,OAAO,aAAarO,CAAI,EAC1B0O,GAGFvK,EAAInE,CAAI,CACjB,CAgBA,SAASuO,EAAgBvO,EAAM,CAC7B,OAAIA,IAASjB,EAAM,MACjB2C,EAAQ,QAAQ1B,CAAI,EACpBsF,EAAStG,EAAU,YACZ2P,GAGL3O,IAASjB,EAAM,mBACjB2C,EAAQ,QAAQ1B,CAAI,EACpBsF,EAAStG,EAAU,UACnBrL,EAAQ,EACDib,GAILrO,GAAWP,CAAI,GACjB0B,EAAQ,QAAQ1B,CAAI,EACpBsF,EAAStG,EAAU,gBAGZ2D,EAAK,UAAY1R,EAAKwd,GAGxBtK,EAAInE,CAAI,CACjB,CAYA,SAAS2O,EAAkB3O,EAAM,CAC/B,OAAIA,IAASjB,EAAM,MACjB2C,EAAQ,QAAQ1B,CAAI,EAGb2C,EAAK,UAAY1R,EAAKwd,GAGxBtK,EAAInE,CAAI,CACjB,CAYA,SAAS4O,EAAgB5O,EAAM,CAC7B,MAAM9O,GAAQ8N,EAAU,mBAExB,OAAIgB,IAAS9O,GAAM,WAAWyC,GAAO,GACnC+N,EAAQ,QAAQ1B,CAAI,EAEhBrM,IAAUzC,GAAM,OAGXyR,EAAK,UAAY1R,EAAK4d,EAGxBD,GAGFzK,EAAInE,CAAI,CACjB,CAYA,SAASwO,EAAcxO,EAAM,CAC3B,OAAIO,GAAWP,CAAI,GACjB7O,EAAO6O,IAAS,IAAI,EACpB0B,EAAQ,QAAQ1B,CAAI,EACpBqO,EAAS,OAAO,aAAarO,CAAI,EAC1B0O,GAGFvK,EAAInE,CAAI,CACjB,CAcA,SAAS0O,EAAQ1O,EAAM,CACrB,GACEA,IAASjB,EAAM,KACfiB,IAASjB,EAAM,OACfiB,IAASjB,EAAM,aACfiC,GAA0BhB,CAAI,EAC9B,CACA,MAAM8O,GAAQ9O,IAASjB,EAAM,MACvBhN,GAAOsc,EAAO,YAAW,EAE/B,MAAI,CAACS,IAAS,CAACV,GAAcR,GAAa,SAAS7b,EAAI,GACrDuT,EAAStG,EAAU,QAGZ2D,EAAK,UAAY1R,EAAG+O,CAAI,EAAI6O,EAAa7O,CAAI,GAGlD2N,GAAe,SAASU,EAAO,YAAW,CAAE,GAC9C/I,EAAStG,EAAU,UAEf8P,IACFpN,EAAQ,QAAQ1B,CAAI,EACb+O,GAKFpM,EAAK,UAAY1R,EAAG+O,CAAI,EAAI6O,EAAa7O,CAAI,IAGtDsF,EAAStG,EAAU,aAEZ2D,EAAK,WAAa,CAACA,EAAK,OAAO,KAAKA,EAAK,IAAG,EAAG,IAAI,EACtDwB,EAAInE,CAAI,EACRoO,EACEY,EAAwBhP,CAAI,EAC5BiP,EAA4BjP,CAAI,EACxC,CAGA,OAAIA,IAASjB,EAAM,MAAQ0B,GAAkBT,CAAI,GAC/C0B,EAAQ,QAAQ1B,CAAI,EACpBqO,GAAU,OAAO,aAAarO,CAAI,EAC3B0O,GAGFvK,EAAInE,CAAI,CACjB,CAYA,SAAS+O,EAAiB/O,EAAM,CAC9B,OAAIA,IAASjB,EAAM,aACjB2C,EAAQ,QAAQ1B,CAAI,EAGb2C,EAAK,UAAY1R,EAAK4d,GAGxB1K,EAAInE,CAAI,CACjB,CAYA,SAASgP,EAAwBhP,EAAM,CACrC,OAAIiB,EAAcjB,CAAI,GACpB0B,EAAQ,QAAQ1B,CAAI,EACbgP,GAGFE,EAAYlP,CAAI,CACzB,CAyBA,SAASiP,EAA4BjP,EAAM,CACzC,OAAIA,IAASjB,EAAM,OACjB2C,EAAQ,QAAQ1B,CAAI,EACbkP,GAILlP,IAASjB,EAAM,OAASiB,IAASjB,EAAM,YAAcwB,GAAWP,CAAI,GACtE0B,EAAQ,QAAQ1B,CAAI,EACbmP,GAGLlO,EAAcjB,CAAI,GACpB0B,EAAQ,QAAQ1B,CAAI,EACbiP,GAGFC,EAAYlP,CAAI,CACzB,CAgBA,SAASmP,EAAsBnP,EAAM,CAEnC,OACEA,IAASjB,EAAM,MACfiB,IAASjB,EAAM,KACfiB,IAASjB,EAAM,OACfiB,IAASjB,EAAM,YACf0B,GAAkBT,CAAI,GAEtB0B,EAAQ,QAAQ1B,CAAI,EACbmP,GAGFC,EAA2BpP,CAAI,CACxC,CAeA,SAASoP,EAA2BpP,EAAM,CACxC,OAAIA,IAASjB,EAAM,UACjB2C,EAAQ,QAAQ1B,CAAI,EACbqP,GAGLpO,EAAcjB,CAAI,GACpB0B,EAAQ,QAAQ1B,CAAI,EACboP,GAGFH,EAA4BjP,CAAI,CACzC,CAeA,SAASqP,EAA6BrP,EAAM,CAC1C,OACEA,IAASjB,EAAM,KACfiB,IAASjB,EAAM,UACfiB,IAASjB,EAAM,UACfiB,IAASjB,EAAM,aACfiB,IAASjB,EAAM,YAERoF,EAAInE,CAAI,EAGbA,IAASjB,EAAM,eAAiBiB,IAASjB,EAAM,YACjD2C,EAAQ,QAAQ1B,CAAI,EACpBsO,EAAUtO,EACHsP,GAGLrO,EAAcjB,CAAI,GACpB0B,EAAQ,QAAQ1B,CAAI,EACbqP,GAGFE,EAA+BvP,CAAI,CAC5C,CAcA,SAASsP,EAA6BtP,EAAM,CAC1C,OAAIA,IAASsO,GACX5M,EAAQ,QAAQ1B,CAAI,EACpBsO,EAAU,KACHkB,GAGLxP,IAASjB,EAAM,KAAOgC,EAAmBf,CAAI,EACxCmE,EAAInE,CAAI,GAGjB0B,EAAQ,QAAQ1B,CAAI,EACbsP,EACT,CAYA,SAASC,EAA+BvP,EAAM,CAC5C,OACEA,IAASjB,EAAM,KACfiB,IAASjB,EAAM,eACfiB,IAASjB,EAAM,YACfiB,IAASjB,EAAM,OACfiB,IAASjB,EAAM,UACfiB,IAASjB,EAAM,UACfiB,IAASjB,EAAM,aACfiB,IAASjB,EAAM,aACfiC,GAA0BhB,CAAI,EAEvBoP,EAA2BpP,CAAI,GAGxC0B,EAAQ,QAAQ1B,CAAI,EACbuP,EACT,CAaA,SAASC,EAAkCxP,EAAM,CAC/C,OACEA,IAASjB,EAAM,OACfiB,IAASjB,EAAM,aACfkC,EAAcjB,CAAI,EAEXiP,EAA4BjP,CAAI,EAGlCmE,EAAInE,CAAI,CACjB,CAYA,SAASkP,EAAYlP,EAAM,CACzB,OAAIA,IAASjB,EAAM,aACjB2C,EAAQ,QAAQ1B,CAAI,EACbyP,GAGFtL,EAAInE,CAAI,CACjB,CAYA,SAASyP,EAAczP,EAAM,CAC3B,OAAIA,IAASjB,EAAM,KAAOgC,EAAmBf,CAAI,EAGxC6O,EAAa7O,CAAI,EAGtBiB,EAAcjB,CAAI,GACpB0B,EAAQ,QAAQ1B,CAAI,EACbyP,GAGFtL,EAAInE,CAAI,CACjB,CAYA,SAAS6O,EAAa7O,EAAM,CAC1B,OAAIA,IAASjB,EAAM,MAAQuG,IAAWtG,EAAU,aAC9C0C,EAAQ,QAAQ1B,CAAI,EACb0P,GAGL1P,IAASjB,EAAM,UAAYuG,IAAWtG,EAAU,SAClD0C,EAAQ,QAAQ1B,CAAI,EACb2P,GAGL3P,IAASjB,EAAM,aAAeuG,IAAWtG,EAAU,iBACrD0C,EAAQ,QAAQ1B,CAAI,EACb4P,IAGL5P,IAASjB,EAAM,cAAgBuG,IAAWtG,EAAU,iBACtD0C,EAAQ,QAAQ1B,CAAI,EACbyO,GAGLzO,IAASjB,EAAM,oBAAsBuG,IAAWtG,EAAU,WAC5D0C,EAAQ,QAAQ1B,CAAI,EACb6P,IAIP9O,EAAmBf,CAAI,IACtBsF,IAAWtG,EAAU,WAAasG,IAAWtG,EAAU,eAExD0C,EAAQ,KAAKlO,EAAM,YAAY,EACxBkO,EAAQ,MACbsM,GACA8B,GACAC,CACR,EAAQ/P,CAAI,GAGJA,IAASjB,EAAM,KAAOgC,EAAmBf,CAAI,GAC/C0B,EAAQ,KAAKlO,EAAM,YAAY,EACxBuc,EAAkB/P,CAAI,IAG/B0B,EAAQ,QAAQ1B,CAAI,EACb6O,EACT,CAaA,SAASkB,EAAkB/P,EAAM,CAC/B,OAAO0B,EAAQ,MACbwM,GACA8B,EACAF,EACN,EAAM9P,CAAI,CACR,CAaA,SAASgQ,EAAyBhQ,EAAM,CACtC7O,OAAAA,EAAO4P,EAAmBf,CAAI,CAAC,EAC/B0B,EAAQ,MAAMlO,EAAM,UAAU,EAC9BkO,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAKlO,EAAM,UAAU,EACtByc,CACT,CAaA,SAASA,EAAmBjQ,EAAM,CAChC,OAAIA,IAASjB,EAAM,KAAOgC,EAAmBf,CAAI,EACxC+P,EAAkB/P,CAAI,GAG/B0B,EAAQ,MAAMlO,EAAM,YAAY,EACzBqb,EAAa7O,CAAI,EAC1B,CAYA,SAAS0P,EAA0B1P,EAAM,CACvC,OAAIA,IAASjB,EAAM,MACjB2C,EAAQ,QAAQ1B,CAAI,EACbyO,GAGFI,EAAa7O,CAAI,CAC1B,CAYA,SAAS2P,EAAuB3P,EAAM,CACpC,OAAIA,IAASjB,EAAM,OACjB2C,EAAQ,QAAQ1B,CAAI,EACpBqO,EAAS,GACF6B,IAGFrB,EAAa7O,CAAI,CAC1B,CAYA,SAASkQ,GAAsBlQ,EAAM,CACnC,GAAIA,IAASjB,EAAM,YAAa,CAC9B,MAAMhN,GAAOsc,EAAO,YAAW,EAE/B,OAAIT,GAAa,SAAS7b,EAAI,GAC5B2P,EAAQ,QAAQ1B,CAAI,EACb4P,IAGFf,EAAa7O,CAAI,CAC1B,CAEA,OAAIO,GAAWP,CAAI,GAAKqO,EAAO,OAASrP,EAAU,gBAChD7N,EAAO6O,IAAS,IAAI,EACpB0B,EAAQ,QAAQ1B,CAAI,EACpBqO,GAAU,OAAO,aAAarO,CAAI,EAC3BkQ,IAGFrB,EAAa7O,CAAI,CAC1B,CAYA,SAAS6P,GAAwB7P,EAAM,CACrC,OAAIA,IAASjB,EAAM,oBACjB2C,EAAQ,QAAQ1B,CAAI,EACbyO,GAGFI,EAAa7O,CAAI,CAC1B,CAoBA,SAASyO,EAA8BzO,EAAM,CAC3C,OAAIA,IAASjB,EAAM,aACjB2C,EAAQ,QAAQ1B,CAAI,EACb4P,IAIL5P,IAASjB,EAAM,MAAQuG,IAAWtG,EAAU,aAC9C0C,EAAQ,QAAQ1B,CAAI,EACbyO,GAGFI,EAAa7O,CAAI,CAC1B,CAYA,SAAS4P,GAAkB5P,EAAM,CAC/B,OAAIA,IAASjB,EAAM,KAAOgC,EAAmBf,CAAI,GAC/C0B,EAAQ,KAAKlO,EAAM,YAAY,EACxBsc,GAAkB9P,CAAI,IAG/B0B,EAAQ,QAAQ1B,CAAI,EACb4P,GACT,CAYA,SAASE,GAAkB9P,EAAM,CAC/B,OAAA0B,EAAQ,KAAKlO,EAAM,QAAQ,EAKpBvC,EAAG+O,CAAI,CAChB,CACF,CAOA,SAASmO,GAAiCzM,EAASzQ,EAAIkT,EAAK,CAC1D,MAAMxB,EAAO,KAEb,OAAOzL,EAaP,SAASA,EAAM8I,EAAM,CACnB,OAAIe,EAAmBf,CAAI,GACzB0B,EAAQ,MAAMlO,EAAM,UAAU,EAC9BkO,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAKlO,EAAM,UAAU,EACtBgS,GAGFrB,EAAInE,CAAI,CACjB,CAaA,SAASwF,EAAMxF,EAAM,CACnB,OAAO2C,EAAK,OAAO,KAAKA,EAAK,IAAG,EAAG,IAAI,EAAIwB,EAAInE,CAAI,EAAI/O,EAAG+O,CAAI,CAChE,CACF,CAOA,SAASiO,GAAwBvM,EAASzQ,EAAIkT,EAAK,CACjD,OAAOjN,EAaP,SAASA,EAAM8I,EAAM,CACnB7O,OAAAA,EAAO4P,EAAmBf,CAAI,EAAG,wBAAwB,EACzD0B,EAAQ,MAAMlO,EAAM,UAAU,EAC9BkO,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAKlO,EAAM,UAAU,EACtBkO,EAAQ,QAAQyE,GAAWlV,EAAIkT,CAAG,CAC3C,CACF,CCt8BO,MAAMgM,GAAW,CAAC,KAAM,WAAY,SAAUC,EAAgB,EAOrE,SAASA,GAAiB1O,EAASzQ,EAAIkT,EAAK,CAC1C,MAAMxB,EAAO,KAEb,IAAI2C,EAEA3R,EAEA0c,EAEJ,OAAOnZ,EAYP,SAASA,EAAM8I,EAAM,CACnB7O,OAAAA,EAAO6O,IAASjB,EAAM,SAAU,cAAc,EAC9C2C,EAAQ,MAAMlO,EAAM,QAAQ,EAC5BkO,EAAQ,MAAMlO,EAAM,YAAY,EAChCkO,EAAQ,QAAQ1B,CAAI,EACb6E,CACT,CAgBA,SAASA,EAAK7E,EAAM,CAClB,OAAIA,IAASjB,EAAM,iBACjB2C,EAAQ,QAAQ1B,CAAI,EACbuO,GAGLvO,IAASjB,EAAM,OACjB2C,EAAQ,QAAQ1B,CAAI,EACbwO,GAGLxO,IAASjB,EAAM,cACjB2C,EAAQ,QAAQ1B,CAAI,EACbsQ,GAIL/P,GAAWP,CAAI,GACjB0B,EAAQ,QAAQ1B,CAAI,EACbuQ,GAGFpM,EAAInE,CAAI,CACjB,CAgBA,SAASuO,EAAgBvO,EAAM,CAC7B,OAAIA,IAASjB,EAAM,MACjB2C,EAAQ,QAAQ1B,CAAI,EACb2O,GAGL3O,IAASjB,EAAM,mBACjB2C,EAAQ,QAAQ1B,CAAI,EACpBrM,EAAQ,EACDib,GAGLrO,GAAWP,CAAI,GACjB0B,EAAQ,QAAQ1B,CAAI,EACbjI,GAGFoM,EAAInE,CAAI,CACjB,CAYA,SAAS2O,EAAkB3O,EAAM,CAC/B,OAAIA,IAASjB,EAAM,MACjB2C,EAAQ,QAAQ1B,CAAI,EACbwQ,GAGFrM,EAAInE,CAAI,CACjB,CAYA,SAASnI,EAAQmI,EAAM,CACrB,OAAIA,IAASjB,EAAM,IACVoF,EAAInE,CAAI,EAGbA,IAASjB,EAAM,MACjB2C,EAAQ,QAAQ1B,CAAI,EACbyQ,GAGL1P,EAAmBf,CAAI,GACzBqQ,EAAcxY,EACP6Y,EAAiB1Q,CAAI,IAG9B0B,EAAQ,QAAQ1B,CAAI,EACbnI,EACT,CAYA,SAAS4Y,EAAazQ,EAAM,CAC1B,OAAIA,IAASjB,EAAM,MACjB2C,EAAQ,QAAQ1B,CAAI,EACbwQ,GAGF3Y,EAAQmI,CAAI,CACrB,CAYA,SAASwQ,EAAWxQ,EAAM,CACxB,OAAOA,IAASjB,EAAM,YAClBzE,EAAI0F,CAAI,EACRA,IAASjB,EAAM,KACb0R,EAAazQ,CAAI,EACjBnI,EAAQmI,CAAI,CACpB,CAYA,SAAS4O,EAAgB5O,EAAM,CAC7B,MAAM9O,GAAQ8N,EAAU,mBAExB,OAAIgB,IAAS9O,GAAM,WAAWyC,GAAO,GACnC+N,EAAQ,QAAQ1B,CAAI,EACbrM,IAAUzC,GAAM,OAASyf,EAAQ/B,GAGnCzK,EAAInE,CAAI,CACjB,CAYA,SAAS2Q,EAAM3Q,EAAM,CACnB,OAAIA,IAASjB,EAAM,IACVoF,EAAInE,CAAI,EAGbA,IAASjB,EAAM,oBACjB2C,EAAQ,QAAQ1B,CAAI,EACb4Q,GAGL7P,EAAmBf,CAAI,GACzBqQ,EAAcM,EACPD,EAAiB1Q,CAAI,IAG9B0B,EAAQ,QAAQ1B,CAAI,EACb2Q,EACT,CAYA,SAASC,EAAW5Q,EAAM,CACxB,OAAIA,IAASjB,EAAM,oBACjB2C,EAAQ,QAAQ1B,CAAI,EACb6Q,GAGFF,EAAM3Q,CAAI,CACnB,CAYA,SAAS6Q,EAAS7Q,EAAM,CACtB,OAAIA,IAASjB,EAAM,YACVzE,EAAI0F,CAAI,EAGbA,IAASjB,EAAM,oBACjB2C,EAAQ,QAAQ1B,CAAI,EACb6Q,GAGFF,EAAM3Q,CAAI,CACnB,CAYA,SAASjI,EAAYiI,EAAM,CACzB,OAAIA,IAASjB,EAAM,KAAOiB,IAASjB,EAAM,YAChCzE,EAAI0F,CAAI,EAGbe,EAAmBf,CAAI,GACzBqQ,EAActY,EACP2Y,EAAiB1Q,CAAI,IAG9B0B,EAAQ,QAAQ1B,CAAI,EACbjI,EACT,CAYA,SAASuY,EAAYtQ,EAAM,CACzB,OAAIA,IAASjB,EAAM,IACVoF,EAAInE,CAAI,EAGbA,IAASjB,EAAM,cACjB2C,EAAQ,QAAQ1B,CAAI,EACb8Q,GAGL/P,EAAmBf,CAAI,GACzBqQ,EAAcC,EACPI,EAAiB1Q,CAAI,IAG9B0B,EAAQ,QAAQ1B,CAAI,EACbsQ,EACT,CAYA,SAASQ,EAAiB9Q,EAAM,CAC9B,OAAOA,IAASjB,EAAM,YAAczE,EAAI0F,CAAI,EAAIsQ,EAAYtQ,CAAI,CAClE,CAYA,SAASwO,EAAcxO,EAAM,CAE3B,OAAIO,GAAWP,CAAI,GACjB0B,EAAQ,QAAQ1B,CAAI,EACb+Q,GAGF5M,EAAInE,CAAI,CACjB,CAYA,SAAS+Q,EAAS/Q,EAAM,CAEtB,OAAIA,IAASjB,EAAM,MAAQ0B,GAAkBT,CAAI,GAC/C0B,EAAQ,QAAQ1B,CAAI,EACb+Q,GAGFC,EAAgBhR,CAAI,CAC7B,CAYA,SAASgR,EAAgBhR,EAAM,CAC7B,OAAIe,EAAmBf,CAAI,GACzBqQ,EAAcW,EACPN,EAAiB1Q,CAAI,GAG1BiB,EAAcjB,CAAI,GACpB0B,EAAQ,QAAQ1B,CAAI,EACbgR,GAGF1W,EAAI0F,CAAI,CACjB,CAYA,SAASuQ,EAAQvQ,EAAM,CAErB,OAAIA,IAASjB,EAAM,MAAQ0B,GAAkBT,CAAI,GAC/C0B,EAAQ,QAAQ1B,CAAI,EACbuQ,GAIPvQ,IAASjB,EAAM,OACfiB,IAASjB,EAAM,aACfiC,GAA0BhB,CAAI,EAEvBiR,EAAejR,CAAI,EAGrBmE,EAAInE,CAAI,CACjB,CAYA,SAASiR,EAAejR,EAAM,CAC5B,OAAIA,IAASjB,EAAM,OACjB2C,EAAQ,QAAQ1B,CAAI,EACb1F,GAIL0F,IAASjB,EAAM,OAASiB,IAASjB,EAAM,YAAcwB,GAAWP,CAAI,GACtE0B,EAAQ,QAAQ1B,CAAI,EACbkR,GAGLnQ,EAAmBf,CAAI,GACzBqQ,EAAcY,EACPP,EAAiB1Q,CAAI,GAG1BiB,EAAcjB,CAAI,GACpB0B,EAAQ,QAAQ1B,CAAI,EACbiR,GAGF3W,EAAI0F,CAAI,CACjB,CAYA,SAASkR,EAAqBlR,EAAM,CAElC,OACEA,IAASjB,EAAM,MACfiB,IAASjB,EAAM,KACfiB,IAASjB,EAAM,OACfiB,IAASjB,EAAM,YACf0B,GAAkBT,CAAI,GAEtB0B,EAAQ,QAAQ1B,CAAI,EACbkR,GAGFC,EAA0BnR,CAAI,CACvC,CAaA,SAASmR,EAA0BnR,EAAM,CACvC,OAAIA,IAASjB,EAAM,UACjB2C,EAAQ,QAAQ1B,CAAI,EACboR,GAGLrQ,EAAmBf,CAAI,GACzBqQ,EAAcc,EACPT,EAAiB1Q,CAAI,GAG1BiB,EAAcjB,CAAI,GACpB0B,EAAQ,QAAQ1B,CAAI,EACbmR,GAGFF,EAAejR,CAAI,CAC5B,CAaA,SAASoR,EAA4BpR,EAAM,CACzC,OACEA,IAASjB,EAAM,KACfiB,IAASjB,EAAM,UACfiB,IAASjB,EAAM,UACfiB,IAASjB,EAAM,aACfiB,IAASjB,EAAM,YAERoF,EAAInE,CAAI,EAGbA,IAASjB,EAAM,eAAiBiB,IAASjB,EAAM,YACjD2C,EAAQ,QAAQ1B,CAAI,EACpBsF,EAAStF,EACFqR,GAGLtQ,EAAmBf,CAAI,GACzBqQ,EAAce,EACPV,EAAiB1Q,CAAI,GAG1BiB,EAAcjB,CAAI,GACpB0B,EAAQ,QAAQ1B,CAAI,EACboR,IAGT1P,EAAQ,QAAQ1B,CAAI,EACbsR,EACT,CAYA,SAASD,EAA4BrR,EAAM,CACzC,OAAIA,IAASsF,GACX5D,EAAQ,QAAQ1B,CAAI,EACpBsF,EAAS,OACFiM,GAGLvR,IAASjB,EAAM,IACVoF,EAAInE,CAAI,EAGbe,EAAmBf,CAAI,GACzBqQ,EAAcgB,EACPX,EAAiB1Q,CAAI,IAG9B0B,EAAQ,QAAQ1B,CAAI,EACbqR,EACT,CAYA,SAASC,EAA8BtR,EAAM,CAC3C,OACEA,IAASjB,EAAM,KACfiB,IAASjB,EAAM,eACfiB,IAASjB,EAAM,YACfiB,IAASjB,EAAM,UACfiB,IAASjB,EAAM,UACfiB,IAASjB,EAAM,YAERoF,EAAInE,CAAI,EAIfA,IAASjB,EAAM,OACfiB,IAASjB,EAAM,aACfiC,GAA0BhB,CAAI,EAEvBiR,EAAejR,CAAI,GAG5B0B,EAAQ,QAAQ1B,CAAI,EACbsR,EACT,CAaA,SAASC,EAAiCvR,EAAM,CAC9C,OACEA,IAASjB,EAAM,OACfiB,IAASjB,EAAM,aACfiC,GAA0BhB,CAAI,EAEvBiR,EAAejR,CAAI,EAGrBmE,EAAInE,CAAI,CACjB,CAYA,SAAS1F,EAAI0F,EAAM,CACjB,OAAIA,IAASjB,EAAM,aACjB2C,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAKlO,EAAM,YAAY,EAC/BkO,EAAQ,KAAKlO,EAAM,QAAQ,EACpBvC,GAGFkT,EAAInE,CAAI,CACjB,CAgBA,SAAS0Q,EAAiB1Q,EAAM,CAC9B7O,OAAAA,EAAOkf,EAAa,uBAAuB,EAC3Clf,EAAO4P,EAAmBf,CAAI,EAAG,cAAc,EAC/C0B,EAAQ,KAAKlO,EAAM,YAAY,EAC/BkO,EAAQ,MAAMlO,EAAM,UAAU,EAC9BkO,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAKlO,EAAM,UAAU,EACtBge,EACT,CAgBA,SAASA,GAAgBxR,EAAM,CAE7B7O,OAAAA,EACEwR,EAAK,OAAO,WAAW,QAAQ,KAC/B,yCACN,EACW1B,EAAcjB,CAAI,EACrByB,EACEC,EACA+P,GACAje,EAAM,WACNmP,EAAK,OAAO,WAAW,QAAQ,KAAK,SAAS,cAAc,EACvD,OACA3D,EAAU,OACxB,EAAUgB,CAAI,EACNyR,GAAsBzR,CAAI,CAChC,CAgBA,SAASyR,GAAsBzR,EAAM,CACnC,OAAA0B,EAAQ,MAAMlO,EAAM,YAAY,EACzB6c,EAAYrQ,CAAI,CACzB,CACF,CCtvBO,MAAM0R,GAAW,CACtB,KAAM,WACN,WAAYC,GACZ,UAAWC,GACX,SAAUC,EACZ,EAGMC,GAAoB,CAAC,SAAUC,EAAgB,EAE/CC,GAAyB,CAAC,SAAUC,EAAqB,EAEzDC,GAA8B,CAAC,SAAUC,EAA0B,EAGzE,SAASR,GAAmBrN,EAAQ,CAClC,IAAI3Q,EAAQ,GAEZ,MAAMye,EAAY,CAAA,EAClB,KAAO,EAAEze,EAAQ2Q,EAAO,QAAQ,CAC9B,MAAMjC,EAAQiC,EAAO3Q,CAAK,EAAE,CAAC,EAG7B,GAFAye,EAAU,KAAK9N,EAAO3Q,CAAK,CAAC,EAG1B0O,EAAM,OAAS7O,EAAM,YACrB6O,EAAM,OAAS7O,EAAM,WACrB6O,EAAM,OAAS7O,EAAM,SACrB,CAEA,MAAM2R,EAAS9C,EAAM,OAAS7O,EAAM,WAAa,EAAI,EACrD6O,EAAM,KAAO7O,EAAM,KACnBG,GAASwR,CACX,CACF,CAGA,OAAIb,EAAO,SAAW8N,EAAU,QAC9BnT,GAAOqF,EAAQ,EAAGA,EAAO,OAAQ8N,CAAS,EAGrC9N,CACT,CAGA,SAASsN,GAAkBtN,EAAQC,EAAS,CAC1C,IAAI5Q,EAAQ2Q,EAAO,OACfa,EAAS,EAET9C,EAEAwC,EAEAY,EAEA4M,EAGJ,KAAO1e,KAGL,GAFA0O,EAAQiC,EAAO3Q,CAAK,EAAE,CAAC,EAEnBkR,EAAM,CAER,GACExC,EAAM,OAAS7O,EAAM,MACpB6O,EAAM,OAAS7O,EAAM,WAAa6O,EAAM,UAEzC,MAKEiC,EAAO3Q,CAAK,EAAE,CAAC,IAAM,SAAW0O,EAAM,OAAS7O,EAAM,YACvD6O,EAAM,UAAY,GAEtB,SAAWoD,GACT,GACEnB,EAAO3Q,CAAK,EAAE,CAAC,IAAM,UACpB0O,EAAM,OAAS7O,EAAM,YAAc6O,EAAM,OAAS7O,EAAM,YACzD,CAAC6O,EAAM,YAEPwC,EAAOlR,EAEH0O,EAAM,OAAS7O,EAAM,WAAW,CAClC2R,EAAS,EACT,KACF,OAEO9C,EAAM,OAAS7O,EAAM,WAC9BiS,EAAQ9R,GAIZxC,EAAO0T,IAAS,OAAW,gCAAgC,EAC3D1T,EAAOsU,IAAU,OAAW,iCAAiC,EAE7D,MAAMX,EAAQ,CACZ,KAAMR,EAAOO,CAAI,EAAE,CAAC,EAAE,OAASrR,EAAM,UAAYA,EAAM,KAAOA,EAAM,MACpE,MAAO,CAAC,GAAG8Q,EAAOO,CAAI,EAAE,CAAC,EAAE,KAAK,EAChC,IAAK,CAAC,GAAGP,EAAOA,EAAO,OAAS,CAAC,EAAE,CAAC,EAAE,GAAG,CAC7C,EAEQgO,EAAQ,CACZ,KAAM9e,EAAM,MACZ,MAAO,CAAC,GAAG8Q,EAAOO,CAAI,EAAE,CAAC,EAAE,KAAK,EAChC,IAAK,CAAC,GAAGP,EAAOmB,CAAK,EAAE,CAAC,EAAE,GAAG,CACjC,EAEQxJ,EAAO,CACX,KAAMzI,EAAM,UACZ,MAAO,CAAC,GAAG8Q,EAAOO,EAAOM,EAAS,CAAC,EAAE,CAAC,EAAE,GAAG,EAC3C,IAAK,CAAC,GAAGb,EAAOmB,EAAQ,CAAC,EAAE,CAAC,EAAE,KAAK,CACvC,EAEE,OAAA4M,EAAQ,CACN,CAAC,QAASvN,EAAOP,CAAO,EACxB,CAAC,QAAS+N,EAAO/N,CAAO,CAC5B,EAGE8N,EAAQ9S,GAAK8S,EAAO/N,EAAO,MAAMO,EAAO,EAAGA,EAAOM,EAAS,CAAC,CAAC,EAG7DkN,EAAQ9S,GAAK8S,EAAO,CAAC,CAAC,QAASpW,EAAMsI,CAAO,CAAC,CAAC,EAG9CpT,EACEoT,EAAQ,OAAO,WAAW,WAAW,KACrC,4CACJ,EAEE8N,EAAQ9S,GACN8S,EACAhO,GACEE,EAAQ,OAAO,WAAW,WAAW,KACrCD,EAAO,MAAMO,EAAOM,EAAS,EAAGM,EAAQ,CAAC,EACzClB,CACN,CACA,EAGE8N,EAAQ9S,GAAK8S,EAAO,CAClB,CAAC,OAAQpW,EAAMsI,CAAO,EACtBD,EAAOmB,EAAQ,CAAC,EAChBnB,EAAOmB,EAAQ,CAAC,EAChB,CAAC,OAAQ6M,EAAO/N,CAAO,CAC3B,CAAG,EAGD8N,EAAQ9S,GAAK8S,EAAO/N,EAAO,MAAMmB,EAAQ,CAAC,CAAC,EAG3C4M,EAAQ9S,GAAK8S,EAAO,CAAC,CAAC,OAAQvN,EAAOP,CAAO,CAAC,CAAC,EAE9CtF,GAAOqF,EAAQO,EAAMP,EAAO,OAAQ+N,CAAK,EAElC/N,CACT,CAOA,SAASuN,GAAiBnQ,EAASzQ,EAAIkT,EAAK,CAC1C,MAAMxB,EAAO,KACb,IAAIhP,EAAQgP,EAAK,OAAO,OAEpB4P,EAEAC,EAGJ,KAAO7e,KACL,IACGgP,EAAK,OAAOhP,CAAK,EAAE,CAAC,EAAE,OAASH,EAAM,YACpCmP,EAAK,OAAOhP,CAAK,EAAE,CAAC,EAAE,OAASH,EAAM,YACvC,CAACmP,EAAK,OAAOhP,CAAK,EAAE,CAAC,EAAE,UACvB,CACA4e,EAAa5P,EAAK,OAAOhP,CAAK,EAAE,CAAC,EACjC,KACF,CAGF,OAAOuD,EAiBP,SAASA,EAAM8I,EAAM,CAInB,OAHA7O,EAAO6O,IAASjB,EAAM,mBAAoB,cAAc,EAGnDwT,EAaDA,EAAW,UACNE,EAAYzS,CAAI,GAGzBwS,EAAU7P,EAAK,OAAO,QAAQ,SAC5BrC,GACEqC,EAAK,eAAe,CAAC,MAAO4P,EAAW,IAAK,IAAK5P,EAAK,KAAK,CAAC,CACpE,CACA,EACIjB,EAAQ,MAAMlO,EAAM,QAAQ,EAC5BkO,EAAQ,MAAMlO,EAAM,WAAW,EAC/BkO,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAKlO,EAAM,WAAW,EAC9BkO,EAAQ,KAAKlO,EAAM,QAAQ,EACpBgS,GA1BErB,EAAInE,CAAI,CA2BnB,CAkBA,SAASwF,EAAMxF,EAAM,CAKnB,OAAIA,IAASjB,EAAM,gBACV2C,EAAQ,QACboQ,GACAY,EACAF,EAAUE,EAAaD,CAC/B,EAAQzS,CAAI,EAIJA,IAASjB,EAAM,kBACV2C,EAAQ,QACbsQ,GACAU,EACAF,EAAUG,EAAmBF,CACrC,EAAQzS,CAAI,EAIDwS,EAAUE,EAAW1S,CAAI,EAAIyS,EAAYzS,CAAI,CACtD,CAgBA,SAAS2S,EAAiB3S,EAAM,CAC9B,OAAO0B,EAAQ,QACbwQ,GACAQ,EACAD,CACN,EAAMzS,CAAI,CACR,CAkBA,SAAS0S,EAAW1S,EAAM,CAExB,OAAO/O,EAAG+O,CAAI,CAChB,CAkBA,SAASyS,EAAYzS,EAAM,CACzB,OAAAuS,EAAW,UAAY,GAChBpO,EAAInE,CAAI,CACjB,CACF,CAOA,SAAS+R,GAAiBrQ,EAASzQ,EAAIkT,EAAK,CAC1C,OAAOyO,EAYP,SAASA,EAAc5S,EAAM,CAC3B7O,OAAAA,EAAO6O,IAASjB,EAAM,gBAAiB,qBAAqB,EAC5D2C,EAAQ,MAAMlO,EAAM,QAAQ,EAC5BkO,EAAQ,MAAMlO,EAAM,cAAc,EAClCkO,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAKlO,EAAM,cAAc,EAC1Bqf,CACT,CAYA,SAASA,EAAe7S,EAAM,CAC5B,OAAOgB,GAA0BhB,CAAI,EACjCwM,GAAkB9K,EAASoR,CAAY,EAAE9S,CAAI,EAC7C8S,EAAa9S,CAAI,CACvB,CAYA,SAAS8S,EAAa9S,EAAM,CAC1B,OAAIA,IAASjB,EAAM,iBACVgU,EAAY/S,CAAI,EAGlBsL,GACL5J,EACAsR,EACAC,EACAzf,EAAM,oBACNA,EAAM,2BACNA,EAAM,iCACNA,EAAM,uBACNA,EAAM,0BACNwL,EAAU,iCAChB,EAAMgB,CAAI,CACR,CAYA,SAASgT,EAAyBhT,EAAM,CACtC,OAAOgB,GAA0BhB,CAAI,EACjCwM,GAAkB9K,EAASwR,CAAe,EAAElT,CAAI,EAChD+S,EAAY/S,CAAI,CACtB,CAYA,SAASiT,EAA2BjT,EAAM,CACxC,OAAOmE,EAAInE,CAAI,CACjB,CAYA,SAASkT,EAAgBlT,EAAM,CAC7B,OACEA,IAASjB,EAAM,eACfiB,IAASjB,EAAM,YACfiB,IAASjB,EAAM,gBAERsN,GACL3K,EACAyR,EACAhP,EACA3Q,EAAM,cACNA,EAAM,oBACNA,EAAM,mBACd,EAAQwM,CAAI,EAGD+S,EAAY/S,CAAI,CACzB,CAYA,SAASmT,EAAmBnT,EAAM,CAChC,OAAOgB,GAA0BhB,CAAI,EACjCwM,GAAkB9K,EAASqR,CAAW,EAAE/S,CAAI,EAC5C+S,EAAY/S,CAAI,CACtB,CAYA,SAAS+S,EAAY/S,EAAM,CACzB,OAAIA,IAASjB,EAAM,kBACjB2C,EAAQ,MAAMlO,EAAM,cAAc,EAClCkO,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAKlO,EAAM,cAAc,EACjCkO,EAAQ,KAAKlO,EAAM,QAAQ,EACpBvC,GAGFkT,EAAInE,CAAI,CACjB,CACF,CAOA,SAASiS,GAAsBvQ,EAASzQ,EAAIkT,EAAK,CAC/C,MAAMxB,EAAO,KAEb,OAAOyQ,EAYP,SAASA,EAAcpT,EAAM,CAC3B7O,OAAAA,EAAO6O,IAASjB,EAAM,kBAAmB,uBAAuB,EACzDkN,GAAa,KAClBtJ,EACAjB,EACA2R,EACAC,EACA9f,EAAM,UACNA,EAAM,gBACNA,EAAM,eACZ,EAAMwM,CAAI,CACR,CAYA,SAASqT,EAAmBrT,EAAM,CAChC,OAAO2C,EAAK,OAAO,QAAQ,SACzBrC,GACEqC,EAAK,eAAeA,EAAK,OAAOA,EAAK,OAAO,OAAS,CAAC,EAAE,CAAC,CAAC,EAAE,MAAM,EAAG,EAAE,CAC/E,CACA,EACQ1R,EAAG+O,CAAI,EACPmE,EAAInE,CAAI,CACd,CAYA,SAASsT,EAAqBtT,EAAM,CAClC,OAAOmE,EAAInE,CAAI,CACjB,CACF,CAOA,SAASmS,GAA2BzQ,EAASzQ,EAAIkT,EAAK,CACpD,OAAOoP,EAcP,SAASA,EAAwBvT,EAAM,CAErC7O,OAAAA,EAAO6O,IAASjB,EAAM,kBAAmB,uBAAuB,EAChE2C,EAAQ,MAAMlO,EAAM,SAAS,EAC7BkO,EAAQ,MAAMlO,EAAM,eAAe,EACnCkO,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAKlO,EAAM,eAAe,EAC3BggB,CACT,CAcA,SAASA,EAAuBxT,EAAM,CACpC,OAAIA,IAASjB,EAAM,oBACjB2C,EAAQ,MAAMlO,EAAM,eAAe,EACnCkO,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAKlO,EAAM,eAAe,EAClCkO,EAAQ,KAAKlO,EAAM,SAAS,EACrBvC,GAGFkT,EAAInE,CAAI,CACjB,CACF,CCjoBO,MAAMyT,GAAkB,CAC7B,KAAM,kBACN,WAAY/B,GAAS,WACrB,SAAUgC,EACZ,EAOA,SAASA,GAAwBhS,EAASzQ,EAAIkT,EAAK,CACjD,MAAMxB,EAAO,KAEb,OAAOzL,EAYP,SAASA,EAAM8I,EAAM,CACnB7O,OAAAA,EAAO6O,IAASjB,EAAM,gBAAiB,cAAc,EACrD2C,EAAQ,MAAMlO,EAAM,UAAU,EAC9BkO,EAAQ,MAAMlO,EAAM,gBAAgB,EACpCkO,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAKlO,EAAM,gBAAgB,EAC5BqR,CACT,CAYA,SAASA,EAAK7E,EAAM,CAClB,OAAIA,IAASjB,EAAM,mBACjB2C,EAAQ,MAAMlO,EAAM,WAAW,EAC/BkO,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAKlO,EAAM,WAAW,EAC9BkO,EAAQ,KAAKlO,EAAM,UAAU,EACtBgS,GAGFrB,EAAInE,CAAI,CACjB,CA6BA,SAASwF,EAAMxF,EAAM,CAMnB,OAAOA,IAASjB,EAAM,OACpB,2BAA4B4D,EAAK,OAAO,WACtCwB,EAAInE,CAAI,EACR/O,EAAG+O,CAAI,CACb,CACF,CC/FO,MAAM2T,GAAiB,CAC5B,KAAM,iBACN,WAAYjC,GAAS,WACrB,SAAUkC,EACZ,EAOA,SAASA,GAAuBlS,EAASzQ,EAAIkT,EAAK,CAChD,MAAMxB,EAAO,KAEb,OAAOzL,EAYP,SAASA,EAAM8I,EAAM,CACnB7O,OAAAA,EAAO6O,IAASjB,EAAM,kBAAmB,cAAc,EACvD2C,EAAQ,MAAMlO,EAAM,SAAS,EAC7BkO,EAAQ,MAAMlO,EAAM,WAAW,EAC/BkO,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAKlO,EAAM,WAAW,EAC9BkO,EAAQ,KAAKlO,EAAM,SAAS,EACrBgS,CACT,CAGA,SAASA,EAAMxF,EAAM,CAKnB,OAAOA,IAASjB,EAAM,OACpB,2BAA4B4D,EAAK,OAAO,WACtCwB,EAAInE,CAAI,EACR/O,EAAG+O,CAAI,CACb,CACF,CC9CO,MAAM6T,GAAa,CAAC,KAAM,aAAc,SAAUC,EAAkB,EAO3E,SAASA,GAAmBpS,EAASzQ,EAAI,CACvC,OAAOiG,EAGP,SAASA,EAAM8I,EAAM,CACnB7O,OAAAA,EAAO4P,EAAmBf,CAAI,EAAG,cAAc,EAC/C0B,EAAQ,MAAMlO,EAAM,UAAU,EAC9BkO,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAKlO,EAAM,UAAU,EACtBiO,EAAaC,EAASzQ,EAAIuC,EAAM,UAAU,CACnD,CACF,CCjBO,MAAMugB,GAAgB,CAC3B,KAAM,gBACN,SAAUC,EACZ,EAOA,SAASA,GAAsBtS,EAASzQ,EAAIkT,EAAK,CAC/C,IAAItC,EAAO,EAEPyD,EAEJ,OAAOpO,EAYP,SAASA,EAAM8I,EAAM,CACnB,OAAA0B,EAAQ,MAAMlO,EAAM,aAAa,EAE1B2M,EAAOH,CAAI,CACpB,CAYA,SAASG,EAAOH,EAAM,CACpB7O,OAAAA,EACE6O,IAASjB,EAAM,UACbiB,IAASjB,EAAM,MACfiB,IAASjB,EAAM,WACjB,2BACN,EACIuG,EAAStF,EACF2I,EAAQ3I,CAAI,CACrB,CAYA,SAAS2I,EAAQ3I,EAAM,CACrB,OAAIA,IAASsF,GACX5D,EAAQ,MAAMlO,EAAM,qBAAqB,EAClCygB,EAASjU,CAAI,GAIpB6B,GAAQ7C,EAAU,8BACjBgB,IAASjB,EAAM,KAAOgC,EAAmBf,CAAI,IAE9C0B,EAAQ,KAAKlO,EAAM,aAAa,EACzBvC,EAAG+O,CAAI,GAGTmE,EAAInE,CAAI,CACjB,CAYA,SAASiU,EAASjU,EAAM,CACtB,OAAIA,IAASsF,GACX5D,EAAQ,QAAQ1B,CAAI,EACpB6B,IACOoS,IAGTvS,EAAQ,KAAKlO,EAAM,qBAAqB,EACjCyN,EAAcjB,CAAI,EACrByB,EAAaC,EAASiH,EAASnV,EAAM,UAAU,EAAEwM,CAAI,EACrD2I,EAAQ3I,CAAI,EAClB,CACF,CCpGO,MAAMd,GAAO,CAClB,aAAc,CAAC,SAAUgV,EAAwB,EACjD,KAAMC,GACN,KAAM,OACN,SAAUC,EACZ,EAGMC,GAAoC,CACxC,QAAS,GACT,SAAUC,EACZ,EAGMC,GAAkB,CAAC,QAAS,GAAM,SAAUC,EAAc,EAUhE,SAASJ,GAAkB1S,EAASzQ,EAAIkT,EAAK,CAC3C,MAAMxB,EAAO,KACP8E,EAAO9E,EAAK,OAAOA,EAAK,OAAO,OAAS,CAAC,EAC/C,IAAI8R,EACFhN,GAAQA,EAAK,CAAC,EAAE,OAASjU,EAAM,WAC3BiU,EAAK,CAAC,EAAE,eAAeA,EAAK,CAAC,EAAG,EAAI,EAAE,OACtC,EACF5F,EAAO,EAEX,OAAO3K,EAGP,SAASA,EAAM8I,EAAM,CACnB7O,EAAOwR,EAAK,eAAgB,gBAAgB,EAC5C,MAAM+R,EACJ/R,EAAK,eAAe,OACnB3C,IAASjB,EAAM,UAAYiB,IAASjB,EAAM,UAAYiB,IAASjB,EAAM,KAClEvL,EAAM,cACNA,EAAM,aAEZ,GACEkhB,IAASlhB,EAAM,cACX,CAACmP,EAAK,eAAe,QAAU3C,IAAS2C,EAAK,eAAe,OAC5D/B,GAAWZ,CAAI,EACnB,CAMA,GALK2C,EAAK,eAAe,OACvBA,EAAK,eAAe,KAAO+R,EAC3BhT,EAAQ,MAAMgT,EAAM,CAAC,WAAY,EAAI,CAAC,GAGpCA,IAASlhB,EAAM,cACjB,OAAAkO,EAAQ,MAAMlO,EAAM,cAAc,EAC3BwM,IAASjB,EAAM,UAAYiB,IAASjB,EAAM,KAC7C2C,EAAQ,MAAMqS,GAAe5P,EAAKwQ,CAAQ,EAAE3U,CAAI,EAChD2U,EAAS3U,CAAI,EAGnB,GAAI,CAAC2C,EAAK,WAAa3C,IAASjB,EAAM,OACpC,OAAA2C,EAAQ,MAAMlO,EAAM,cAAc,EAClCkO,EAAQ,MAAMlO,EAAM,aAAa,EAC1B+R,EAAOvF,CAAI,CAEtB,CAEA,OAAOmE,EAAInE,CAAI,CACjB,CAGA,SAASuF,EAAOvF,EAAM,CAEpB,OADA7O,EAAOwR,EAAK,eAAgB,gBAAgB,EACxC/B,GAAWZ,CAAI,GAAK,EAAE6B,EAAO7C,EAAU,sBACzC0C,EAAQ,QAAQ1B,CAAI,EACbuF,IAIN,CAAC5C,EAAK,WAAad,EAAO,KAC1Bc,EAAK,eAAe,OACjB3C,IAAS2C,EAAK,eAAe,OAC7B3C,IAASjB,EAAM,kBAAoBiB,IAASjB,EAAM,MAEtD2C,EAAQ,KAAKlO,EAAM,aAAa,EACzBmhB,EAAS3U,CAAI,GAGfmE,EAAInE,CAAI,CACjB,CAKA,SAAS2U,EAAS3U,EAAM,CACtB7O,OAAAA,EAAOwR,EAAK,eAAgB,gBAAgB,EAC5CxR,EAAO6O,IAASjB,EAAM,IAAK,8BAA8B,EACzD2C,EAAQ,MAAMlO,EAAM,cAAc,EAClCkO,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAKlO,EAAM,cAAc,EACjCmP,EAAK,eAAe,OAASA,EAAK,eAAe,QAAU3C,EACpD0B,EAAQ,MACbyE,GAEAxD,EAAK,UAAYwB,EAAMyQ,EACvBlT,EAAQ,QACN2S,GACAQ,EACAC,CACR,CACA,CACE,CAGA,SAASF,EAAQ5U,EAAM,CACrB7O,OAAAA,EAAOwR,EAAK,eAAgB,gBAAgB,EAC5CA,EAAK,eAAe,iBAAmB,GACvC8R,IACOI,EAAY7U,CAAI,CACzB,CAGA,SAAS8U,EAAY9U,EAAM,CACzB,OAAIiB,EAAcjB,CAAI,GACpB0B,EAAQ,MAAMlO,EAAM,wBAAwB,EAC5CkO,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAKlO,EAAM,wBAAwB,EACpCqhB,GAGF1Q,EAAInE,CAAI,CACjB,CAGA,SAAS6U,EAAY7U,EAAM,CACzB7O,OAAAA,EAAOwR,EAAK,eAAgB,gBAAgB,EAC5CA,EAAK,eAAe,KAClB8R,EACA9R,EAAK,eAAejB,EAAQ,KAAKlO,EAAM,cAAc,EAAG,EAAI,EAAE,OACzDvC,EAAG+O,CAAI,CAChB,CACF,CAOA,SAASkU,GAAyBxS,EAASzQ,EAAIkT,EAAK,CAClD,MAAMxB,EAAO,KAEbxR,OAAAA,EAAOwR,EAAK,eAAgB,gBAAgB,EAC5CA,EAAK,eAAe,WAAa,OAE1BjB,EAAQ,MAAMyE,GAAWyO,EAASG,CAAQ,EAGjD,SAASH,EAAQ5U,EAAM,CACrB7O,OAAAA,EAAOwR,EAAK,eAAgB,gBAAgB,EAC5CxR,EAAO,OAAOwR,EAAK,eAAe,MAAS,SAAU,eAAe,EACpEA,EAAK,eAAe,kBAClBA,EAAK,eAAe,mBACpBA,EAAK,eAAe,iBAIflB,EACLC,EACAzQ,EACAuC,EAAM,eACNmP,EAAK,eAAe,KAAO,CACjC,EAAM3C,CAAI,CACR,CAGA,SAAS+U,EAAS/U,EAAM,CAEtB,OADA7O,EAAOwR,EAAK,eAAgB,gBAAgB,EACxCA,EAAK,eAAe,mBAAqB,CAAC1B,EAAcjB,CAAI,GAC9D2C,EAAK,eAAe,kBAAoB,OACxCA,EAAK,eAAe,iBAAmB,OAChCqS,EAAiBhV,CAAI,IAG9B2C,EAAK,eAAe,kBAAoB,OACxCA,EAAK,eAAe,iBAAmB,OAChCjB,EAAQ,QAAQ6S,GAAiBtjB,EAAI+jB,CAAgB,EAAEhV,CAAI,EACpE,CAGA,SAASgV,EAAiBhV,EAAM,CAC9B7O,OAAAA,EAAOwR,EAAK,eAAgB,gBAAgB,EAE5CA,EAAK,eAAe,WAAa,GAEjCA,EAAK,UAAY,OAEjBxR,EACEwR,EAAK,OAAO,WAAW,QAAQ,KAC/B,yCACN,EACWlB,EACLC,EACAA,EAAQ,QAAQxC,GAAMjO,EAAIkT,CAAG,EAC7B3Q,EAAM,WACNmP,EAAK,OAAO,WAAW,QAAQ,KAAK,SAAS,cAAc,EACvD,OACA3D,EAAU,OACpB,EAAMgB,CAAI,CACR,CACF,CAOA,SAASwU,GAAe9S,EAASzQ,EAAIkT,EAAK,CACxC,MAAMxB,EAAO,KAEbxR,OAAAA,EAAOwR,EAAK,eAAgB,gBAAgB,EAC5CxR,EAAO,OAAOwR,EAAK,eAAe,MAAS,SAAU,eAAe,EAE7DlB,EACLC,EACAgH,EACAlV,EAAM,eACNmP,EAAK,eAAe,KAAO,CAC/B,EAGE,SAAS+F,EAAY1I,EAAM,CACzB7O,EAAOwR,EAAK,eAAgB,gBAAgB,EAC5C,MAAM8E,EAAO9E,EAAK,OAAOA,EAAK,OAAO,OAAS,CAAC,EAC/C,OAAO8E,GACLA,EAAK,CAAC,EAAE,OAASjU,EAAM,gBACvBiU,EAAK,CAAC,EAAE,eAAeA,EAAK,CAAC,EAAG,EAAI,EAAE,SAAW9E,EAAK,eAAe,KACnE1R,EAAG+O,CAAI,EACPmE,EAAInE,CAAI,CACd,CACF,CAOA,SAASmU,GAAgBzS,EAAS,CAChCvQ,EAAO,KAAK,eAAgB,gBAAgB,EAC5CA,EAAO,OAAO,KAAK,eAAe,MAAS,SAAU,eAAe,EACpEuQ,EAAQ,KAAK,KAAK,eAAe,IAAI,CACvC,CAOA,SAAS4S,GAAiC5S,EAASzQ,EAAIkT,EAAK,CAC1D,MAAMxB,EAAO,KAGbxR,OAAAA,EACEwR,EAAK,OAAO,WAAW,QAAQ,KAC/B,yCACJ,EAESlB,EACLC,EACAgH,EACAlV,EAAM,yBACNmP,EAAK,OAAO,WAAW,QAAQ,KAAK,SAAS,cAAc,EACvD,OACA3D,EAAU,QAAU,CAC5B,EAGE,SAAS0J,EAAY1I,EAAM,CACzB,MAAMyH,EAAO9E,EAAK,OAAOA,EAAK,OAAO,OAAS,CAAC,EAE/C,MAAO,CAAC1B,EAAcjB,CAAI,GACxByH,GACAA,EAAK,CAAC,EAAE,OAASjU,EAAM,yBACrBvC,EAAG+O,CAAI,EACPmE,EAAInE,CAAI,CACd,CACF,CChSO,MAAMiV,GAAkB,CAC7B,KAAM,kBACN,UAAWC,GACX,SAAUC,EACZ,EAGA,SAASD,GAAyB5Q,EAAQC,EAAS,CAEjD,IAAI5Q,EAAQ2Q,EAAO,OAEfxC,EAEA7F,EAEAvJ,EAIJ,KAAOiB,KACL,GAAI2Q,EAAO3Q,CAAK,EAAE,CAAC,IAAM,QAAS,CAChC,GAAI2Q,EAAO3Q,CAAK,EAAE,CAAC,EAAE,OAASH,EAAM,QAAS,CAC3CsO,EAAUnO,EACV,KACF,CAEI2Q,EAAO3Q,CAAK,EAAE,CAAC,EAAE,OAASH,EAAM,YAClCyI,EAAOtI,EAEX,MAGM2Q,EAAO3Q,CAAK,EAAE,CAAC,EAAE,OAASH,EAAM,SAElC8Q,EAAO,OAAO3Q,EAAO,CAAC,EAGpB,CAACjB,GAAc4R,EAAO3Q,CAAK,EAAE,CAAC,EAAE,OAASH,EAAM,aACjDd,EAAaiB,GAKnBxC,EAAO8K,IAAS,OAAW,qCAAqC,EAChE9K,EAAO2Q,IAAY,OAAW,qCAAqC,EACnE3Q,EAAOmT,EAAOxC,CAAO,EAAE,CAAC,IAAMyC,EAAS,8BAA8B,EACrEpT,EACEmT,EAAOA,EAAO,OAAS,CAAC,EAAE,CAAC,IAAMC,EACjC,8BACJ,EACE,MAAM6Q,EAAU,CACd,KAAM5hB,EAAM,cACZ,MAAO,CAAC,GAAG8Q,EAAOxC,CAAO,EAAE,CAAC,EAAE,KAAK,EACnC,IAAK,CAAC,GAAGwC,EAAOA,EAAO,OAAS,CAAC,EAAE,CAAC,EAAE,GAAG,CAC7C,EAGE,OAAAA,EAAOrI,CAAI,EAAE,CAAC,EAAE,KAAOzI,EAAM,kBAIzBd,GACF4R,EAAO,OAAOrI,EAAM,EAAG,CAAC,QAASmZ,EAAS7Q,CAAO,CAAC,EAClDD,EAAO,OAAO5R,EAAa,EAAG,EAAG,CAAC,OAAQ4R,EAAOxC,CAAO,EAAE,CAAC,EAAGyC,CAAO,CAAC,EACtED,EAAOxC,CAAO,EAAE,CAAC,EAAE,IAAM,CAAC,GAAGwC,EAAO5R,CAAU,EAAE,CAAC,EAAE,GAAG,GAEtD4R,EAAOxC,CAAO,EAAE,CAAC,EAAIsT,EAIvB9Q,EAAO,KAAK,CAAC,OAAQ8Q,EAAS7Q,CAAO,CAAC,EAE/BD,CACT,CAOA,SAAS6Q,GAAwBzT,EAASzQ,EAAIkT,EAAK,CACjD,MAAMxB,EAAO,KAEb,IAAI2C,EAEJ,OAAOpO,EAaP,SAASA,EAAM8I,EAAM,CACnB,IAAIrM,EAAQgP,EAAK,OAAO,OAEpB0S,EAQJ,IANAlkB,EACE6O,IAASjB,EAAM,MAAQiB,IAASjB,EAAM,SACtC,qBACN,EAGWpL,KAGL,GACEgP,EAAK,OAAOhP,CAAK,EAAE,CAAC,EAAE,OAASH,EAAM,YACrCmP,EAAK,OAAOhP,CAAK,EAAE,CAAC,EAAE,OAASH,EAAM,YACrCmP,EAAK,OAAOhP,CAAK,EAAE,CAAC,EAAE,OAASH,EAAM,QACrC,CACA6hB,EAAY1S,EAAK,OAAOhP,CAAK,EAAE,CAAC,EAAE,OAASH,EAAM,UACjD,KACF,CAKF,MAAI,CAACmP,EAAK,OAAO,KAAKA,EAAK,MAAM,IAAI,IAAMA,EAAK,WAAa0S,IAC3D3T,EAAQ,MAAMlO,EAAM,iBAAiB,EACrC8R,EAAStF,EACFG,EAAOH,CAAI,GAGbmE,EAAInE,CAAI,CACjB,CAaA,SAASG,EAAOH,EAAM,CACpB,OAAA0B,EAAQ,MAAMlO,EAAM,yBAAyB,EACtC+R,EAAOvF,CAAI,CACpB,CAaA,SAASuF,EAAOvF,EAAM,CACpB,OAAIA,IAASsF,GACX5D,EAAQ,QAAQ1B,CAAI,EACbuF,IAGT7D,EAAQ,KAAKlO,EAAM,yBAAyB,EAErCyN,EAAcjB,CAAI,EACrByB,EAAaC,EAAS8D,EAAOhS,EAAM,UAAU,EAAEwM,CAAI,EACnDwF,EAAMxF,CAAI,EAChB,CAaA,SAASwF,EAAMxF,EAAM,CACnB,OAAIA,IAASjB,EAAM,KAAOgC,EAAmBf,CAAI,GAC/C0B,EAAQ,KAAKlO,EAAM,iBAAiB,EAC7BvC,EAAG+O,CAAI,GAGTmE,EAAInE,CAAI,CACjB,CACF,CCjMO,MAAMsV,GAAO,CAAC,SAAUC,EAAc,EAQ7C,SAASA,GAAe7T,EAAS,CAC/B,MAAMiB,EAAO,KACPyG,EAAU1H,EAAQ,QAEtByE,GACAqP,EAEA9T,EAAQ,QACN,KAAK,OAAO,WAAW,YACvB+T,EACAhU,EACEC,EACAA,EAAQ,QACN,KAAK,OAAO,WAAW,KACvB+T,EACA/T,EAAQ,QAAQI,GAAS2T,CAAc,CACjD,EACQjiB,EAAM,UACd,CACA,CACA,EAEE,OAAO4V,EAGP,SAASoM,EAAcxV,EAAM,CAM3B,GALA7O,EACE6O,IAASjB,EAAM,KAAOgC,EAAmBf,CAAI,EAC7C,qBACN,EAEQA,IAASjB,EAAM,IAAK,CACtB2C,EAAQ,QAAQ1B,CAAI,EACpB,MACF,CAEA,OAAA0B,EAAQ,MAAMlO,EAAM,eAAe,EACnCkO,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAKlO,EAAM,eAAe,EAClCmP,EAAK,iBAAmB,OACjByG,CACT,CAGA,SAASqM,EAAezV,EAAM,CAM5B,GALA7O,EACE6O,IAASjB,EAAM,KAAOgC,EAAmBf,CAAI,EAC7C,qBACN,EAEQA,IAASjB,EAAM,IAAK,CACtB2C,EAAQ,QAAQ1B,CAAI,EACpB,MACF,CAEA,OAAA0B,EAAQ,MAAMlO,EAAM,UAAU,EAC9BkO,EAAQ,QAAQ1B,CAAI,EACpB0B,EAAQ,KAAKlO,EAAM,UAAU,EAC7BmP,EAAK,iBAAmB,OACjByG,CACT,CACF,CCvEO,MAAMsM,GAAW,CAAC,WAAYC,GAAc,CAAE,EACxCC,GAASC,GAAkB,QAAQ,EACnC5Z,GAAO4Z,GAAkB,MAAM,EAQ5C,SAASA,GAAkBC,EAAO,CAChC,MAAO,CACL,WAAYH,GACVG,IAAU,OAASC,GAAyB,MAClD,EACI,SAAUC,CACd,EAOE,SAASA,EAAetU,EAAS,CAC/B,MAAMiB,EAAO,KACP1C,EAAa,KAAK,OAAO,WAAW6V,CAAK,EACzC7Z,EAAOyF,EAAQ,QAAQzB,EAAY/I,EAAO+e,CAAO,EAEvD,OAAO/e,EAGP,SAASA,EAAM8I,EAAM,CACnB,OAAO2I,EAAQ3I,CAAI,EAAI/D,EAAK+D,CAAI,EAAIiW,EAAQjW,CAAI,CAClD,CAGA,SAASiW,EAAQjW,EAAM,CACrB,GAAIA,IAASjB,EAAM,IAAK,CACtB2C,EAAQ,QAAQ1B,CAAI,EACpB,MACF,CAEA,OAAA0B,EAAQ,MAAMlO,EAAM,IAAI,EACxBkO,EAAQ,QAAQ1B,CAAI,EACbsC,CACT,CAGA,SAASA,EAAKtC,EAAM,CAClB,OAAI2I,EAAQ3I,CAAI,GACd0B,EAAQ,KAAKlO,EAAM,IAAI,EAChByI,EAAK+D,CAAI,IAIlB0B,EAAQ,QAAQ1B,CAAI,EACbsC,EACT,CAQA,SAASqG,EAAQ3I,EAAM,CACrB,GAAIA,IAASjB,EAAM,IACjB,MAAO,GAGT,MAAMG,EAAOe,EAAWD,CAAI,EAC5B,IAAIrM,EAAQ,GAEZ,GAAIuL,EAIF,IAFA/N,EAAO,MAAM,QAAQ+N,CAAI,EAAG,yCAAyC,EAE9D,EAAEvL,EAAQuL,EAAK,QAAQ,CAC5B,MAAM+D,EAAO/D,EAAKvL,CAAK,EACvB,GAAI,CAACsP,EAAK,UAAYA,EAAK,SAAS,KAAKN,EAAMA,EAAK,QAAQ,EAC1D,MAAO,EAEX,CAGF,MAAO,EACT,CACF,CACF,CAQA,SAASgT,GAAeO,EAAe,CACrC,OAAOC,EAGP,SAASA,EAAe7R,EAAQC,EAAS,CACvC,IAAI5Q,EAAQ,GAERsV,EAIJ,KAAO,EAAEtV,GAAS2Q,EAAO,QACnB2E,IAAU,OACR3E,EAAO3Q,CAAK,GAAK2Q,EAAO3Q,CAAK,EAAE,CAAC,EAAE,OAASH,EAAM,OACnDyV,EAAQtV,EACRA,MAEO,CAAC2Q,EAAO3Q,CAAK,GAAK2Q,EAAO3Q,CAAK,EAAE,CAAC,EAAE,OAASH,EAAM,QAEvDG,IAAUsV,EAAQ,IACpB3E,EAAO2E,CAAK,EAAE,CAAC,EAAE,IAAM3E,EAAO3Q,EAAQ,CAAC,EAAE,CAAC,EAAE,IAC5C2Q,EAAO,OAAO2E,EAAQ,EAAGtV,EAAQsV,EAAQ,CAAC,EAC1CtV,EAAQsV,EAAQ,GAGlBA,EAAQ,QAIZ,OAAOiN,EAAgBA,EAAc5R,EAAQC,CAAO,EAAID,CAC1D,CACF,CAaA,SAASyR,GAAuBzR,EAAQC,EAAS,CAC/C,IAAI4F,EAAa,EAEjB,KAAO,EAAEA,GAAc7F,EAAO,QAC5B,IACG6F,IAAe7F,EAAO,QACrBA,EAAO6F,CAAU,EAAE,CAAC,EAAE,OAAS3W,EAAM,aACvC8Q,EAAO6F,EAAa,CAAC,EAAE,CAAC,EAAE,OAAS3W,EAAM,KACzC,CACA,MAAM8O,EAAOgC,EAAO6F,EAAa,CAAC,EAAE,CAAC,EAC/BiM,EAAS7R,EAAQ,YAAYjC,CAAI,EACvC,IAAI3O,EAAQyiB,EAAO,OACfC,EAAc,GACdxU,EAAO,EAEPyU,EAEJ,KAAO3iB,KAAS,CACd,MAAM4iB,EAAQH,EAAOziB,CAAK,EAE1B,GAAI,OAAO4iB,GAAU,SAAU,CAG7B,IAFAF,EAAcE,EAAM,OAEbA,EAAM,WAAWF,EAAc,CAAC,IAAMtX,EAAM,OACjD8C,IACAwU,IAGF,GAAIA,EAAa,MACjBA,EAAc,EAChB,SAESE,IAAUxX,EAAM,cACvBuX,EAAO,GACPzU,YACS0U,IAAUxX,EAAM,aAEpB,CAELpL,IACA,KACF,CACF,CAOA,GAJI4Q,EAAQ,0BAA4B4F,IAAe7F,EAAO,SAC5DzC,EAAO,GAGLA,EAAM,CACR,MAAMQ,EAAQ,CACZ,KACE8H,IAAe7F,EAAO,QACtBgS,GACAzU,EAAO7C,EAAU,uBACbxL,EAAM,WACNA,EAAM,kBACZ,MAAO,CACL,aAAcG,EACV0iB,EACA/T,EAAK,MAAM,aAAe+T,EAC9B,OAAQ/T,EAAK,MAAM,OAAS3O,EAC5B,KAAM2O,EAAK,IAAI,KACf,OAAQA,EAAK,IAAI,OAAST,EAC1B,OAAQS,EAAK,IAAI,OAAST,CACtC,EACU,IAAK,CAAC,GAAGS,EAAK,GAAG,CAC3B,EAEQA,EAAK,IAAM,CAAC,GAAGD,EAAM,KAAK,EAEtBC,EAAK,MAAM,SAAWA,EAAK,IAAI,OACjC,OAAO,OAAOA,EAAMD,CAAK,GAEzBiC,EAAO,OACL6F,EACA,EACA,CAAC,QAAS9H,EAAOkC,CAAO,EACxB,CAAC,OAAQlC,EAAOkC,CAAO,CACnC,EACU4F,GAAc,EAElB,CAEAA,GACF,CAGF,OAAO7F,CACT,CCrNO,MAAM/B,GAAW,CACtB,CAACxD,EAAM,QAAQ,EAAGG,GAClB,CAACH,EAAM,QAAQ,EAAGG,GAClB,CAACH,EAAM,IAAI,EAAGG,GACd,CAACH,EAAM,MAAM,EAAGG,GAChB,CAACH,EAAM,MAAM,EAAGG,GAChB,CAACH,EAAM,MAAM,EAAGG,GAChB,CAACH,EAAM,MAAM,EAAGG,GAChB,CAACH,EAAM,MAAM,EAAGG,GAChB,CAACH,EAAM,MAAM,EAAGG,GAChB,CAACH,EAAM,MAAM,EAAGG,GAChB,CAACH,EAAM,MAAM,EAAGG,GAChB,CAACH,EAAM,MAAM,EAAGG,GAChB,CAACH,EAAM,MAAM,EAAGG,GAChB,CAACH,EAAM,WAAW,EAAGsH,EACvB,EAGamQ,GAAiB,CAC5B,CAACzX,EAAM,iBAAiB,EAAGrM,EAC7B,EAGa+jB,GAAc,CACzB,CAAC1X,EAAM,aAAa,EAAGuJ,GACvB,CAACvJ,EAAM,YAAY,EAAGuJ,GACtB,CAACvJ,EAAM,KAAK,EAAGuJ,EACjB,EAGagN,GAAO,CAClB,CAACvW,EAAM,UAAU,EAAGwO,GACpB,CAACxO,EAAM,QAAQ,EAAGgV,GAClB,CAAChV,EAAM,IAAI,EAAG,CAACkW,GAAiBlB,EAAa,EAC7C,CAAChV,EAAM,QAAQ,EAAG8O,GAClB,CAAC9O,EAAM,QAAQ,EAAGkW,GAClB,CAAClW,EAAM,UAAU,EAAGgV,GACpB,CAAChV,EAAM,WAAW,EAAGmI,GACrB,CAACnI,EAAM,KAAK,EAAGmI,EACjB,EAGa0O,GAAS,CACpB,CAAC7W,EAAM,SAAS,EAAGD,GACnB,CAACC,EAAM,SAAS,EAAG4H,EACrB,EAGa1K,GAAO,CAClB,CAAC8C,EAAM,cAAc,EAAG8U,GACxB,CAAC9U,EAAM,QAAQ,EAAG8U,GAClB,CAAC9U,EAAM,sBAAsB,EAAG8U,GAChC,CAAC9U,EAAM,eAAe,EAAG0U,GACzB,CAAC1U,EAAM,SAAS,EAAGD,GACnB,CAACC,EAAM,QAAQ,EAAG2F,GAClB,CAAC3F,EAAM,QAAQ,EAAG,CAAC2G,GAAUyK,EAAQ,EACrC,CAACpR,EAAM,iBAAiB,EAAG4U,GAC3B,CAAC5U,EAAM,SAAS,EAAG,CAACsO,GAAiB1G,EAAe,EACpD,CAAC5H,EAAM,kBAAkB,EAAG2S,GAC5B,CAAC3S,EAAM,UAAU,EAAG2F,GACpB,CAAC3F,EAAM,WAAW,EAAG6J,EACvB,EAGa8N,GAAa,CAAC,KAAM,CAAChS,GAAWiS,EAAW,CAAC,EAG5CtR,GAAmB,CAAC,KAAM,CAACtG,EAAM,SAAUA,EAAM,UAAU,CAAC,EAG5D6X,GAAU,CAAC,KAAM,CAAA,CAAE,iRChGhC,IAAIC,EAAI,IACJpf,EAAIof,EAAI,GACRC,EAAIrf,EAAI,GACRsf,EAAID,EAAI,GACRE,EAAID,EAAI,EACRE,EAAIF,EAAI,OAgBZG,GAAiB,SAAUjf,EAAKvG,EAAS,CACvCA,EAAUA,GAAW,CAAA,EACrB,IAAI2I,EAAO,OAAOpC,EAClB,GAAIoC,IAAS,UAAYpC,EAAI,OAAS,EACpC,OAAOkf,EAAMlf,CAAG,EACX,GAAIoC,IAAS,UAAY,SAASpC,CAAG,EAC1C,OAAOvG,EAAQ,KAAO0lB,EAAQnf,CAAG,EAAIof,EAASpf,CAAG,EAEnD,MAAM,IAAI,MACR,wDACE,KAAK,UAAUA,CAAG,EAExB,EAUA,SAASkf,EAAMrgB,EAAK,CAElB,GADAA,EAAM,OAAOA,CAAG,EACZ,EAAAA,EAAI,OAAS,KAGjB,KAAIU,EAAQ,mIAAmI,KAC7IV,GAEF,GAAKU,EAGL,KAAI8f,EAAI,WAAW9f,EAAM,CAAC,CAAC,EACvB6C,GAAQ7C,EAAM,CAAC,GAAK,MAAM,YAAW,EACzC,OAAQ6C,EAAI,CACV,IAAK,QACL,IAAK,OACL,IAAK,MACL,IAAK,KACL,IAAK,IACH,OAAOid,EAAIL,EACb,IAAK,QACL,IAAK,OACL,IAAK,IACH,OAAOK,EAAIN,EACb,IAAK,OACL,IAAK,MACL,IAAK,IACH,OAAOM,EAAIP,EACb,IAAK,QACL,IAAK,OACL,IAAK,MACL,IAAK,KACL,IAAK,IACH,OAAOO,EAAIR,EACb,IAAK,UACL,IAAK,SACL,IAAK,OACL,IAAK,MACL,IAAK,IACH,OAAOQ,EAAI7f,EACb,IAAK,UACL,IAAK,SACL,IAAK,OACL,IAAK,MACL,IAAK,IACH,OAAO6f,EAAIT,EACb,IAAK,eACL,IAAK,cACL,IAAK,QACL,IAAK,OACL,IAAK,KACH,OAAOS,EACT,QACE,MACN,GACA,CAUA,SAASD,EAASH,EAAI,CACpB,IAAIK,EAAQ,KAAK,IAAIL,CAAE,EACvB,OAAIK,GAASR,EACJ,KAAK,MAAMG,EAAKH,CAAC,EAAI,IAE1BQ,GAAST,EACJ,KAAK,MAAMI,EAAKJ,CAAC,EAAI,IAE1BS,GAAS9f,EACJ,KAAK,MAAMyf,EAAKzf,CAAC,EAAI,IAE1B8f,GAASV,EACJ,KAAK,MAAMK,EAAKL,CAAC,EAAI,IAEvBK,EAAK,IACd,CAUA,SAASE,EAAQF,EAAI,CACnB,IAAIK,EAAQ,KAAK,IAAIL,CAAE,EACvB,OAAIK,GAASR,EACJS,EAAON,EAAIK,EAAOR,EAAG,KAAK,EAE/BQ,GAAST,EACJU,EAAON,EAAIK,EAAOT,EAAG,MAAM,EAEhCS,GAAS9f,EACJ+f,EAAON,EAAIK,EAAO9f,EAAG,QAAQ,EAElC8f,GAASV,EACJW,EAAON,EAAIK,EAAOV,EAAG,QAAQ,EAE/BK,EAAK,KACd,CAMA,SAASM,EAAON,EAAIK,EAAOD,EAAGvlB,EAAM,CAClC,IAAI0lB,EAAWF,GAASD,EAAI,IAC5B,OAAO,KAAK,MAAMJ,EAAKI,CAAC,EAAI,IAAMvlB,GAAQ0lB,EAAW,IAAM,GAC7D,wDC3JA,SAASC,EAAMC,EAAK,CACnBC,EAAY,MAAQA,EACpBA,EAAY,QAAUA,EACtBA,EAAY,OAASC,EACrBD,EAAY,QAAUhB,EACtBgB,EAAY,OAASE,EACrBF,EAAY,QAAUG,EACtBH,EAAY,SAAW/e,GAAA,EACvB+e,EAAY,QAAUI,EAEtB,OAAO,KAAKL,CAAG,EAAE,QAAQ7jB,GAAO,CAC/B8jB,EAAY9jB,CAAG,EAAI6jB,EAAI7jB,CAAG,CAC5B,CAAE,EAMD8jB,EAAY,MAAQ,CAAA,EACpBA,EAAY,MAAQ,CAAA,EAOpBA,EAAY,WAAa,CAAA,EAQzB,SAASK,EAAYC,EAAW,CAC/B,IAAIC,EAAO,EAEX,QAASnhB,EAAI,EAAGA,EAAIkhB,EAAU,OAAQlhB,IACrCmhB,GAASA,GAAQ,GAAKA,EAAQD,EAAU,WAAWlhB,CAAC,EACpDmhB,GAAQ,EAGT,OAAOP,EAAY,OAAO,KAAK,IAAIO,CAAI,EAAIP,EAAY,OAAO,MAAM,CACtE,CACCA,EAAY,YAAcK,EAS1B,SAASL,EAAYM,EAAW,CAC/B,IAAIE,EACAC,EAAiB,KACjBC,EACAC,EAEJ,SAASC,KAASC,EAAM,CAEvB,GAAI,CAACD,EAAM,QACV,OAGD,MAAM7V,EAAO6V,EAGPE,EAAO,OAAO,IAAI,IAAM,EACxBxB,EAAKwB,GAAQN,GAAYM,GAC/B/V,EAAK,KAAOuU,EACZvU,EAAK,KAAOyV,EACZzV,EAAK,KAAO+V,EACZN,EAAWM,EAEXD,EAAK,CAAC,EAAIb,EAAY,OAAOa,EAAK,CAAC,CAAC,EAEhC,OAAOA,EAAK,CAAC,GAAM,UAEtBA,EAAK,QAAQ,IAAI,EAIlB,IAAI9kB,EAAQ,EACZ8kB,EAAK,CAAC,EAAIA,EAAK,CAAC,EAAE,QAAQ,gBAAiB,CAACjhB,EAAOmhB,IAAW,CAE7D,GAAInhB,IAAU,KACb,MAAO,IAER7D,IACA,MAAMilB,EAAYhB,EAAY,WAAWe,CAAM,EAC/C,GAAI,OAAOC,GAAc,WAAY,CACpC,MAAM3gB,EAAMwgB,EAAK9kB,CAAK,EACtB6D,EAAQohB,EAAU,KAAKjW,EAAM1K,CAAG,EAGhCwgB,EAAK,OAAO9kB,EAAO,CAAC,EACpBA,GACL,CACI,OAAO6D,CACX,CAAI,EAGDogB,EAAY,WAAW,KAAKjV,EAAM8V,CAAI,GAExB9V,EAAK,KAAOiV,EAAY,KAChC,MAAMjV,EAAM8V,CAAI,CACzB,CAEE,OAAAD,EAAM,UAAYN,EAClBM,EAAM,UAAYZ,EAAY,UAAS,EACvCY,EAAM,MAAQZ,EAAY,YAAYM,CAAS,EAC/CM,EAAM,OAASK,EACfL,EAAM,QAAUZ,EAAY,QAE5B,OAAO,eAAeY,EAAO,UAAW,CACvC,WAAY,GACZ,aAAc,GACd,IAAK,IACAH,IAAmB,KACfA,GAEJC,IAAoBV,EAAY,aACnCU,EAAkBV,EAAY,WAC9BW,EAAeX,EAAY,QAAQM,CAAS,GAGtCK,GAER,IAAKO,GAAK,CACTT,EAAiBS,CACrB,CACA,CAAG,EAGG,OAAOlB,EAAY,MAAS,YAC/BA,EAAY,KAAKY,CAAK,EAGhBA,CACT,CAEC,SAASK,EAAOX,EAAWa,EAAW,CACrC,MAAMC,EAAWpB,EAAY,KAAK,WAAa,OAAOmB,EAAc,IAAc,IAAMA,GAAab,CAAS,EAC9G,OAAAc,EAAS,IAAM,KAAK,IACbA,CACT,CASC,SAASlB,EAAOmB,EAAY,CAC3BrB,EAAY,KAAKqB,CAAU,EAC3BrB,EAAY,WAAaqB,EAEzBrB,EAAY,MAAQ,CAAA,EACpBA,EAAY,MAAQ,CAAA,EAEpB,MAAMsB,GAAS,OAAOD,GAAe,SAAWA,EAAa,IAC3D,KAAI,EACJ,QAAQ,OAAQ,GAAG,EACnB,MAAM,GAAG,EACT,OAAO,OAAO,EAEhB,UAAWE,KAAMD,EACZC,EAAG,CAAC,IAAM,IACbvB,EAAY,MAAM,KAAKuB,EAAG,MAAM,CAAC,CAAC,EAElCvB,EAAY,MAAM,KAAKuB,CAAE,CAG7B,CAUC,SAASC,EAAgBC,EAAQC,EAAU,CAC1C,IAAIC,EAAc,EACdC,EAAgB,EAChBC,EAAY,GACZC,EAAa,EAEjB,KAAOH,EAAcF,EAAO,QAC3B,GAAIG,EAAgBF,EAAS,SAAWA,EAASE,CAAa,IAAMH,EAAOE,CAAW,GAAKD,EAASE,CAAa,IAAM,KAElHF,EAASE,CAAa,IAAM,KAC/BC,EAAYD,EACZE,EAAaH,EACbC,MAEAD,IACAC,aAESC,IAAc,GAExBD,EAAgBC,EAAY,EAC5BC,IACAH,EAAcG,MAEd,OAAO,GAKT,KAAOF,EAAgBF,EAAS,QAAUA,EAASE,CAAa,IAAM,KACrEA,IAGD,OAAOA,IAAkBF,EAAS,MACpC,CAQC,SAAS1C,GAAU,CAClB,MAAMqC,EAAa,CAClB,GAAGrB,EAAY,MACf,GAAGA,EAAY,MAAM,IAAIM,GAAa,IAAMA,CAAS,CACxD,EAAI,KAAK,GAAG,EACV,OAAAN,EAAY,OAAO,EAAE,EACdqB,CACT,CASC,SAASlB,EAAQhmB,EAAM,CACtB,UAAWuP,KAAQsW,EAAY,MAC9B,GAAIwB,EAAgBrnB,EAAMuP,CAAI,EAC7B,MAAO,GAIT,UAAW6X,KAAMvB,EAAY,MAC5B,GAAIwB,EAAgBrnB,EAAMonB,CAAE,EAC3B,MAAO,GAIT,MAAO,EACT,CASC,SAAStB,EAAO5f,EAAK,CACpB,OAAIA,aAAe,MACXA,EAAI,OAASA,EAAI,QAElBA,CACT,CAMC,SAAS+f,GAAU,CAClB,QAAQ,KAAK,uIAAuI,CACtJ,CAEC,OAAAJ,EAAY,OAAOA,EAAY,MAAM,EAE9BA,CACR,CAEA,OAAA+B,GAAiBjC,kEC7RjBkC,EAAA,WAAqBC,EACrBD,EAAA,KAAeE,EACfF,EAAA,KAAeG,EACfH,EAAA,UAAoBI,EACpBJ,EAAA,QAAkBK,EAAA,EAClBL,EAAA,SAAmB,IAAM,CACxB,IAAIM,EAAS,GAEb,MAAO,IAAM,CACPA,IACJA,EAAS,GACT,QAAQ,KAAK,uIAAuI,EACrJ,CAEF,GAAA,EAMAN,EAAA,OAAiB,CAChB,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAYD,SAASI,GAAY,CAIpB,GAAI,OAAO,OAAW,KAAe,OAAO,UAAY,OAAO,QAAQ,OAAS,YAAc,OAAO,QAAQ,QAC5G,MAAO,GAIR,GAAI,OAAO,UAAc,KAAe,UAAU,WAAa,UAAU,UAAU,YAAA,EAAc,MAAM,uBAAuB,EAC7H,MAAO,GAGR,IAAIviB,EAKJ,OAAQ,OAAO,SAAa,KAAe,SAAS,iBAAmB,SAAS,gBAAgB,OAAS,SAAS,gBAAgB,MAAM,kBAEtI,OAAO,OAAW,KAAe,OAAO,UAAY,OAAO,QAAQ,SAAY,OAAO,QAAQ,WAAa,OAAO,QAAQ,QAG1H,OAAO,UAAc,KAAe,UAAU,YAAcA,EAAI,UAAU,UAAU,YAAA,EAAc,MAAM,gBAAgB,IAAM,SAASA,EAAE,CAAC,EAAG,EAAE,GAAK,IAEpJ,OAAO,UAAc,KAAe,UAAU,WAAa,UAAU,UAAU,YAAA,EAAc,MAAM,oBAAoB,CAC1H,CAQA,SAASoiB,EAAWpB,EAAM,CAQzB,GAPAA,EAAK,CAAC,GAAK,KAAK,UAAY,KAAO,IAClC,KAAK,WACJ,KAAK,UAAY,MAAQ,KAC1BA,EAAK,CAAC,GACL,KAAK,UAAY,MAAQ,KAC1B,IAAM0B,EAAO,QAAQ,SAAS,KAAK,IAAI,EAEpC,CAAC,KAAK,UACT,OAGD,MAAMviB,EAAI,UAAY,KAAK,MAC3B6gB,EAAK,OAAO,EAAG,EAAG7gB,EAAG,gBAAgB,EAKrC,IAAIjE,EAAQ,EACRymB,EAAQ,EACZ3B,EAAK,CAAC,EAAE,QAAQ,cAAejhB,GAAS,CACnCA,IAAU,OAGd7D,IACI6D,IAAU,OAGb4iB,EAAQzmB,GACT,CACA,EAED8kB,EAAK,OAAO2B,EAAO,EAAGxiB,CAAC,CACxB,CAUAgiB,EAAA,IAAc,QAAQ,OAAS,QAAQ,MAAQ,IAAM,CAAC,GAQtD,SAASE,EAAKb,EAAY,CACzB,GAAI,CACCA,EACHW,EAAQ,QAAQ,QAAQ,QAASX,CAAU,EAE3CW,EAAQ,QAAQ,WAAW,OAAO,CACnC,MACe,CAAA,CAIjB,CAQA,SAASG,GAAO,CACf,IAAIM,EACJ,GAAI,CACHA,EAAIT,EAAQ,QAAQ,QAAQ,OAAO,GAAKA,EAAQ,QAAQ,QAAQ,OAAO,CAAA,MACxD,CAAA,CAMhB,MAAI,CAACS,GAAK,OAAO,QAAY,KAAe,QAAS,UACpDA,EAAIC,EAAY,OAGVD,CACR,CAaA,SAASJ,GAAe,CACvB,GAAI,CAGH,OAAO,YAAA,MACQ,CAAA,CAIjB,CAEAE,EAAA,QAAiBthB,GAAA,EAAoB+gB,CAAO,EAE5C,KAAM,CAAC,WAAAW,GAAcJ,EAAO,QAM5BI,EAAW,EAAI,SAAUzB,EAAG,CAC3B,GAAI,CACH,OAAO,KAAK,UAAUA,CAAC,CAAA,OACfzhB,EAAO,CACf,MAAO,+BAAiCA,EAAM,OAAA,CAEhD,0DCjOMmhB,GAAQZ,GAAY,WAAW,EAoB9B,SAAS4C,GAAgBC,EAAQC,EAAYtc,EAAM,CAExD,IAAIjE,EAAQ,CACV,aAAc,GACd,OAAQ,EACR,KAAOiE,GAAQA,EAAK,MAAS,EAC7B,OAASA,GAAQA,EAAK,QAAW,EACjC,OAASA,GAAQA,EAAK,QAAW,CACrC,EAEE,MAAMuc,EAAc,CAAA,EAEdC,EAAuB,CAAA,EAE7B,IAAIxE,EAAS,CAAA,EAETxT,EAAQ,CAAA,EAERiY,EAAW,GAOf,MAAMnZ,EAAU,CACd,QAASoZ,EAAiBC,CAAqB,EAC/C,MAAOD,EAAiBE,CAAiB,EACzC,QAAAC,EACA,MAAAhS,EACA,KAAA1C,EACA,UAAWuU,EAAiBE,EAAmB,CAAC,UAAW,EAAI,CAAC,CACpE,EAOQzW,EAAU,CACd,KAAMxF,EAAM,IACZ,eAAgB,CAAA,EAChB,WAAAmc,EACA,OAAQ,CAAA,EACR,IAAAC,EACA,OAAAV,EACA,SAAU1b,EAAM,IAChB,eAAAqc,EACA,YAAAC,EACA,MAAAC,CACJ,EAOE,IAAI7f,EAAQif,EAAW,SAAS,KAAKnW,EAAS7C,CAAO,EAOjD6Z,EAEJ,OAAIb,EAAW,YACbE,EAAqB,KAAKF,CAAU,EAG/BnW,EAGP,SAAS+W,EAAM1Q,EAAO,CAMpB,OALAwL,EAAS7W,GAAK6W,EAAQxL,CAAK,EAE3B4Q,EAAI,EAGApF,EAAOA,EAAO,OAAS,CAAC,IAAMrX,EAAM,IAC/B,CAAA,GAGT0c,EAAUf,EAAY,CAAC,EAGvBnW,EAAQ,OAASF,GAAWuW,EAAsBrW,EAAQ,OAAQA,CAAO,EAElEA,EAAQ,OACjB,CAOA,SAAS6W,EAAe/Y,EAAOqZ,EAAY,CACzC,OAAOC,GAAgBN,EAAYhZ,CAAK,EAAGqZ,CAAU,CACvD,CAGA,SAASL,EAAYhZ,EAAO,CAC1B,OAAOuZ,GAAYxF,EAAQ/T,CAAK,CAClC,CAGA,SAAS8Y,GAAM,CAEb,KAAM,CAAC,aAAAU,EAAc,OAAAC,EAAQ,KAAAC,EAAM,OAAAnlB,EAAQ,OAAAuO,CAAM,EAAIhL,EACrD,MAAO,CAAC,aAAA0hB,EAAc,OAAAC,EAAQ,KAAAC,EAAM,OAAAnlB,EAAQ,OAAAuO,CAAM,CACpD,CAGA,SAAS+V,EAAWhqB,EAAO,CACzBypB,EAAYzpB,EAAM,IAAI,EAAIA,EAAM,OAChC8qB,EAAuB,EACvBxD,GAAM,8BAA+Bre,CAAK,CAC5C,CAiBA,SAASqhB,GAAO,CAEd,IAAIS,EAEJ,KAAO9hB,EAAM,OAASic,EAAO,QAAQ,CACnC,MAAMG,EAAQH,EAAOjc,EAAM,MAAM,EAGjC,GAAI,OAAOoc,GAAU,SAOnB,IANA0F,EAAa9hB,EAAM,OAEfA,EAAM,aAAe,IACvBA,EAAM,aAAe,GAIrBA,EAAM,SAAW8hB,GACjB9hB,EAAM,aAAeoc,EAAM,QAE3B2F,EAAG3F,EAAM,WAAWpc,EAAM,YAAY,CAAC,OAGzC+hB,EAAG3F,CAAK,CAEZ,CACF,CAUA,SAAS2F,EAAGlc,EAAM,CAChB7O,EAAO0pB,IAAa,GAAM,mCAAmC,EAC7DA,EAAW,OACXrC,GAAM,2BAA4BxY,EAAMvE,GAASA,EAAM,IAAI,EAC3D8f,EAAevb,EACf7O,EAAO,OAAOsK,GAAU,WAAY,gBAAgB,EACpDA,EAAQA,EAAMuE,CAAI,CACpB,CAGA,SAASib,EAAQjb,EAAM,CACrB7O,EAAO6O,IAASub,EAAc,4CAA4C,EAE1E/C,GAAM,gBAAiBxY,CAAI,EAE3B7O,EACE0pB,IAAa,OACb,gHACN,EACI1pB,EACE6O,IAAS,KACLuE,EAAQ,OAAO,SAAW,GACxBA,EAAQ,OAAOA,EAAQ,OAAO,OAAS,CAAC,EAAE,CAAC,IAAM,OACnDA,EAAQ,OAAOA,EAAQ,OAAO,OAAS,CAAC,EAAE,CAAC,IAAM,QACrD,gCACN,EAEQxD,EAAmBf,CAAI,GACzB7F,EAAM,OACNA,EAAM,OAAS,EACfA,EAAM,QAAU6F,IAASjB,EAAM,uBAAyB,EAAI,EAC5Did,EAAuB,EACvBxD,GAAM,4BAA6Bre,CAAK,GAC/B6F,IAASjB,EAAM,eACxB5E,EAAM,SACNA,EAAM,UAIJA,EAAM,aAAe,EACvBA,EAAM,UAENA,EAAM,eAIJA,EAAM,eAGiBic,EAAOjc,EAAM,MAAM,EAAG,SAE7CA,EAAM,aAAe,GACrBA,EAAM,WAKVoK,EAAQ,SAAWvE,EAGnB6a,EAAW,EACb,CAGA,SAAS5R,EAAM5O,EAAM8hB,EAAQ,CAG3B,MAAM9Z,EAAQ8Z,GAAU,CAAA,EACxB,OAAA9Z,EAAM,KAAOhI,EACbgI,EAAM,MAAQ8Y,EAAG,EAEjBhqB,EAAO,OAAOkJ,GAAS,SAAU,sBAAsB,EACvDlJ,EAAOkJ,EAAK,OAAS,EAAG,2BAA2B,EACnDme,GAAM,cAAene,CAAI,EAEzBkK,EAAQ,OAAO,KAAK,CAAC,QAASlC,EAAOkC,CAAO,CAAC,EAE7C3B,EAAM,KAAKP,CAAK,EAETA,CACT,CAGA,SAASkE,EAAKlM,EAAM,CAClBlJ,EAAO,OAAOkJ,GAAS,SAAU,sBAAsB,EACvDlJ,EAAOkJ,EAAK,OAAS,EAAG,2BAA2B,EAEnD,MAAMgI,EAAQO,EAAM,IAAG,EACvBzR,OAAAA,EAAOkR,EAAO,8BAA8B,EAC5CA,EAAM,IAAM8Y,EAAG,EAEfhqB,EAAOkJ,IAASgI,EAAM,KAAM,4CAA4C,EAExElR,EACE,EACEkR,EAAM,MAAM,SAAWA,EAAM,IAAI,QACjCA,EAAM,MAAM,eAAiBA,EAAM,IAAI,cAEzC,8BAAgChI,EAAO,IAC7C,EAEIme,GAAM,aAAcnW,EAAM,IAAI,EAC9BkC,EAAQ,OAAO,KAAK,CAAC,OAAQlC,EAAOkC,CAAO,CAAC,EAErClC,CACT,CAOA,SAAS0Y,EAAsBqB,EAAWloB,EAAM,CAC9CunB,EAAUW,EAAWloB,EAAK,IAAI,CAChC,CAOA,SAAS8mB,EAAkB5mB,EAAGF,EAAM,CAClCA,EAAK,QAAO,CACd,CAUA,SAAS4mB,EAAiBuB,EAAUF,EAAQ,CAC1C,OAAOtc,EAeP,SAASA,EAAKI,EAAYoQ,EAAaiM,GAAY,CAEjD,IAAIC,GAEAC,EAEAC,GAEAvoB,GAEJ,OAAO,MAAM,QAAQ+L,CAAU,EAE3Byc,GAAuBzc,CAAU,EACjC,aAAcA,EAEZyc,GAAuB,CAA2Bzc,CAAU,CAAE,EAC9D0c,EAAsB1c,CAAU,EAUtC,SAAS0c,EAAsBC,EAAK,CAClC,OAAO1lB,GAGP,SAASA,GAAM8I,GAAM,CACnB,MAAMF,GAAOE,KAAS,MAAQ4c,EAAI5c,EAAI,EAChCpB,GAAMoB,KAAS,MAAQ4c,EAAI,KAC3B1d,GAAO,CAGX,GAAI,MAAM,QAAQY,EAAI,EAAIA,GAAOA,GAAO,CAACA,EAAI,EAAI,GACjD,GAAI,MAAM,QAAQlB,EAAG,EAAIA,GAAMA,GAAM,CAACA,EAAG,EAAI,CAAA,CACzD,EAEU,OAAO8d,GAAuBxd,EAAI,EAAEc,EAAI,CAC1C,CACF,CAUA,SAAS0c,GAAuBxd,EAAM,CAIpC,OAHAqd,GAAmBrd,EACnBsd,EAAiB,EAEbtd,EAAK,SAAW,GAClB/N,EAAOmrB,GAAY,mCAAmC,EAC/CA,IAGFO,GAAgB3d,EAAKsd,CAAc,CAAC,CAC7C,CAUA,SAASK,GAAgBT,EAAW,CAClC,OAAOllB,GAGP,SAASA,GAAM8I,GAAM,CAkBnB,OAbA9L,GAAO4oB,EAAK,EACZL,GAAmBL,EAEdA,EAAU,UACb7X,EAAQ,iBAAmB6X,GAI7BjrB,EACEoT,EAAQ,OAAO,WAAW,QAAQ,KAClC,yCACZ,EAGY6X,EAAU,MACV7X,EAAQ,OAAO,WAAW,QAAQ,KAAK,SAAS6X,EAAU,IAAI,EAEvDjY,GAAInE,EAAI,EAGVoc,EAAU,SAAS,KAIxBD,EAAS,OAAO,OAAO,OAAO,OAAO5X,CAAO,EAAG4X,CAAM,EAAI5X,EACzD7C,EACAzQ,GACAkT,EACZ,EAAYnE,EAAI,CACR,CACF,CAGA,SAAS/O,GAAG+O,EAAM,CAChB7O,OAAAA,EAAO6O,IAASub,EAAc,eAAe,EAC7CV,EAAW,GACXwB,EAASI,GAAkBvoB,EAAI,EACxBmc,CACT,CAGA,SAASlM,GAAInE,EAAM,CAKjB,OAJA7O,EAAO6O,IAASub,EAAc,eAAe,EAC7CV,EAAW,GACX3mB,GAAK,QAAO,EAER,EAAEsoB,EAAiBD,GAAiB,OAC/BM,GAAgBN,GAAiBC,CAAc,CAAC,EAGlDF,EACT,CACF,CACF,CAUA,SAASb,EAAUW,EAAWhe,EAAM,CAC9Bge,EAAU,YAAc,CAACxB,EAAqB,SAASwB,CAAS,GAClExB,EAAqB,KAAKwB,CAAS,EAGjCA,EAAU,SACZnd,GACEsF,EAAQ,OACRnG,EACAmG,EAAQ,OAAO,OAASnG,EACxBge,EAAU,QAAQ7X,EAAQ,OAAO,MAAMnG,CAAI,EAAGmG,CAAO,CAC7D,EAGQ6X,EAAU,YACZ7X,EAAQ,OAAS6X,EAAU,UAAU7X,EAAQ,OAAQA,CAAO,GAG9DpT,EACEirB,EAAU,SACR7X,EAAQ,OAAO,SAAW,GAC1BA,EAAQ,OAAOA,EAAQ,OAAO,OAAS,CAAC,EAAE,CAAC,IAAM,OACnD,4BACN,CACE,CAQA,SAASuY,GAAQ,CACf,MAAMC,EAAa5B,EAAG,EAChB6B,EAAgBzY,EAAQ,SACxB0Y,EAAwB1Y,EAAQ,iBAChC2Y,EAAmB3Y,EAAQ,OAAO,OAClC4Y,EAAa,MAAM,KAAKva,CAAK,EAEnC,MAAO,CAAC,KAAMsa,EAAkB,QAAAE,EAAO,EAQvC,SAASA,IAAU,CACjBjjB,EAAQ4iB,EACRxY,EAAQ,SAAWyY,EACnBzY,EAAQ,iBAAmB0Y,EAC3B1Y,EAAQ,OAAO,OAAS2Y,EACxBta,EAAQua,EACRnB,EAAuB,EACvBxD,GAAM,0BAA2Bre,CAAK,CACxC,CACF,CASA,SAAS6hB,GAA0B,CAC7B7hB,EAAM,QAAQwgB,GAAexgB,EAAM,OAAS,IAC9CA,EAAM,OAASwgB,EAAYxgB,EAAM,IAAI,EACrCA,EAAM,QAAUwgB,EAAYxgB,EAAM,IAAI,EAAI,EAE9C,CACF,CAYA,SAASyhB,GAAYxF,EAAQ/T,EAAO,CAClC,MAAMgb,EAAahb,EAAM,MAAM,OACzBib,EAAmBjb,EAAM,MAAM,aAC/Bkb,EAAWlb,EAAM,IAAI,OACrBmb,EAAiBnb,EAAM,IAAI,aAEjC,IAAIob,EAEJ,GAAIJ,IAAeE,EACjBpsB,EAAOqsB,EAAiB,GAAI,wCAAwC,EACpErsB,EAAOmsB,EAAmB,GAAI,0CAA0C,EAExEG,EAAO,CAACrH,EAAOiH,CAAU,EAAE,MAAMC,EAAkBE,CAAc,CAAC,MAC7D,CAGL,GAFAC,EAAOrH,EAAO,MAAMiH,EAAYE,CAAQ,EAEpCD,EAAmB,GAAI,CACzB,MAAMI,EAAOD,EAAK,CAAC,EACf,OAAOC,GAAS,SAClBD,EAAK,CAAC,EAAIC,EAAK,MAAMJ,CAAgB,GAGrCnsB,EAAOmsB,IAAqB,EAAG,uCAAuC,EACtEG,EAAK,MAAK,EAEd,CAEID,EAAiB,GAEnBC,EAAK,KAAKrH,EAAOmH,CAAQ,EAAE,MAAM,EAAGC,CAAc,CAAC,CAEvD,CAEA,OAAOC,CACT,CAYA,SAAS9B,GAAgBvF,EAAQsF,EAAY,CAC3C,IAAI/nB,EAAQ,GAEZ,MAAM+H,EAAS,CAAA,EAEf,IAAIiiB,EAEJ,KAAO,EAAEhqB,EAAQyiB,EAAO,QAAQ,CAC9B,MAAMG,EAAQH,EAAOziB,CAAK,EAE1B,IAAIzC,EAEJ,GAAI,OAAOqlB,GAAU,SACnBrlB,EAAQqlB,MAER,QAAQA,EAAK,CACX,KAAKxX,EAAM,eAAgB,CACzB7N,EAAQO,GAAO,GAEf,KACF,CAEA,KAAKsN,EAAM,SAAU,CACnB7N,EAAQO,GAAO,GAEf,KACF,CAEA,KAAKsN,EAAM,uBAAwB,CACjC7N,EAAQO,GAAO,GAAKA,GAAO,GAE3B,KACF,CAEA,KAAKsN,EAAM,cAAe,CACxB7N,EAAQwqB,EAAajqB,GAAO,MAAQA,GAAO,GAE3C,KACF,CAEA,KAAKsN,EAAM,aAAc,CACvB,GAAI,CAAC2c,GAAciC,EAAO,SAC1BzsB,EAAQO,GAAO,MAEf,KACF,CAEA,QACEN,EAAO,OAAOolB,GAAU,SAAU,iBAAiB,EAEnDrlB,EAAQ,OAAO,aAAaqlB,CAAK,CAE3C,CAEIoH,EAAQpH,IAAUxX,EAAM,cACxBrD,EAAO,KAAKxK,CAAK,CACnB,CAEA,OAAOwK,EAAO,KAAK,EAAE,CACvB,CCprBO,SAASyb,GAAMzlB,EAAS,CAO7B,MAAM+oB,EAAS,CACb,WALAhb,GAAkB,CAACme,GAAmB,IAFvBlsB,GAAW,CAAA,GAEyB,YAAc,CAAA,CAAG,CAAC,EAMrE,QAASqC,EAAO+N,EAAO,EACvB,QAAS,CAAA,EACT,SAAU/N,EAAOwO,EAAQ,EACzB,KAAMxO,EAAOuhB,EAAI,EACjB,KAAM,CAAA,EACN,OAAQvhB,EAAO6hB,EAAM,EACrB,KAAM7hB,EAAOkI,EAAI,CACrB,EAEE,OAAOwe,EAQP,SAAS1mB,EAAOqV,EAAS,CACvB,OAAOyU,EAEP,SAASA,EAAQzf,EAAM,CACrB,OAAOoc,GAAgBC,EAAQrR,EAAShL,CAAI,CAC9C,CACF,CACF,CC7CO,SAAS0f,GAAYxZ,EAAQ,CAClC,KAAO,CAACmF,GAAYnF,CAAM,GAAG,CAI7B,OAAOA,CACT,CCCA,MAAM+U,GAAS,cAMR,SAAS0E,IAAa,CAC3B,IAAInnB,EAAS,EACTyX,EAAS,GAETnX,EAAQ,GAER8mB,EAEJ,OAAOC,EAIP,SAASA,EAAa/sB,EAAOgtB,EAAU5jB,EAAK,CAE1C,MAAM8b,EAAS,CAAA,EAEf,IAAI5e,EAEAgK,EAEA4I,EAEA+T,EAEAne,EAoBJ,IAlBA9O,EACEmd,GACC,OAAOnd,GAAU,SACdA,EAAM,SAAQ,EACd,IAAI,YAAYgtB,GAAY,MAAS,EAAE,OAAOhtB,CAAK,GAEzDkZ,EAAgB,EAChBiE,EAAS,GAELnX,IAEEhG,EAAM,WAAW,CAAC,IAAM6N,EAAM,iBAChCqL,IAGFlT,EAAQ,QAGHkT,EAAgBlZ,EAAM,QAAQ,CAOnC,GANAmoB,GAAO,UAAYjP,EACnB5S,EAAQ6hB,GAAO,KAAKnoB,CAAK,EACzBitB,EACE3mB,GAASA,EAAM,QAAU,OAAYA,EAAM,MAAQtG,EAAM,OAC3D8O,EAAO9O,EAAM,WAAWitB,CAAW,EAE/B,CAAC3mB,EAAO,CACV6W,EAASnd,EAAM,MAAMkZ,CAAa,EAClC,KACF,CAEA,GACEpK,IAASjB,EAAM,IACfqL,IAAkB+T,GAClBH,EAEA5H,EAAO,KAAKrX,EAAM,sBAAsB,EACxCif,EAAmB,WAYnB,QAVIA,IACF5H,EAAO,KAAKrX,EAAM,cAAc,EAChCif,EAAmB,QAGjB5T,EAAgB+T,IAClB/H,EAAO,KAAKllB,EAAM,MAAMkZ,EAAe+T,CAAW,CAAC,EACnDvnB,GAAUunB,EAAc/T,GAGlBpK,EAAI,CACV,KAAKjB,EAAM,IAAK,CACdqX,EAAO,KAAKrX,EAAM,oBAAoB,EACtCnI,IAEA,KACF,CAEA,KAAKmI,EAAM,GAAI,CAGb,IAFAyC,EAAO,KAAK,KAAK5K,EAASoI,EAAU,OAAO,EAAIA,EAAU,QACzDoX,EAAO,KAAKrX,EAAM,aAAa,EACxBnI,IAAW4K,GAAM4U,EAAO,KAAKrX,EAAM,YAAY,EAEtD,KACF,CAEA,KAAKA,EAAM,GAAI,CACbqX,EAAO,KAAKrX,EAAM,QAAQ,EAC1BnI,EAAS,EAET,KACF,CAEA,QACEonB,EAAmB,GACnBpnB,EAAS,CAErB,CAGMwT,EAAgB+T,EAAc,CAChC,CAEA,OAAI7jB,IACE0jB,GAAkB5H,EAAO,KAAKrX,EAAM,cAAc,EAClDsP,GAAQ+H,EAAO,KAAK/H,CAAM,EAC9B+H,EAAO,KAAKrX,EAAM,GAAG,GAGhBqX,CACT,CACF,CCxIA,MAAMgI,GACJ,oEAcK,SAASC,GAAantB,EAAO,CAClC,OAAOA,EAAM,QAAQktB,GAA4BE,EAAM,CACzD,CAYA,SAASA,GAAO9oB,EAAI+oB,EAAIC,EAAI,CAC1B,GAAID,EAEF,OAAOA,EAMT,GAFaC,EAAG,WAAW,CAAC,IAEfzf,EAAM,WAAY,CAC7B,MAAM2e,EAAOc,EAAG,WAAW,CAAC,EACtBC,EAAMf,IAAS3e,EAAM,YAAc2e,IAAS3e,EAAM,WACxD,OAAOqB,GACLoe,EAAG,MAAMC,EAAM,EAAI,CAAC,EACpBA,EAAMzf,EAAU,uBAAyBA,EAAU,kBACzD,CACE,CAEA,OAAOH,GAA8B2f,CAAE,GAAKhpB,CAC9C,CCDA,MAAMuF,GAAM,CAAA,EAAG,eAyBR,SAAS2jB,GAAaxtB,EAAOgtB,EAAUxsB,EAAS,CACrD,OAAI,OAAOwsB,GAAa,WACtBxsB,EAAUwsB,EACVA,EAAW,QAGNS,GAASjtB,CAAO,EACrBosB,GACE3G,GAAMzlB,CAAO,EACV,SAAQ,EACR,MAAMqsB,GAAU,EAAG7sB,EAAOgtB,EAAU,EAAI,CAAC,CAClD,CACA,CACA,CAOA,SAASS,GAASjtB,EAAS,CAEzB,MAAMktB,EAAS,CACb,WAAY,CAAA,EACZ,eAAgB,CAAC,WAAY,WAAY,UAAW,YAAa,QAAQ,EACzE,MAAO,CACL,SAAUC,EAAOC,EAAI,EACrB,iBAAkBC,EAClB,cAAeA,EACf,WAAYF,EAAOzJ,EAAO,EAC1B,WAAYyJ,EAAOxY,EAAU,EAC7B,gBAAiB0Y,EACjB,mBAAoBA,EACpB,WAAYF,EAAOG,EAAQ,EAC3B,oBAAqB3Q,EACrB,oBAAqBA,EACrB,aAAcwQ,EAAOG,GAAU3Q,CAAM,EACrC,SAAUwQ,EAAOjW,GAAUyF,CAAM,EACjC,aAAc0Q,EACd,KAAMA,EACN,cAAeA,EACf,WAAYF,EAAOnsB,EAAU,EAC7B,4BAA6B2b,EAC7B,sBAAuBA,EACvB,sBAAuBA,EACvB,SAAUwQ,EAAOI,EAAQ,EACzB,gBAAiBJ,EAAOK,EAAS,EACjC,kBAAmBL,EAAOK,EAAS,EACnC,SAAUL,EAAOrqB,GAAM6Z,CAAM,EAC7B,aAAc0Q,EACd,SAAUF,EAAOrqB,GAAM6Z,CAAM,EAC7B,aAAc0Q,EACd,MAAOF,EAAOM,EAAK,EACnB,MAAO9Q,EACP,KAAMwQ,EAAOC,EAAI,EACjB,SAAUD,EAAOO,EAAQ,EACzB,cAAeC,EACf,YAAaR,EAAO3f,GAAMogB,CAAkB,EAC5C,cAAeT,EAAO3f,EAAI,EAC1B,UAAW2f,EAAOxJ,EAAS,EAC3B,UAAWkK,EACX,gBAAiBlR,EACjB,0BAA2BA,EAC3B,oBAAqBA,EACrB,cAAewQ,EAAOzJ,EAAO,EAC7B,OAAQyJ,EAAOW,EAAM,EACrB,cAAeX,EAAO9K,EAAa,CACzC,EACI,KAAM,CACJ,WAAY0L,EAAM,EAClB,mBAAoBC,EACpB,SAAUD,EAAM,EAChB,cAAeE,GACf,iBAAkBC,EAClB,WAAYH,EAAM,EAClB,qBAAsBI,EACtB,oCAAqCC,GACrC,gCAAiCA,GACjC,wBAAyBC,GACzB,mBAAoBC,GACpB,WAAYP,EAAOQ,CAAgB,EACnC,gBAAiBC,EACjB,oBAAqBC,EACrB,oBAAqBC,EACrB,cAAeP,EACf,aAAcJ,EAAOY,CAAkB,EACvC,SAAUZ,EAAOa,CAAc,EAC/B,aAAcT,EACd,KAAMA,EACN,WAAYJ,EAAM,EAClB,4BAA6Bc,EAC7B,sBAAuBC,EACvB,sBAAuBC,EACvB,SAAUhB,EAAM,EAChB,gBAAiBA,EAAOiB,CAAe,EACvC,kBAAmBjB,EAAOiB,CAAe,EACzC,SAAUjB,EAAOkB,CAAc,EAC/B,aAAcd,EACd,SAAUJ,EAAOmB,CAAc,EAC/B,aAAcf,EACd,MAAOJ,EAAOoB,CAAW,EACzB,MAAOC,GACP,UAAWC,GACX,WAAYC,EACZ,KAAMvB,EAAOwB,CAAU,EACvB,SAAUxB,EAAM,EAChB,YAAaA,EAAM,EACnB,cAAeA,EAAM,EACrB,UAAWA,EAAM,EACjB,gBAAiByB,GACjB,0BAA2BC,EAC3B,oBAAqBC,GACrB,SAAUC,GACV,cAAe5B,EAAO6B,CAAmB,EACzC,0BAA2BC,EAC3B,kBAAmBC,EACnB,OAAQ/B,EAAM,EACd,cAAeA,EAAM,CAC3B,CACA,EAEEgC,GAAU7C,GAASltB,GAAW,CAAA,GAAI,iBAAmB,CAAA,CAAE,EAGvD,MAAM4Q,EAAO,CAAA,EAEb,OAAOof,EAUP,SAASA,EAAQpd,EAAQ,CAEvB,IAAIjJ,EAAO,CAAC,KAAM,OAAQ,SAAU,CAAA,CAAE,EAEtC,MAAMkJ,EAAU,CACd,MAAO,CAAClJ,CAAI,EACZ,WAAY,CAAA,EACZ,OAAAujB,EACA,MAAA3V,EACA,KAAA1C,EACA,OAAA8H,EACA,OAAAsT,EACA,KAAArf,CACN,EAEUsf,EAAY,CAAA,EAClB,IAAIjuB,EAAQ,GAEZ,KAAO,EAAEA,EAAQ2Q,EAAO,QAGtB,GACEA,EAAO3Q,CAAK,EAAE,CAAC,EAAE,OAASH,EAAM,aAChC8Q,EAAO3Q,CAAK,EAAE,CAAC,EAAE,OAASH,EAAM,cAEhC,GAAI8Q,EAAO3Q,CAAK,EAAE,CAAC,IAAM,QACvBiuB,EAAU,KAAKjuB,CAAK,MACf,CACL,MAAM8T,GAAOma,EAAU,IAAG,EAC1BzwB,EAAO,OAAOsW,IAAS,SAAU,0BAA0B,EAC3D9T,EAAQkuB,EAAYvd,EAAQmD,GAAM9T,CAAK,CACzC,CAMJ,IAFAA,EAAQ,GAED,EAAEA,EAAQ2Q,EAAO,QAAQ,CAC9B,MAAMwd,GAAUlD,EAAOta,EAAO3Q,CAAK,EAAE,CAAC,CAAC,EAEnCoH,GAAI,KAAK+mB,GAASxd,EAAO3Q,CAAK,EAAE,CAAC,EAAE,IAAI,GACzCmuB,GAAQxd,EAAO3Q,CAAK,EAAE,CAAC,EAAE,IAAI,EAAE,KAC7B,OAAO,OACL,CAAC,eAAgB2Q,EAAO3Q,CAAK,EAAE,CAAC,EAAE,cAAc,EAChD4Q,CACZ,EACUD,EAAO3Q,CAAK,EAAE,CAAC,CACzB,CAEI,CAGA,GAAI4Q,EAAQ,WAAW,OAAS,EAAG,CACjC,MAAMkD,GAAOlD,EAAQ,WAAWA,EAAQ,WAAW,OAAS,CAAC,GAC7CkD,GAAK,CAAC,GAAKsa,IACnB,KAAKxd,EAAS,OAAWkD,GAAK,CAAC,CAAC,CAC1C,CAgBA,IAbApM,EAAK,SAAW,CACd,MAAOlB,GACLmK,EAAO,OAAS,EAAIA,EAAO,CAAC,EAAE,CAAC,EAAE,MAAQ,CAAC,KAAM,EAAG,OAAQ,EAAG,OAAQ,CAAC,CAC/E,EACM,IAAKnK,GACHmK,EAAO,OAAS,EACZA,EAAOA,EAAO,OAAS,CAAC,EAAE,CAAC,EAAE,IAC7B,CAAC,KAAM,EAAG,OAAQ,EAAG,OAAQ,CAAC,CAC1C,CACA,EAGI3Q,EAAQ,GACD,EAAEA,EAAQirB,EAAO,WAAW,QACjCvjB,EAAOujB,EAAO,WAAWjrB,CAAK,EAAE0H,CAAI,GAAKA,EAG3C,OAAOA,CACT,CAQA,SAASwmB,EAAYvd,EAAQpN,EAAO8qB,EAAQ,CAC1C,IAAIruB,EAAQuD,EAAQ,EAChB+qB,EAAmB,GACnBC,GAAa,GAEb9C,GAEAvV,GAEAsY,GAEAxN,GAEJ,KAAO,EAAEhhB,GAASquB,GAAQ,CACxB,MAAMpY,GAAQtF,EAAO3Q,CAAK,EAE1B,OAAQiW,GAAM,CAAC,EAAE,KAAI,CACnB,KAAKpW,EAAM,cACX,KAAKA,EAAM,YACX,KAAKA,EAAM,WAAY,CACjBoW,GAAM,CAAC,IAAM,QACfqY,IAEAA,IAGFtN,GAAW,OAEX,KACF,CAEA,KAAKnhB,EAAM,gBAAiB,CACtBoW,GAAM,CAAC,IAAM,UAEbwV,IACA,CAACzK,IACD,CAACsN,GACD,CAACE,KAEDA,GAAsBxuB,GAGxBghB,GAAW,QAGb,KACF,CAEA,KAAKnhB,EAAM,WACX,KAAKA,EAAM,cACX,KAAKA,EAAM,eACX,KAAKA,EAAM,eACX,KAAKA,EAAM,yBAGT,MAGF,QACEmhB,GAAW,MAErB,CAEM,GACG,CAACsN,GACArY,GAAM,CAAC,IAAM,SACbA,GAAM,CAAC,EAAE,OAASpW,EAAM,gBACzByuB,IAAqB,IACpBrY,GAAM,CAAC,IAAM,SACZA,GAAM,CAAC,EAAE,OAASpW,EAAM,eACvBoW,GAAM,CAAC,EAAE,OAASpW,EAAM,aAC5B,CACA,GAAI4rB,GAAU,CACZ,IAAIgD,GAAYzuB,EAGhB,IAFAkW,GAAY,OAELuY,MAAa,CAClB,MAAMC,GAAY/d,EAAO8d,EAAS,EAElC,GACEC,GAAU,CAAC,EAAE,OAAS7uB,EAAM,YAC5B6uB,GAAU,CAAC,EAAE,OAAS7uB,EAAM,gBAC5B,CACA,GAAI6uB,GAAU,CAAC,IAAM,OAAQ,SAEzBxY,KACFvF,EAAOuF,EAAS,EAAE,CAAC,EAAE,KAAOrW,EAAM,gBAClC0uB,GAAa,IAGfG,GAAU,CAAC,EAAE,KAAO7uB,EAAM,WAC1BqW,GAAYuY,EACd,SACE,EAAAC,GAAU,CAAC,EAAE,OAAS7uB,EAAM,YAC5B6uB,GAAU,CAAC,EAAE,OAAS7uB,EAAM,kBAC5B6uB,GAAU,CAAC,EAAE,OAAS7uB,EAAM,4BAC5B6uB,GAAU,CAAC,EAAE,OAAS7uB,EAAM,kBAC5B6uB,GAAU,CAAC,EAAE,OAAS7uB,EAAM,gBAI5B,KAEJ,CAGE2uB,KACC,CAACtY,IAAasY,GAAsBtY,MAErCuV,GAAS,QAAU,IAIrBA,GAAS,IAAM,OAAO,OACpB,CAAA,EACAvV,GAAYvF,EAAOuF,EAAS,EAAE,CAAC,EAAE,MAAQD,GAAM,CAAC,EAAE,GAC9D,EAEUtF,EAAO,OAAOuF,IAAalW,EAAO,EAAG,CAAC,OAAQyrB,GAAUxV,GAAM,CAAC,CAAC,CAAC,EACjEjW,IACAquB,GACF,CAGA,GAAIpY,GAAM,CAAC,EAAE,OAASpW,EAAM,eAAgB,CAE1C,MAAMyP,GAAO,CACX,KAAM,WACN,QAAS,GACT,MAAO,OAAO,OAAO,CAAA,EAAI2G,GAAM,CAAC,EAAE,KAAK,EAEvC,IAAK,MACjB,EACUwV,GAAWnc,GACXqB,EAAO,OAAO3Q,EAAO,EAAG,CAAC,QAASsP,GAAM2G,GAAM,CAAC,CAAC,CAAC,EACjDjW,IACAquB,IACAG,GAAsB,OACtBxN,GAAW,EACb,CACF,CACF,CAEA,OAAArQ,EAAOpN,CAAK,EAAE,CAAC,EAAE,QAAUgrB,GACpBF,CACT,CAYA,SAASnD,EAAO9qB,EAAQuuB,EAAK,CAC3B,OAAOzd,EAOP,SAASA,EAAKxC,EAAO,CACnB4G,EAAM,KAAK,KAAMlV,EAAOsO,CAAK,EAAGA,CAAK,EACjCigB,GAAKA,EAAI,KAAK,KAAMjgB,CAAK,CAC/B,CACF,CAKA,SAASgM,GAAS,CAChB,KAAK,MAAM,KAAK,CAAC,KAAM,WAAY,SAAU,EAAE,CAAC,CAClD,CAKA,SAASpF,EAAM9R,EAAMkL,EAAOkgB,EAAc,CACxC,MAAMznB,EAAS,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC/C3J,EAAO2J,EAAQ,mBAAmB,EAClC3J,EAAO,aAAc2J,EAAQ,mBAAmB,EAE/BA,EAAO,SACf,KAAK3D,CAAI,EAClB,KAAK,MAAM,KAAKA,CAAI,EACpB,KAAK,WAAW,KAAK,CAACkL,EAAOkgB,GAAgB,MAAS,CAAC,EACvDprB,EAAK,SAAW,CACd,MAAOgD,GAAMkI,EAAM,KAAK,EAExB,IAAK,MACX,CACE,CAUA,SAASod,EAAO6C,EAAK,CACnB,OAAO7c,EAOP,SAASA,EAAMpD,EAAO,CAChBigB,GAAKA,EAAI,KAAK,KAAMjgB,CAAK,EAC7BkE,EAAK,KAAK,KAAMlE,CAAK,CACvB,CACF,CAKA,SAASkE,EAAKlE,EAAOmgB,EAAa,CAChC,MAAMrrB,EAAO,KAAK,MAAM,IAAG,EAC3BhG,EAAOgG,EAAM,iBAAiB,EAC9B,MAAM0N,EAAO,KAAK,WAAW,IAAG,EAEhC,GAAKA,EAQMA,EAAK,CAAC,EAAE,OAASxC,EAAM,OAC5BmgB,EACFA,EAAY,KAAK,KAAMngB,EAAOwC,EAAK,CAAC,CAAC,GAErBA,EAAK,CAAC,GAAKkd,IACnB,KAAK,KAAM1f,EAAOwC,EAAK,CAAC,CAAC,OAZnC,OAAM,IAAI,MACR,iBACExC,EAAM,KACN,MACA9H,GAAkB,CAAC,MAAO8H,EAAM,MAAO,IAAKA,EAAM,GAAG,CAAC,EACtD,kBACV,EAUIlR,EAAOgG,EAAK,OAAS,WAAY,8BAA8B,EAC/DhG,EAAOgG,EAAK,SAAU,mCAAmC,EACzDA,EAAK,SAAS,IAAMgD,GAAMkI,EAAM,GAAG,CACrC,CAKA,SAASsf,GAAS,CAChB,OAAOljB,GAAS,KAAK,MAAM,IAAG,CAAE,CAClC,CAUA,SAAS6gB,GAAqB,CAC5B,KAAK,KAAK,4BAA8B,EAC1C,CAMA,SAASD,EAAqBhd,EAAO,CACnC,GAAI,KAAK,KAAK,4BAA6B,CACzC,MAAMogB,EAAW,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EACjDtxB,EAAOsxB,EAAU,yBAAyB,EAC1CtxB,EAAOsxB,EAAS,OAAS,OAAQ,wBAAwB,EACzDA,EAAS,MAAQ,OAAO,SACtB,KAAK,eAAepgB,CAAK,EACzBrD,EAAU,kBAClB,EACM,KAAK,KAAK,4BAA8B,MAC1C,CACF,CAMA,SAASmhB,GAA4B,CACnC,MAAM7d,EAAO,KAAK,OAAM,EAClBnL,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7ChG,EAAOgG,EAAM,wBAAwB,EACrChG,EAAOgG,EAAK,OAAS,OAAQ,wBAAwB,EACrDA,EAAK,KAAOmL,CACd,CAMA,SAAS8d,GAA4B,CACnC,MAAM9d,EAAO,KAAK,OAAM,EAClBnL,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7ChG,EAAOgG,EAAM,wBAAwB,EACrChG,EAAOgG,EAAK,OAAS,OAAQ,wBAAwB,EACrDA,EAAK,KAAOmL,CACd,CAMA,SAAS4d,GAAwB,CAE3B,KAAK,KAAK,iBACd,KAAK,OAAM,EACX,KAAK,KAAK,eAAiB,GAC7B,CAMA,SAASD,GAAmB,CAC1B,MAAM3d,EAAO,KAAK,OAAM,EAClBnL,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7ChG,EAAOgG,EAAM,wBAAwB,EACrChG,EAAOgG,EAAK,OAAS,OAAQ,wBAAwB,EAErDA,EAAK,MAAQmL,EAAK,QAAQ,2BAA4B,EAAE,EACxD,KAAK,KAAK,eAAiB,MAC7B,CAMA,SAAS+d,GAAqB,CAC5B,MAAM/d,EAAO,KAAK,OAAM,EAClBnL,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7ChG,EAAOgG,EAAM,wBAAwB,EACrChG,EAAOgG,EAAK,OAAS,OAAQ,wBAAwB,EAErDA,EAAK,MAAQmL,EAAK,QAAQ,eAAgB,EAAE,CAC9C,CAMA,SAASke,EAA4Bne,EAAO,CAC1C,MAAMiQ,EAAQ,KAAK,OAAM,EACnBnb,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7ChG,EAAOgG,EAAM,wBAAwB,EACrChG,EAAOgG,EAAK,OAAS,aAAc,8BAA8B,EAEjEA,EAAK,MAAQmb,EACbnb,EAAK,WAAamJ,GAChB,KAAK,eAAe+B,CAAK,CAC/B,EAAM,YAAW,CACf,CAMA,SAASoe,GAA8B,CACrC,MAAMne,EAAO,KAAK,OAAM,EAClBnL,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7ChG,EAAOgG,EAAM,wBAAwB,EACrChG,EAAOgG,EAAK,OAAS,aAAc,8BAA8B,EAEjEA,EAAK,MAAQmL,CACf,CAMA,SAASie,GAAoC,CAC3C,MAAMje,EAAO,KAAK,OAAM,EAClBnL,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7ChG,EAAOgG,EAAM,wBAAwB,EACrChG,EAAOgG,EAAK,OAAS,aAAc,8BAA8B,EAEjEA,EAAK,IAAMmL,CACb,CAMA,SAASod,EAAyBrd,EAAO,CACvC,MAAMlL,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAI7C,GAHAhG,EAAOgG,EAAM,wBAAwB,EACrChG,EAAOgG,EAAK,OAAS,UAAW,2BAA2B,EAEvD,CAACA,EAAK,MAAO,CACf,MAAMurB,EAAQ,KAAK,eAAergB,CAAK,EAAE,OAEzClR,EACEuxB,IAAU,GACRA,IAAU,GACVA,IAAU,GACVA,IAAU,GACVA,IAAU,GACVA,IAAU,EACZ,sCACR,EAEMvrB,EAAK,MAAQurB,CACf,CACF,CAMA,SAASlB,GAA0B,CACjC,KAAK,KAAK,6BAA+B,EAC3C,CAMA,SAASD,EAAgClf,EAAO,CAC9C,MAAMlL,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7ChG,EAAOgG,EAAM,wBAAwB,EACrChG,EAAOgG,EAAK,OAAS,UAAW,2BAA2B,EAE3DA,EAAK,MACH,KAAK,eAAekL,CAAK,EAAE,YAAY,CAAC,IAAMtD,EAAM,SAAW,EAAI,CACvE,CAMA,SAASuiB,GAAsB,CAC7B,KAAK,KAAK,6BAA+B,MAC3C,CAOA,SAASvC,EAAY1c,EAAO,CAC1B,MAAMlL,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7ChG,EAAOgG,EAAM,wBAAwB,EACrChG,EAAO,aAAcgG,EAAM,0BAA0B,EAErD,MAAMwrB,EAAWxrB,EAAK,SAEtB,IAAIsQ,EAAOkb,EAASA,EAAS,OAAS,CAAC,GAEnC,CAAClb,GAAQA,EAAK,OAAS,UAEzBA,EAAOxL,GAAI,EACXwL,EAAK,SAAW,CACd,MAAOtN,GAAMkI,EAAM,KAAK,EAExB,IAAK,MACb,EACMsgB,EAAS,KAAKlb,CAAI,GAGpB,KAAK,MAAM,KAAKA,CAAI,CACtB,CAOA,SAASoY,EAAWxd,EAAO,CACzB,MAAMoF,EAAO,KAAK,MAAM,IAAG,EAC3BtW,EAAOsW,EAAM,sCAAsC,EACnDtW,EAAO,UAAWsW,EAAM,yCAAyC,EACjEtW,EAAOsW,EAAK,SAAU,0CAA0C,EAChEA,EAAK,OAAS,KAAK,eAAepF,CAAK,EACvCoF,EAAK,SAAS,IAAMtN,GAAMkI,EAAM,GAAG,CACrC,CAOA,SAAS2e,EAAiB3e,EAAO,CAC/B,MAAMkC,EAAU,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAIhD,GAHApT,EAAOoT,EAAS,iBAAiB,EAG7B,KAAK,KAAK,YAAa,CACzBpT,EAAO,aAAcoT,EAAS,mBAAmB,EACjD,MAAMkD,EAAOlD,EAAQ,SAASA,EAAQ,SAAS,OAAS,CAAC,EACzDpT,EAAOsW,EAAK,SAAU,2CAA2C,EACjEA,EAAK,SAAS,IAAMtN,GAAMkI,EAAM,GAAG,EACnC,KAAK,KAAK,YAAc,OACxB,MACF,CAGE,CAAC,KAAK,KAAK,8BACXuc,EAAO,eAAe,SAASra,EAAQ,IAAI,IAE3Cwa,EAAY,KAAK,KAAM1c,CAAK,EAC5Bwd,EAAW,KAAK,KAAMxd,CAAK,EAE/B,CAOA,SAASqe,GAAkB,CACzB,KAAK,KAAK,YAAc,EAC1B,CAOA,SAASC,GAAiB,CACxB,MAAMre,EAAO,KAAK,OAAM,EAClBnL,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7ChG,EAAOgG,EAAM,wBAAwB,EACrChG,EAAOgG,EAAK,OAAS,OAAQ,wBAAwB,EAErDA,EAAK,MAAQmL,CACf,CAOA,SAASse,GAAiB,CACxB,MAAMte,EAAO,KAAK,OAAM,EAClBnL,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7ChG,EAAOgG,EAAM,wBAAwB,EACrChG,EAAOgG,EAAK,OAAS,OAAQ,wBAAwB,EAErDA,EAAK,MAAQmL,CACf,CAOA,SAASge,GAAiB,CACxB,MAAMhe,EAAO,KAAK,OAAM,EAClBnL,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7ChG,EAAOgG,EAAM,wBAAwB,EACrChG,EAAOgG,EAAK,OAAS,aAAc,+BAA+B,EAElEA,EAAK,MAAQmL,CACf,CAOA,SAAS2e,GAAa,CACpB,MAAM9pB,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAQ7C,GAPAhG,EAAOgG,EAAM,wBAAwB,EACrChG,EAAOgG,EAAK,OAAS,OAAQ,wBAAwB,EAMjD,KAAK,KAAK,YAAa,CAEzB,MAAMyrB,EAAgB,KAAK,KAAK,eAAiB,WAEjDzrB,EAAK,MAAQ,YAEbA,EAAK,cAAgByrB,EAErB,OAAOzrB,EAAK,IACZ,OAAOA,EAAK,KACd,MAEE,OAAOA,EAAK,WAEZ,OAAOA,EAAK,MAGd,KAAK,KAAK,cAAgB,MAC5B,CAOA,SAAS0pB,GAAc,CACrB,MAAM1pB,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAQ7C,GAPAhG,EAAOgG,EAAM,wBAAwB,EACrChG,EAAOgG,EAAK,OAAS,QAAS,yBAAyB,EAMnD,KAAK,KAAK,YAAa,CAEzB,MAAMyrB,EAAgB,KAAK,KAAK,eAAiB,WAEjDzrB,EAAK,MAAQ,YAEbA,EAAK,cAAgByrB,EAErB,OAAOzrB,EAAK,IACZ,OAAOA,EAAK,KACd,MAEE,OAAOA,EAAK,WAEZ,OAAOA,EAAK,MAGd,KAAK,KAAK,cAAgB,MAC5B,CAOA,SAAS4pB,GAAgB1e,EAAO,CAC9B,MAAMuT,EAAS,KAAK,eAAevT,CAAK,EAClCogB,EAAW,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EACjDtxB,EAAOsxB,EAAU,4BAA4B,EAC7CtxB,EACEsxB,EAAS,OAAS,SAAWA,EAAS,OAAS,OAC/C,iCACN,EAIIA,EAAS,MAAQpE,GAAazI,CAAM,EAEpC6M,EAAS,WAAaniB,GAAoBsV,CAAM,EAAE,YAAW,CAC/D,CAOA,SAASkL,IAAc,CACrB,MAAM+B,EAAW,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EACjD1xB,EAAO0xB,EAAU,wBAAwB,EACzC1xB,EAAO0xB,EAAS,OAAS,WAAY,4BAA4B,EACjE,MAAM3xB,EAAQ,KAAK,OAAM,EACnBiG,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAU7C,GATAhG,EAAOgG,EAAM,wBAAwB,EACrChG,EACEgG,EAAK,OAAS,SAAWA,EAAK,OAAS,OACvC,iCACN,EAGI,KAAK,KAAK,YAAc,GAEpBA,EAAK,OAAS,OAAQ,CAExB,MAAMmF,EAAWumB,EAAS,SAE1B1rB,EAAK,SAAWmF,CAClB,MACEnF,EAAK,IAAMjG,CAEf,CAOA,SAASiwB,GAAkC,CACzC,MAAM7e,EAAO,KAAK,OAAM,EAClBnL,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7ChG,EAAOgG,EAAM,wBAAwB,EACrChG,EACEgG,EAAK,OAAS,SAAWA,EAAK,OAAS,OACvC,iCACN,EACIA,EAAK,IAAMmL,CACb,CAOA,SAAS8e,IAA4B,CACnC,MAAM9e,EAAO,KAAK,OAAM,EAClBnL,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7ChG,EAAOgG,EAAM,wBAAwB,EACrChG,EACEgG,EAAK,OAAS,SAAWA,EAAK,OAAS,OACvC,iCACN,EACIA,EAAK,MAAQmL,CACf,CAOA,SAAS+e,IAAiB,CACxB,KAAK,KAAK,YAAc,MAC1B,CAOA,SAAS9B,GAAmB,CAC1B,KAAK,KAAK,cAAgB,WAC5B,CAOA,SAAS2B,GAAsB7e,EAAO,CACpC,MAAMiQ,EAAQ,KAAK,OAAM,EACnBnb,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7ChG,EAAOgG,EAAM,wBAAwB,EACrChG,EACEgG,EAAK,OAAS,SAAWA,EAAK,OAAS,OACvC,qDACN,EAIIA,EAAK,MAAQmb,EAEbnb,EAAK,WAAamJ,GAChB,KAAK,eAAe+B,CAAK,CAC/B,EAAM,YAAW,EACb,KAAK,KAAK,cAAgB,MAC5B,CAOA,SAASyd,GAA+Bzd,EAAO,CAC7ClR,EACEkR,EAAM,OAAS,mCACbA,EAAM,OAAS,qCACvB,EACI,KAAK,KAAK,uBAAyBA,EAAM,IAC3C,CAMA,SAAS0d,GAA8B1d,EAAO,CAC5C,MAAMC,EAAO,KAAK,eAAeD,CAAK,EAChChI,EAAO,KAAK,KAAK,uBAEvB,IAAInJ,EAEJ,GAAImJ,EACFnJ,EAAQkP,GACNkC,EACAjI,IAAS7G,EAAM,gCACXwL,EAAU,mBACVA,EAAU,sBACtB,EACM,KAAK,KAAK,uBAAyB,WAC9B,CACL,MAAMtD,GAASmD,GAA8ByD,CAAI,EACjDnR,EAAOuK,KAAW,GAAO,8BAA8B,EACvDxK,EAAQwK,EACV,CAEA,MAAM+L,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7CtW,EAAOsW,EAAM,iBAAiB,EAC9BtW,EAAO,UAAWsW,EAAM,uBAAuB,EAC/CA,EAAK,OAASvW,CAChB,CAMA,SAAS8uB,GAAyB3d,EAAO,CACvC,MAAMoF,EAAO,KAAK,MAAM,IAAG,EAC3BtW,EAAOsW,EAAM,iBAAiB,EAC9BtW,EAAOsW,EAAK,SAAU,0BAA0B,EAChDA,EAAK,SAAS,IAAMtN,GAAMkI,EAAM,GAAG,CACrC,CAMA,SAASud,EAAuBvd,EAAO,CACrCwd,EAAW,KAAK,KAAMxd,CAAK,EAC3B,MAAMlL,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7ChG,EAAOgG,EAAM,wBAAwB,EACrChG,EAAOgG,EAAK,OAAS,OAAQ,wBAAwB,EAErDA,EAAK,IAAM,KAAK,eAAekL,CAAK,CACtC,CAMA,SAASsd,GAAoBtd,EAAO,CAClCwd,EAAW,KAAK,KAAMxd,CAAK,EAC3B,MAAMlL,EAAO,KAAK,MAAM,KAAK,MAAM,OAAS,CAAC,EAC7ChG,EAAOgG,EAAM,wBAAwB,EACrChG,EAAOgG,EAAK,OAAS,OAAQ,wBAAwB,EAErDA,EAAK,IAAM,UAAY,KAAK,eAAekL,CAAK,CAClD,CAOA,SAASgE,IAAa,CACpB,MAAO,CAAC,KAAM,aAAc,SAAU,CAAA,CAAE,CAC1C,CAGA,SAAS2Y,IAAW,CAClB,MAAO,CAAC,KAAM,OAAQ,KAAM,KAAM,KAAM,KAAM,MAAO,EAAE,CACzD,CAGA,SAASpW,IAAW,CAClB,MAAO,CAAC,KAAM,aAAc,MAAO,EAAE,CACvC,CAGA,SAASlW,IAAa,CACpB,MAAO,CACL,KAAM,aACN,WAAY,GACZ,MAAO,KACP,MAAO,KACP,IAAK,EACX,CACE,CAGA,SAASusB,IAAW,CAClB,MAAO,CAAC,KAAM,WAAY,SAAU,CAAA,CAAE,CACxC,CAGA,SAAS7J,IAAU,CACjB,MAAO,CACL,KAAM,UAEN,MAAO,EACP,SAAU,CAAA,CAChB,CACE,CAGA,SAAS8J,IAAY,CACnB,MAAO,CAAC,KAAM,OAAO,CACvB,CAGA,SAAS1qB,IAAO,CACd,MAAO,CAAC,KAAM,OAAQ,MAAO,EAAE,CACjC,CAGA,SAAS2qB,IAAQ,CACf,MAAO,CAAC,KAAM,QAAS,MAAO,KAAM,IAAK,GAAI,IAAK,IAAI,CACxD,CAGA,SAASL,IAAO,CACd,MAAO,CAAC,KAAM,OAAQ,MAAO,KAAM,IAAK,GAAI,SAAU,CAAA,CAAE,CAC1D,CAMA,SAAS5f,GAAKmD,EAAO,CACnB,MAAO,CACL,KAAM,OACN,QAASA,EAAM,OAAS,cACxB,MAAO,KACP,OAAQA,EAAM,QACd,SAAU,CAAA,CAChB,CACE,CAMA,SAAS+c,GAAS/c,EAAO,CACvB,MAAO,CACL,KAAM,WACN,OAAQA,EAAM,QACd,QAAS,KACT,SAAU,CAAA,CAChB,CACE,CAGA,SAASgT,IAAY,CACnB,MAAO,CAAC,KAAM,YAAa,SAAU,CAAA,CAAE,CACzC,CAGA,SAASmK,IAAS,CAChB,MAAO,CAAC,KAAM,SAAU,SAAU,CAAA,CAAE,CACtC,CAGA,SAASvjB,IAAO,CACd,MAAO,CAAC,KAAM,OAAQ,MAAO,EAAE,CACjC,CAGA,SAAS8X,IAAgB,CACvB,MAAO,CAAC,KAAM,eAAe,CAC/B,CACF,CAUA,SAAS5Z,GAAM4c,EAAG,CAChB,MAAO,CAAC,KAAMA,EAAE,KAAM,OAAQA,EAAE,OAAQ,OAAQA,EAAE,MAAM,CAC1D,CAOA,SAAS0K,GAAUqB,EAAUpjB,EAAY,CACvC,IAAI/L,EAAQ,GAEZ,KAAO,EAAEA,EAAQ+L,EAAW,QAAQ,CAClC,MAAMxO,EAAQwO,EAAW/L,CAAK,EAE1B,MAAM,QAAQzC,CAAK,EACrBuwB,GAAUqB,EAAU5xB,CAAK,EAEzB0O,GAAUkjB,EAAU5xB,CAAK,CAE7B,CACF,CAOA,SAAS0O,GAAUkjB,EAAUljB,EAAW,CAEtC,IAAI9L,EAEJ,IAAKA,KAAO8L,EACV,GAAI7E,GAAI,KAAK6E,EAAW9L,CAAG,EACzB,OAAQA,EAAG,CACT,IAAK,iBAAkB,CACrB,MAAMiM,EAAQH,EAAU9L,CAAG,EACvBiM,GACF+iB,EAAShvB,CAAG,EAAE,KAAK,GAAGiM,CAAK,EAG7B,KACF,CAEA,IAAK,aAAc,CACjB,MAAMA,EAAQH,EAAU9L,CAAG,EACvBiM,GACF+iB,EAAShvB,CAAG,EAAE,KAAK,GAAGiM,CAAK,EAG7B,KACF,CAEA,IAAK,QACL,IAAK,OAAQ,CACX,MAAMA,EAAQH,EAAU9L,CAAG,EACvBiM,GACF,OAAO,OAAO+iB,EAAShvB,CAAG,EAAGiM,CAAK,EAGpC,KACF,CAER,CAGA,CAGA,SAASgiB,GAAejiB,EAAMC,EAAO,CACnC,MAAID,EACI,IAAI,MACR,iBACEA,EAAK,KACL,MACAvF,GAAkB,CAAC,MAAOuF,EAAK,MAAO,IAAKA,EAAK,GAAG,CAAC,EACpD,0BACAC,EAAM,KACN,MACAxF,GAAkB,CAAC,MAAOwF,EAAM,MAAO,IAAKA,EAAM,GAAG,CAAC,EACtD,WACR,EAEU,IAAI,MACR,oCACEA,EAAM,KACN,MACAxF,GAAkB,CAAC,MAAOwF,EAAM,MAAO,IAAKA,EAAM,GAAG,CAAC,EACtD,iBACR,CAEA,CC9yCe,SAASgjB,GAAYrxB,EAAS,CAG3C,MAAMiR,EAAO,KAEbA,EAAK,OAAS8X,EAKd,SAASA,EAAOuI,EAAK,CACnB,OAAOtE,GAAasE,EAAK,CACvB,GAAGrgB,EAAK,KAAK,UAAU,EACvB,GAAGjR,EAIH,WAAYiR,EAAK,KAAK,qBAAqB,GAAK,CAAA,EAChD,gBAAiBA,EAAK,KAAK,wBAAwB,GAAK,CAAA,CAC9D,CAAK,CACH,CACF,CCvBO,SAASsgB,GAAWxnB,EAAOtE,EAAM,CAEtC,MAAMuE,EAAS,CACb,KAAM,UACN,QAAS,aACT,WAAY,CAAA,EACZ,SAAUD,EAAM,KAAKA,EAAM,IAAItE,CAAI,EAAG,EAAI,CAC9C,EACE,OAAAsE,EAAM,MAAMtE,EAAMuE,CAAM,EACjBD,EAAM,UAAUtE,EAAMuE,CAAM,CACrC,CCTO,SAASwjB,GAAUzjB,EAAOtE,EAAM,CAErC,MAAMuE,EAAS,CAAC,KAAM,UAAW,QAAS,KAAM,WAAY,GAAI,SAAU,CAAA,CAAE,EAC5E,OAAAD,EAAM,MAAMtE,EAAMuE,CAAM,EACjB,CAACD,EAAM,UAAUtE,EAAMuE,CAAM,EAAG,CAAC,KAAM,OAAQ,MAAO;AAAA,CAAI,CAAC,CACpE,CCLO,SAASsE,GAAKvE,EAAOtE,EAAM,CAChC,MAAMjG,EAAQiG,EAAK,MAAQA,EAAK,MAAQ;AAAA,EAAO,GAEzCnD,EAAa,CAAA,EAEfmD,EAAK,OACPnD,EAAW,UAAY,CAAC,YAAcmD,EAAK,IAAI,GAKjD,IAAIuE,EAAS,CACX,KAAM,UACN,QAAS,OACT,WAAA1H,EACA,SAAU,CAAC,CAAC,KAAM,OAAQ,MAAA9C,CAAK,CAAC,CACpC,EAEE,OAAIiG,EAAK,OACPuE,EAAO,KAAO,CAAC,KAAMvE,EAAK,IAAI,GAGhCsE,EAAM,MAAMtE,EAAMuE,CAAM,EACxBA,EAASD,EAAM,UAAUtE,EAAMuE,CAAM,EAGrCA,EAAS,CAAC,KAAM,UAAW,QAAS,MAAO,WAAY,CAAA,EAAI,SAAU,CAACA,CAAM,CAAC,EAC7ED,EAAM,MAAMtE,EAAMuE,CAAM,EACjBA,CACT,CC9BO,SAASwnB,GAAcznB,EAAOtE,EAAM,CAEzC,MAAMuE,EAAS,CACb,KAAM,UACN,QAAS,MACT,WAAY,CAAA,EACZ,SAAUD,EAAM,IAAItE,CAAI,CAC5B,EACE,OAAAsE,EAAM,MAAMtE,EAAMuE,CAAM,EACjBD,EAAM,UAAUtE,EAAMuE,CAAM,CACrC,CCVO,SAASujB,GAASxjB,EAAOtE,EAAM,CAEpC,MAAMuE,EAAS,CACb,KAAM,UACN,QAAS,KACT,WAAY,CAAA,EACZ,SAAUD,EAAM,IAAItE,CAAI,CAC5B,EACE,OAAAsE,EAAM,MAAMtE,EAAMuE,CAAM,EACjBD,EAAM,UAAUtE,EAAMuE,CAAM,CACrC,CCXO,SAASynB,GAAkB1nB,EAAOtE,EAAM,CAC7C,MAAMisB,EACJ,OAAO3nB,EAAM,QAAQ,eAAkB,SACnCA,EAAM,QAAQ,cACd,gBACA4nB,EAAK,OAAOlsB,EAAK,UAAU,EAAE,YAAW,EACxCmsB,EAASjiB,GAAagiB,EAAG,YAAW,CAAE,EACtC1vB,EAAQ8H,EAAM,cAAc,QAAQ4nB,CAAE,EAE5C,IAAIE,EAEAC,EAAe/nB,EAAM,eAAe,IAAI4nB,CAAE,EAE1CG,IAAiB,QACnBA,EAAe,EACf/nB,EAAM,cAAc,KAAK4nB,CAAE,EAC3BE,EAAU9nB,EAAM,cAAc,QAE9B8nB,EAAU5vB,EAAQ,EAGpB6vB,GAAgB,EAChB/nB,EAAM,eAAe,IAAI4nB,EAAIG,CAAY,EAGzC,MAAM1E,EAAO,CACX,KAAM,UACN,QAAS,IACT,WAAY,CACV,KAAM,IAAMsE,EAAgB,MAAQE,EACpC,GACEF,EACA,SACAE,GACCE,EAAe,EAAI,IAAMA,EAAe,IAC3C,gBAAiB,GACjB,gBAAiB,CAAC,gBAAgB,CACxC,EACI,SAAU,CAAC,CAAC,KAAM,OAAQ,MAAO,OAAOD,CAAO,CAAC,CAAC,CACrD,EACE9nB,EAAM,MAAMtE,EAAM2nB,CAAI,EAGtB,MAAM2E,EAAM,CACV,KAAM,UACN,QAAS,MACT,WAAY,CAAA,EACZ,SAAU,CAAC3E,CAAI,CACnB,EACE,OAAArjB,EAAM,MAAMtE,EAAMssB,CAAG,EACdhoB,EAAM,UAAUtE,EAAMssB,CAAG,CAClC,CClDO,SAASrO,GAAQ3Z,EAAOtE,EAAM,CAEnC,MAAMuE,EAAS,CACb,KAAM,UACN,QAAS,IAAMvE,EAAK,MACpB,WAAY,CAAA,EACZ,SAAUsE,EAAM,IAAItE,CAAI,CAC5B,EACE,OAAAsE,EAAM,MAAMtE,EAAMuE,CAAM,EACjBD,EAAM,UAAUtE,EAAMuE,CAAM,CACrC,CCRO,SAASlH,GAAKiH,EAAOtE,EAAM,CAChC,GAAIsE,EAAM,QAAQ,mBAAoB,CAEpC,MAAMC,EAAS,CAAC,KAAM,MAAO,MAAOvE,EAAK,KAAK,EAC9C,OAAAsE,EAAM,MAAMtE,EAAMuE,CAAM,EACjBD,EAAM,UAAUtE,EAAMuE,CAAM,CACrC,CAGF,CCRO,SAASgoB,GAAOjoB,EAAOtE,EAAM,CAClC,MAAMwsB,EAAUxsB,EAAK,cACrB,IAAIysB,EAAS,IAQb,GANID,IAAY,YACdC,GAAU,KACDD,IAAY,SACrBC,GAAU,KAAOzsB,EAAK,OAASA,EAAK,YAAc,KAGhDA,EAAK,OAAS,iBAChB,MAAO,CAAC,CAAC,KAAM,OAAQ,MAAO,KAAOA,EAAK,IAAMysB,CAAM,CAAC,EAGzD,MAAMC,EAAWpoB,EAAM,IAAItE,CAAI,EACzBumB,EAAOmG,EAAS,CAAC,EAEnBnG,GAAQA,EAAK,OAAS,OACxBA,EAAK,MAAQ,IAAMA,EAAK,MAExBmG,EAAS,QAAQ,CAAC,KAAM,OAAQ,MAAO,GAAG,CAAC,EAG7C,MAAMpc,EAAOoc,EAASA,EAAS,OAAS,CAAC,EAEzC,OAAIpc,GAAQA,EAAK,OAAS,OACxBA,EAAK,OAASmc,EAEdC,EAAS,KAAK,CAAC,KAAM,OAAQ,MAAOD,CAAM,CAAC,EAGtCC,CACT,CCjCO,SAASC,GAAeroB,EAAOtE,EAAM,CAC1C,MAAMksB,EAAK,OAAOlsB,EAAK,UAAU,EAAE,YAAW,EACxCzE,EAAa+I,EAAM,eAAe,IAAI4nB,CAAE,EAE9C,GAAI,CAAC3wB,EACH,OAAOgxB,GAAOjoB,EAAOtE,CAAI,EAI3B,MAAMnD,EAAa,CAAC,IAAKqN,GAAa3O,EAAW,KAAO,EAAE,EAAG,IAAKyE,EAAK,GAAG,EAEtEzE,EAAW,QAAU,MAAQA,EAAW,QAAU,SACpDsB,EAAW,MAAQtB,EAAW,OAIhC,MAAMgJ,EAAS,CAAC,KAAM,UAAW,QAAS,MAAO,WAAA1H,EAAY,SAAU,CAAA,CAAE,EACzE,OAAAyH,EAAM,MAAMtE,EAAMuE,CAAM,EACjBD,EAAM,UAAUtE,EAAMuE,CAAM,CACrC,CCrBO,SAASyjB,GAAM1jB,EAAOtE,EAAM,CAEjC,MAAMnD,EAAa,CAAC,IAAKqN,GAAalK,EAAK,GAAG,CAAC,EAE3CA,EAAK,MAAQ,MAAQA,EAAK,MAAQ,SACpCnD,EAAW,IAAMmD,EAAK,KAGpBA,EAAK,QAAU,MAAQA,EAAK,QAAU,SACxCnD,EAAW,MAAQmD,EAAK,OAI1B,MAAMuE,EAAS,CAAC,KAAM,UAAW,QAAS,MAAO,WAAA1H,EAAY,SAAU,CAAA,CAAE,EACzE,OAAAyH,EAAM,MAAMtE,EAAMuE,CAAM,EACjBD,EAAM,UAAUtE,EAAMuE,CAAM,CACrC,CCfO,SAASqoB,GAAWtoB,EAAOtE,EAAM,CAEtC,MAAM8E,EAAO,CAAC,KAAM,OAAQ,MAAO9E,EAAK,MAAM,QAAQ,YAAa,GAAG,CAAC,EACvEsE,EAAM,MAAMtE,EAAM8E,CAAI,EAGtB,MAAMP,EAAS,CACb,KAAM,UACN,QAAS,OACT,WAAY,CAAA,EACZ,SAAU,CAACO,CAAI,CACnB,EACE,OAAAR,EAAM,MAAMtE,EAAMuE,CAAM,EACjBD,EAAM,UAAUtE,EAAMuE,CAAM,CACrC,CCbO,SAASsoB,GAAcvoB,EAAOtE,EAAM,CACzC,MAAMksB,EAAK,OAAOlsB,EAAK,UAAU,EAAE,YAAW,EACxCzE,EAAa+I,EAAM,eAAe,IAAI4nB,CAAE,EAE9C,GAAI,CAAC3wB,EACH,OAAOgxB,GAAOjoB,EAAOtE,CAAI,EAI3B,MAAMnD,EAAa,CAAC,KAAMqN,GAAa3O,EAAW,KAAO,EAAE,CAAC,EAExDA,EAAW,QAAU,MAAQA,EAAW,QAAU,SACpDsB,EAAW,MAAQtB,EAAW,OAIhC,MAAMgJ,EAAS,CACb,KAAM,UACN,QAAS,IACT,WAAA1H,EACA,SAAUyH,EAAM,IAAItE,CAAI,CAC5B,EACE,OAAAsE,EAAM,MAAMtE,EAAMuE,CAAM,EACjBD,EAAM,UAAUtE,EAAMuE,CAAM,CACrC,CC1BO,SAASojB,GAAKrjB,EAAOtE,EAAM,CAEhC,MAAMnD,EAAa,CAAC,KAAMqN,GAAalK,EAAK,GAAG,CAAC,EAE5CA,EAAK,QAAU,MAAQA,EAAK,QAAU,SACxCnD,EAAW,MAAQmD,EAAK,OAI1B,MAAMuE,EAAS,CACb,KAAM,UACN,QAAS,IACT,WAAA1H,EACA,SAAUyH,EAAM,IAAItE,CAAI,CAC5B,EACE,OAAAsE,EAAM,MAAMtE,EAAMuE,CAAM,EACjBD,EAAM,UAAUtE,EAAMuE,CAAM,CACrC,CCZO,SAAS0jB,GAAS3jB,EAAOtE,EAAM2D,EAAQ,CAC5C,MAAMmpB,EAAUxoB,EAAM,IAAItE,CAAI,EACxB+sB,EAAQppB,EAASqpB,GAAUrpB,CAAM,EAAIspB,GAAcjtB,CAAI,EAEvDnD,EAAa,CAAA,EAEbsI,EAAW,CAAA,EAEjB,GAAI,OAAOnF,EAAK,SAAY,UAAW,CACrC,MAAMumB,EAAOuG,EAAQ,CAAC,EAEtB,IAAI5O,EAEAqI,GAAQA,EAAK,OAAS,WAAaA,EAAK,UAAY,IACtDrI,EAAYqI,GAEZrI,EAAY,CAAC,KAAM,UAAW,QAAS,IAAK,WAAY,GAAI,SAAU,CAAA,CAAE,EACxE4O,EAAQ,QAAQ5O,CAAS,GAGvBA,EAAU,SAAS,OAAS,GAC9BA,EAAU,SAAS,QAAQ,CAAC,KAAM,OAAQ,MAAO,GAAG,CAAC,EAGvDA,EAAU,SAAS,QAAQ,CACzB,KAAM,UACN,QAAS,QACT,WAAY,CAAC,KAAM,WAAY,QAASle,EAAK,QAAS,SAAU,EAAI,EACpE,SAAU,CAAA,CAChB,CAAK,EAIDnD,EAAW,UAAY,CAAC,gBAAgB,CAC1C,CAEA,IAAIL,EAAQ,GAEZ,KAAO,EAAEA,EAAQswB,EAAQ,QAAQ,CAC/B,MAAMznB,EAAQynB,EAAQtwB,CAAK,GAIzBuwB,GACAvwB,IAAU,GACV6I,EAAM,OAAS,WACfA,EAAM,UAAY,MAElBF,EAAS,KAAK,CAAC,KAAM,OAAQ,MAAO;AAAA,CAAI,CAAC,EAGvCE,EAAM,OAAS,WAAaA,EAAM,UAAY,KAAO,CAAC0nB,EACxD5nB,EAAS,KAAK,GAAGE,EAAM,QAAQ,EAE/BF,EAAS,KAAKE,CAAK,CAEvB,CAEA,MAAMiL,EAAOwc,EAAQA,EAAQ,OAAS,CAAC,EAGnCxc,IAASyc,GAASzc,EAAK,OAAS,WAAaA,EAAK,UAAY,MAChEnL,EAAS,KAAK,CAAC,KAAM,OAAQ,MAAO;AAAA,CAAI,CAAC,EAI3C,MAAMZ,EAAS,CAAC,KAAM,UAAW,QAAS,KAAM,WAAA1H,EAAY,SAAAsI,CAAQ,EACpE,OAAAb,EAAM,MAAMtE,EAAMuE,CAAM,EACjBD,EAAM,UAAUtE,EAAMuE,CAAM,CACrC,CAMA,SAASyoB,GAAUhtB,EAAM,CACvB,IAAI+sB,EAAQ,GACZ,GAAI/sB,EAAK,OAAS,OAAQ,CACxB+sB,EAAQ/sB,EAAK,QAAU,GACvB,MAAMmF,EAAWnF,EAAK,SACtB,IAAIxD,EAAQ,GAEZ,KAAO,CAACuwB,GAAS,EAAEvwB,EAAQ2I,EAAS,QAClC4nB,EAAQE,GAAc9nB,EAAS3I,CAAK,CAAC,CAEzC,CAEA,OAAOuwB,CACT,CAMA,SAASE,GAAcjtB,EAAM,CAC3B,MAAMktB,EAASltB,EAAK,OAEpB,OAAOktB,GACHltB,EAAK,SAAS,OAAS,CAE7B,CCxGO,SAAS+H,GAAKzD,EAAOtE,EAAM,CAEhC,MAAMnD,EAAa,CAAA,EACbiwB,EAAUxoB,EAAM,IAAItE,CAAI,EAC9B,IAAIxD,EAAQ,GAOZ,IALI,OAAOwD,EAAK,OAAU,UAAYA,EAAK,QAAU,IACnDnD,EAAW,MAAQmD,EAAK,OAInB,EAAExD,EAAQswB,EAAQ,QAAQ,CAC/B,MAAMznB,EAAQynB,EAAQtwB,CAAK,EAE3B,GACE6I,EAAM,OAAS,WACfA,EAAM,UAAY,MAClBA,EAAM,YACN,MAAM,QAAQA,EAAM,WAAW,SAAS,GACxCA,EAAM,WAAW,UAAU,SAAS,gBAAgB,EACpD,CACAxI,EAAW,UAAY,CAAC,oBAAoB,EAC5C,KACF,CACF,CAGA,MAAM0H,EAAS,CACb,KAAM,UACN,QAASvE,EAAK,QAAU,KAAO,KAC/B,WAAAnD,EACA,SAAUyH,EAAM,KAAKwoB,EAAS,EAAI,CACtC,EACE,OAAAxoB,EAAM,MAAMtE,EAAMuE,CAAM,EACjBD,EAAM,UAAUtE,EAAMuE,CAAM,CACrC,CCpCO,SAAS2Z,GAAU5Z,EAAOtE,EAAM,CAErC,MAAMuE,EAAS,CACb,KAAM,UACN,QAAS,IACT,WAAY,CAAA,EACZ,SAAUD,EAAM,IAAItE,CAAI,CAC5B,EACE,OAAAsE,EAAM,MAAMtE,EAAMuE,CAAM,EACjBD,EAAM,UAAUtE,EAAMuE,CAAM,CACrC,CCTO,SAASM,GAAKP,EAAOtE,EAAM,CAEhC,MAAMuE,EAAS,CAAC,KAAM,OAAQ,SAAUD,EAAM,KAAKA,EAAM,IAAItE,CAAI,CAAC,CAAC,EACnE,OAAAsE,EAAM,MAAMtE,EAAMuE,CAAM,EACjBD,EAAM,UAAUtE,EAAMuE,CAAM,CACrC,CCNO,SAAS8jB,GAAO/jB,EAAOtE,EAAM,CAElC,MAAMuE,EAAS,CACb,KAAM,UACN,QAAS,SACT,WAAY,CAAA,EACZ,SAAUD,EAAM,IAAItE,CAAI,CAC5B,EACE,OAAAsE,EAAM,MAAMtE,EAAMuE,CAAM,EACjBD,EAAM,UAAUtE,EAAMuE,CAAM,CACrC,CCXO,SAAS4oB,GAAM7oB,EAAOtE,EAAM,CACjC,MAAMotB,EAAO9oB,EAAM,IAAItE,CAAI,EACrBqtB,EAAWD,EAAK,MAAK,EAErBE,EAAe,CAAA,EAErB,GAAID,EAAU,CAEZ,MAAM9G,EAAO,CACX,KAAM,UACN,QAAS,QACT,WAAY,CAAA,EACZ,SAAUjiB,EAAM,KAAK,CAAC+oB,CAAQ,EAAG,EAAI,CAC3C,EACI/oB,EAAM,MAAMtE,EAAK,SAAS,CAAC,EAAGumB,CAAI,EAClC+G,EAAa,KAAK/G,CAAI,CACxB,CAEA,GAAI6G,EAAK,OAAS,EAAG,CAEnB,MAAMG,EAAO,CACX,KAAM,UACN,QAAS,QACT,WAAY,CAAA,EACZ,SAAUjpB,EAAM,KAAK8oB,EAAM,EAAI,CACrC,EAEUrtB,EAAQkD,GAAWjD,EAAK,SAAS,CAAC,CAAC,EACnCmD,EAAMJ,GAAS/C,EAAK,SAASA,EAAK,SAAS,OAAS,CAAC,CAAC,EACxDD,GAASoD,IAAKoqB,EAAK,SAAW,CAAC,MAAAxtB,EAAO,IAAAoD,CAAG,GAC7CmqB,EAAa,KAAKC,CAAI,CACxB,CAGA,MAAMhpB,EAAS,CACb,KAAM,UACN,QAAS,QACT,WAAY,CAAA,EACZ,SAAUD,EAAM,KAAKgpB,EAAc,EAAI,CAC3C,EACE,OAAAhpB,EAAM,MAAMtE,EAAMuE,CAAM,EACjBD,EAAM,UAAUtE,EAAMuE,CAAM,CACrC,CCpCO,SAASipB,GAASlpB,EAAOtE,EAAM2D,EAAQ,CAC5C,MAAM6nB,EAAW7nB,EAASA,EAAO,SAAW,OAGtC4T,GADWiU,EAAWA,EAAS,QAAQxrB,CAAI,EAAI,KACxB,EAAI,KAAO,KAElCytB,EAAQ9pB,GAAUA,EAAO,OAAS,QAAUA,EAAO,MAAQ,OAC3DknB,EAAS4C,EAAQA,EAAM,OAASztB,EAAK,SAAS,OACpD,IAAI0tB,EAAY,GAEhB,MAAMC,EAAQ,CAAA,EAEd,KAAO,EAAED,EAAY7C,GAAQ,CAE3B,MAAM+C,EAAO5tB,EAAK,SAAS0tB,CAAS,EAE9B7wB,EAAa,CAAA,EACbmJ,EAAaynB,EAAQA,EAAMC,CAAS,EAAI,OAE1C1nB,IACFnJ,EAAW,MAAQmJ,GAIrB,IAAIzB,EAAS,CAAC,KAAM,UAAW,QAAAgT,EAAS,WAAA1a,EAAY,SAAU,CAAA,CAAE,EAE5D+wB,IACFrpB,EAAO,SAAWD,EAAM,IAAIspB,CAAI,EAChCtpB,EAAM,MAAMspB,EAAMrpB,CAAM,EACxBA,EAASD,EAAM,UAAUspB,EAAMrpB,CAAM,GAGvCopB,EAAM,KAAKppB,CAAM,CACnB,CAGA,MAAMA,EAAS,CACb,KAAM,UACN,QAAS,KACT,WAAY,CAAA,EACZ,SAAUD,EAAM,KAAKqpB,EAAO,EAAI,CACpC,EACE,OAAArpB,EAAM,MAAMtE,EAAMuE,CAAM,EACjBD,EAAM,UAAUtE,EAAMuE,CAAM,CACrC,CCjDO,SAASspB,GAAUvpB,EAAOtE,EAAM,CAIrC,MAAMuE,EAAS,CACb,KAAM,UACN,QAAS,KACT,WAAY,CAAA,EACZ,SAAUD,EAAM,IAAItE,CAAI,CAC5B,EACE,OAAAsE,EAAM,MAAMtE,EAAMuE,CAAM,EACjBD,EAAM,UAAUtE,EAAMuE,CAAM,CACrC,CC/BA,MAAMupB,GAAM,EACN1yB,GAAQ,GAWP,SAAS2yB,GAAUh0B,EAAO,CAC/B,MAAMi0B,EAAS,OAAOj0B,CAAK,EACrBmoB,EAAS,YACf,IAAI7hB,EAAQ6hB,EAAO,KAAK8L,CAAM,EAC1BC,EAAO,EAEX,MAAMruB,EAAQ,CAAA,EAEd,KAAOS,GACLT,EAAM,KACJsuB,GAASF,EAAO,MAAMC,EAAM5tB,EAAM,KAAK,EAAG4tB,EAAO,EAAG,EAAI,EACxD5tB,EAAM,CAAC,CACb,EAEI4tB,EAAO5tB,EAAM,MAAQA,EAAM,CAAC,EAAE,OAC9BA,EAAQ6hB,EAAO,KAAK8L,CAAM,EAG5B,OAAApuB,EAAM,KAAKsuB,GAASF,EAAO,MAAMC,CAAI,EAAGA,EAAO,EAAG,EAAK,CAAC,EAEjDruB,EAAM,KAAK,EAAE,CACtB,CAYA,SAASsuB,GAASn0B,EAAOgG,EAAOoD,EAAK,CACnC,IAAI+iB,EAAa,EACbE,EAAWrsB,EAAM,OAErB,GAAIgG,EAAO,CACT,IAAI8I,EAAO9O,EAAM,YAAYmsB,CAAU,EAEvC,KAAOrd,IAASilB,IAAOjlB,IAASzN,IAC9B8qB,IACArd,EAAO9O,EAAM,YAAYmsB,CAAU,CAEvC,CAEA,GAAI/iB,EAAK,CACP,IAAI0F,EAAO9O,EAAM,YAAYqsB,EAAW,CAAC,EAEzC,KAAOvd,IAASilB,IAAOjlB,IAASzN,IAC9BgrB,IACAvd,EAAO9O,EAAM,YAAYqsB,EAAW,CAAC,CAEzC,CAEA,OAAOA,EAAWF,EAAansB,EAAM,MAAMmsB,EAAYE,CAAQ,EAAI,EACrE,CCjDO,SAASthB,GAAKR,EAAOtE,EAAM,CAEhC,MAAMuE,EAAS,CAAC,KAAM,OAAQ,MAAOwpB,GAAU,OAAO/tB,EAAK,KAAK,CAAC,CAAC,EAClE,OAAAsE,EAAM,MAAMtE,EAAMuE,CAAM,EACjBD,EAAM,UAAUtE,EAAMuE,CAAM,CACrC,CCLO,SAASqY,GAActY,EAAOtE,EAAM,CAEzC,MAAMuE,EAAS,CACb,KAAM,UACN,QAAS,KACT,WAAY,CAAA,EACZ,SAAU,CAAA,CACd,EACE,OAAAD,EAAM,MAAMtE,EAAMuE,CAAM,EACjBD,EAAM,UAAUtE,EAAMuE,CAAM,CACrC,CCAO,MAAM4pB,GAAW,CACtB,WAAArC,GACA,MAAO/D,GACP,KAAAlf,GACA,OAAQkjB,GACR,SAAAjE,GACA,kBAAAkE,GACA,QAAA/N,GACA,KAAA5gB,GACA,eAAAsvB,GACA,MAAA3E,GACA,WAAA4E,GACA,cAAAC,GACA,KAAAlF,GACA,SAAAM,GACA,KAAAlgB,GACA,UAAAmW,GAEA,KAAArZ,GACA,OAAAwjB,GACA,MAAA8E,GACA,UAAAU,GACA,SAAAL,GACA,KAAA1oB,GACA,cAAA8X,GACA,KAAMwR,GACN,KAAMA,GACN,WAAYA,GACZ,mBAAoBA,EACtB,EAGA,SAASA,IAAS,CAElB,CC/DO,MAAMC,GAAa,GACbC,GAAa,EACbC,GAAa,EACbC,GAAa,EACbC,GAAa,EACbC,GAAa,EACbC,GAAa,EACbC,GAAa,EACbC,GAAa,EACbC,GAAa,ECFpBtO,GAAM,OAAO,MAAS,SAAW,KAAO,WAExCuO,GAAe,CAACC,EAAG/xB,IAAM,CAC7B,MAAMgyB,EAAK,CAACC,EAAK1yB,KACfwyB,EAAE,IAAIxyB,EAAO0yB,CAAG,EACTA,GAGHC,EAAS3yB,GAAS,CACtB,GAAIwyB,EAAE,IAAIxyB,CAAK,EACb,OAAOwyB,EAAE,IAAIxyB,CAAK,EAEpB,KAAM,CAAC0G,EAAMnJ,CAAK,EAAIkD,EAAET,CAAK,EAC7B,OAAQ0G,EAAA,CACN,KAAKorB,GACL,KAAKD,GACH,OAAOY,EAAGl1B,EAAOyC,CAAK,EACxB,KAAK+xB,GAAO,CACV,MAAMa,EAAMH,EAAG,CAAA,EAAIzyB,CAAK,EACxB,UAAWA,KAASzC,EAClBq1B,EAAI,KAAKD,EAAO3yB,CAAK,CAAC,EACxB,OAAO4yB,CACT,CACA,KAAKZ,GAAQ,CACX,MAAMa,EAASJ,EAAG,CAAA,EAAIzyB,CAAK,EAC3B,SAAW,CAACG,EAAKH,CAAK,IAAKzC,EACzBs1B,EAAOF,EAAOxyB,CAAG,CAAC,EAAIwyB,EAAO3yB,CAAK,EACpC,OAAO6yB,CACT,CACA,KAAKZ,GACH,OAAOQ,EAAG,IAAI,KAAKl1B,CAAK,EAAGyC,CAAK,EAClC,KAAKkyB,GAAQ,CACX,KAAM,CAAC,OAAAV,EAAQ,MAAAsB,CAAA,EAASv1B,EACxB,OAAOk1B,EAAG,IAAI,OAAOjB,EAAQsB,CAAK,EAAG9yB,CAAK,CAC5C,CACA,KAAKmyB,GAAK,CACR,MAAMlJ,EAAMwJ,EAAG,IAAI,IAAKzyB,CAAK,EAC7B,SAAW,CAACG,EAAKH,CAAK,IAAKzC,EACzB0rB,EAAI,IAAI0J,EAAOxyB,CAAG,EAAGwyB,EAAO3yB,CAAK,CAAC,EACpC,OAAOipB,CACT,CACA,KAAKmJ,GAAK,CACR,MAAMW,EAAMN,EAAG,IAAI,IAAKzyB,CAAK,EAC7B,UAAWA,KAASzC,EAClBw1B,EAAI,IAAIJ,EAAO3yB,CAAK,CAAC,EACvB,OAAO+yB,CACT,CACA,KAAKV,GAAO,CACV,KAAM,CAAC,KAAAj0B,EAAM,QAAApB,CAAA,EAAWO,EACxB,OAAOk1B,EAAG,IAAIzO,GAAI5lB,CAAI,EAAEpB,CAAO,EAAGgD,CAAK,CACzC,CACA,KAAKsyB,GACH,OAAOG,EAAG,OAAOl1B,CAAK,EAAGyC,CAAK,EAChC,IAAK,SACH,OAAOyyB,EAAG,OAAO,OAAOl1B,CAAK,CAAC,EAAGyC,CAAK,EACxC,IAAK,cACH,OAAOyyB,EAAG,IAAI,WAAWl1B,CAAK,EAAE,OAAQA,CAAK,EAC/C,IAAK,WAAY,CACf,KAAM,CAAE,OAAAmd,CAAA,EAAW,IAAI,WAAWnd,CAAK,EACvC,OAAOk1B,EAAG,IAAI,SAAS/X,CAAM,EAAGnd,CAAK,CACvC,CAAA,CAEF,OAAOk1B,EAAG,IAAIzO,GAAItd,CAAI,EAAEnJ,CAAK,EAAGyC,CAAK,CACvC,EAEA,OAAO2yB,CACT,EAWaK,GAAcC,GAAcV,OAAiB,IAAKU,CAAU,EAAE,CAAC,EC7EtEC,GAAQ,GAER,CAAC,SAAApoB,EAAQ,EAAI,CAAA,EACb,CAAC,KAAAqoB,EAAI,EAAI,OAETC,GAAS71B,GAAS,CACtB,MAAMmJ,EAAO,OAAOnJ,EACpB,GAAImJ,IAAS,UAAY,CAACnJ,EACxB,MAAO,CAACu0B,GAAWprB,CAAI,EAEzB,MAAM2sB,EAAWvoB,GAAS,KAAKvN,CAAK,EAAE,MAAM,EAAG,EAAE,EACjD,OAAQ81B,EAAQ,CACd,IAAK,QACH,MAAO,CAACtB,GAAOmB,EAAK,EACtB,IAAK,SACH,MAAO,CAAClB,GAAQkB,EAAK,EACvB,IAAK,OACH,MAAO,CAACjB,GAAMiB,EAAK,EACrB,IAAK,SACH,MAAO,CAAChB,GAAQgB,EAAK,EACvB,IAAK,MACH,MAAO,CAACf,GAAKe,EAAK,EACpB,IAAK,MACH,MAAO,CAACd,GAAKc,EAAK,EACpB,IAAK,WACH,MAAO,CAACnB,GAAOsB,CAAQ,CAC7B,CAEE,OAAIA,EAAS,SAAS,OAAO,EACpB,CAACtB,GAAOsB,CAAQ,EAErBA,EAAS,SAAS,OAAO,EACpB,CAAChB,GAAOgB,CAAQ,EAElB,CAACrB,GAAQqB,CAAQ,CAC1B,EAEMC,GAAa,CAAC,CAACC,EAAM7sB,CAAI,IAC7B6sB,IAASzB,KACRprB,IAAS,YAAcA,IAAS,UAG7B8sB,GAAa,CAACC,EAAQC,EAAMlB,EAAG/xB,IAAM,CAEzC,MAAMgyB,EAAK,CAACC,EAAKn1B,IAAU,CACzB,MAAMyC,EAAQS,EAAE,KAAKiyB,CAAG,EAAI,EAC5B,OAAAF,EAAE,IAAIj1B,EAAOyC,CAAK,EACXA,CACT,EAEM2zB,EAAOp2B,GAAS,CACpB,GAAIi1B,EAAE,IAAIj1B,CAAK,EACb,OAAOi1B,EAAE,IAAIj1B,CAAK,EAEpB,GAAI,CAACg2B,EAAM7sB,CAAI,EAAI0sB,GAAO71B,CAAK,EAC/B,OAAQg2B,EAAI,CACV,KAAKzB,GAAW,CACd,IAAIvhB,EAAQhT,EACZ,OAAQmJ,EAAI,CACV,IAAK,SACH6sB,EAAOjB,GACP/hB,EAAQhT,EAAM,SAAQ,EACtB,MACF,IAAK,WACL,IAAK,SACH,GAAIk2B,EACF,MAAM,IAAI,UAAU,uBAAyB/sB,CAAI,EACnD6J,EAAQ,KACR,MACF,IAAK,YACH,OAAOkiB,EAAG,CAACZ,EAAI,EAAGt0B,CAAK,CACnC,CACQ,OAAOk1B,EAAG,CAACc,EAAMhjB,CAAK,EAAGhT,CAAK,CAChC,CACA,KAAKw0B,GAAO,CACV,GAAIrrB,EAAM,CACR,IAAIgqB,EAASnzB,EACb,OAAImJ,IAAS,WACXgqB,EAAS,IAAI,WAAWnzB,EAAM,MAAM,EAE7BmJ,IAAS,gBAChBgqB,EAAS,IAAI,WAAWnzB,CAAK,GAExBk1B,EAAG,CAAC/rB,EAAM,CAAC,GAAGgqB,CAAM,CAAC,EAAGnzB,CAAK,CACtC,CAEA,MAAMq1B,EAAM,CAAA,EACN5yB,EAAQyyB,EAAG,CAACc,EAAMX,CAAG,EAAGr1B,CAAK,EACnC,UAAWgT,KAAShT,EAClBq1B,EAAI,KAAKe,EAAKpjB,CAAK,CAAC,EACtB,OAAOvQ,CACT,CACA,KAAKgyB,GAAQ,CACX,GAAItrB,EACF,OAAQA,EAAI,CACV,IAAK,SACH,OAAO+rB,EAAG,CAAC/rB,EAAMnJ,EAAM,SAAQ,CAAE,EAAGA,CAAK,EAC3C,IAAK,UACL,IAAK,SACL,IAAK,SACH,OAAOk1B,EAAG,CAAC/rB,EAAMnJ,EAAM,QAAO,CAAE,EAAGA,CAAK,CACtD,CAGQ,GAAIm2B,GAAS,WAAYn2B,EACvB,OAAOo2B,EAAKp2B,EAAM,QAAQ,EAE5B,MAAMq2B,EAAU,CAAA,EACV5zB,EAAQyyB,EAAG,CAACc,EAAMK,CAAO,EAAGr2B,CAAK,EACvC,UAAW4C,KAAOgzB,GAAK51B,CAAK,GACtBk2B,GAAU,CAACH,GAAWF,GAAO71B,EAAM4C,CAAG,CAAC,CAAC,IAC1CyzB,EAAQ,KAAK,CAACD,EAAKxzB,CAAG,EAAGwzB,EAAKp2B,EAAM4C,CAAG,CAAC,CAAC,CAAC,EAE9C,OAAOH,CACT,CACA,KAAKiyB,GACH,OAAOQ,EAAG,CAACc,EAAMh2B,EAAM,YAAW,CAAE,EAAGA,CAAK,EAC9C,KAAK20B,GAAQ,CACX,KAAM,CAAC,OAAAV,EAAQ,MAAAsB,CAAK,EAAIv1B,EACxB,OAAOk1B,EAAG,CAACc,EAAM,CAAC,OAAA/B,EAAQ,MAAAsB,CAAK,CAAC,EAAGv1B,CAAK,CAC1C,CACA,KAAK40B,GAAK,CACR,MAAMyB,EAAU,CAAA,EACV5zB,EAAQyyB,EAAG,CAACc,EAAMK,CAAO,EAAGr2B,CAAK,EACvC,SAAW,CAAC4C,EAAKoQ,CAAK,IAAKhT,GACrBk2B,GAAU,EAAEH,GAAWF,GAAOjzB,CAAG,CAAC,GAAKmzB,GAAWF,GAAO7iB,CAAK,CAAC,KACjEqjB,EAAQ,KAAK,CAACD,EAAKxzB,CAAG,EAAGwzB,EAAKpjB,CAAK,CAAC,CAAC,EAEzC,OAAOvQ,CACT,CACA,KAAKoyB,GAAK,CACR,MAAMwB,EAAU,CAAA,EACV5zB,EAAQyyB,EAAG,CAACc,EAAMK,CAAO,EAAGr2B,CAAK,EACvC,UAAWgT,KAAShT,GACdk2B,GAAU,CAACH,GAAWF,GAAO7iB,CAAK,CAAC,IACrCqjB,EAAQ,KAAKD,EAAKpjB,CAAK,CAAC,EAE5B,OAAOvQ,CACT,CACN,CAEI,KAAM,CAAC,QAAAhD,CAAO,EAAIO,EAClB,OAAOk1B,EAAG,CAACc,EAAM,CAAC,KAAM7sB,EAAM,QAAA1J,CAAO,CAAC,EAAGO,CAAK,CAChD,EAEA,OAAOo2B,CACT,EAccE,GAAY,CAACt2B,EAAO,CAAC,KAAAm2B,EAAM,MAAAI,CAAK,EAAI,KAAO,CACvD,MAAMrzB,EAAI,CAAA,EACV,OAAO+yB,GAAW,EAAEE,GAAQI,GAAQ,CAAC,CAACJ,EAAM,IAAI,IAAKjzB,CAAC,EAAElD,CAAK,EAAGkD,CAClE,EC3JAszB,GAAe,OAAO,iBAAoB,WAExC,CAACC,EAAKj2B,IACJA,IAAY,SAAUA,GAAW,UAAWA,GAC1Ci1B,GAAYa,GAAUG,EAAKj2B,CAAO,CAAC,EAAI,gBAAgBi2B,CAAG,EAE9D,CAACA,EAAKj2B,IAAYi1B,GAAYa,GAAUG,EAAKj2B,CAAO,CAAC,EC2DhD,SAASk2B,GAA2BxzB,EAAGyzB,EAAkB,CAE9D,MAAMnsB,EAAS,CAAC,CAAC,KAAM,OAAQ,MAAO,GAAG,CAAC,EAE1C,OAAImsB,EAAmB,GACrBnsB,EAAO,KAAK,CACV,KAAM,UACN,QAAS,MACT,WAAY,CAAA,EACZ,SAAU,CAAC,CAAC,KAAM,OAAQ,MAAO,OAAOmsB,CAAgB,CAAC,CAAC,CAChE,CAAK,EAGInsB,CACT,CAaO,SAASosB,GAAyBC,EAAgBF,EAAkB,CACzE,MACE,sBACCE,EAAiB,IACjBF,EAAmB,EAAI,IAAMA,EAAmB,GAErD,CAWO,SAASG,GAAOvsB,EAAO,CAC5B,MAAM2nB,EACJ,OAAO3nB,EAAM,QAAQ,eAAkB,SACnCA,EAAM,QAAQ,cACd,gBACAwsB,EACJxsB,EAAM,QAAQ,qBAAuBmsB,GACjCM,EACJzsB,EAAM,QAAQ,mBAAqBqsB,GAC/BK,EAAgB1sB,EAAM,QAAQ,eAAiB,YAC/C2sB,EAAuB3sB,EAAM,QAAQ,sBAAwB,KAC7D4sB,EAA0B5sB,EAAM,QAAQ,yBAA2B,CACvE,UAAW,CAAC,SAAS,CACzB,EAEQ6sB,EAAY,CAAA,EAClB,IAAIP,EAAiB,GAErB,KAAO,EAAEA,EAAiBtsB,EAAM,cAAc,QAAQ,CACpD,MAAM/I,EAAa+I,EAAM,aAAa,IACpCA,EAAM,cAAcssB,CAAc,CACxC,EAEI,GAAI,CAACr1B,EACH,SAGF,MAAMoP,EAAUrG,EAAM,IAAI/I,CAAU,EAC9B2wB,EAAK,OAAO3wB,EAAW,UAAU,EAAE,YAAW,EAC9C4wB,EAASjiB,GAAagiB,EAAG,YAAW,CAAE,EAC5C,IAAIwE,EAAmB,EAEvB,MAAMU,EAAiB,CAAA,EACjBC,EAAS/sB,EAAM,eAAe,IAAI4nB,CAAE,EAG1C,KAAOmF,IAAW,QAAa,EAAEX,GAAoBW,GAAQ,CACvDD,EAAe,OAAS,GAC1BA,EAAe,KAAK,CAAC,KAAM,OAAQ,MAAO,GAAG,CAAC,EAGhD,IAAIjsB,EACF,OAAO2rB,GAAwB,SAC3BA,EACAA,EAAoBF,EAAgBF,CAAgB,EAEtD,OAAOvrB,GAAa,WACtBA,EAAW,CAAC,KAAM,OAAQ,MAAOA,CAAQ,GAG3CisB,EAAe,KAAK,CAClB,KAAM,UACN,QAAS,IACT,WAAY,CACV,KACE,IACAnF,EACA,SACAE,GACCuE,EAAmB,EAAI,IAAMA,EAAmB,IACnD,oBAAqB,GACrB,UACE,OAAOK,GAAsB,SACzBA,EACAA,EAAkBH,EAAgBF,CAAgB,EACxD,UAAW,CAAC,uBAAuB,CAC7C,EACQ,SAAU,MAAM,QAAQvrB,CAAQ,EAAIA,EAAW,CAACA,CAAQ,CAChE,CAAO,CACH,CAEA,MAAMmL,EAAO3F,EAAQA,EAAQ,OAAS,CAAC,EAEvC,GAAI2F,GAAQA,EAAK,OAAS,WAAaA,EAAK,UAAY,IAAK,CAC3D,MAAMghB,EAAWhhB,EAAK,SAASA,EAAK,SAAS,OAAS,CAAC,EACnDghB,GAAYA,EAAS,OAAS,OAChCA,EAAS,OAAS,IAElBhhB,EAAK,SAAS,KAAK,CAAC,KAAM,OAAQ,MAAO,GAAG,CAAC,EAG/CA,EAAK,SAAS,KAAK,GAAG8gB,CAAc,CACtC,MACEzmB,EAAQ,KAAK,GAAGymB,CAAc,EAIhC,MAAMnJ,EAAW,CACf,KAAM,UACN,QAAS,KACT,WAAY,CAAC,GAAIgE,EAAgB,MAAQE,CAAM,EAC/C,SAAU7nB,EAAM,KAAKqG,EAAS,EAAI,CACxC,EAEIrG,EAAM,MAAM/I,EAAY0sB,CAAQ,EAEhCkJ,EAAU,KAAKlJ,CAAQ,CACzB,CAEA,GAAIkJ,EAAU,SAAW,EAIzB,MAAO,CACL,KAAM,UACN,QAAS,UACT,WAAY,CAAC,cAAe,GAAM,UAAW,CAAC,WAAW,CAAC,EAC1D,SAAU,CACR,CACE,KAAM,UACN,QAASF,EACT,WAAY,CACV,GAAGM,GAAgBL,CAAuB,EAC1C,GAAI,gBACd,EACQ,SAAU,CAAC,CAAC,KAAM,OAAQ,MAAOF,CAAa,CAAC,CACvD,EACM,CAAC,KAAM,OAAQ,MAAO;AAAA,CAAI,EAC1B,CACE,KAAM,UACN,QAAS,KACT,WAAY,CAAA,EACZ,SAAU1sB,EAAM,KAAK6sB,EAAW,EAAI,CAC5C,EACM,CAAC,KAAM,OAAQ,MAAO;AAAA,CAAI,CAChC,CACA,CACA,CChHO,MAAMK,GAgBT,SAAU7hB,EAAM,CACd,GAAIA,GAAS,KACX,OAAO7V,GAGT,GAAI,OAAO6V,GAAS,WAClB,OAAO8hB,GAAY9hB,CAAI,EAGzB,GAAI,OAAOA,GAAS,SAClB,OAAO,MAAM,QAAQA,CAAI,EAAI+hB,GAAW/hB,CAAI,EAAIgiB,GAAahiB,CAAI,EAGnE,GAAI,OAAOA,GAAS,SAClB,OAAOiiB,GAAYjiB,CAAI,EAGzB,MAAM,IAAI,MAAM,8CAA8C,CAChE,EAOJ,SAAS+hB,GAAWG,EAAO,CAEzB,MAAMz1B,EAAS,CAAA,EACf,IAAII,EAAQ,GAEZ,KAAO,EAAEA,EAAQq1B,EAAM,QACrBz1B,EAAOI,CAAK,EAAIg1B,GAAQK,EAAMr1B,CAAK,CAAC,EAGtC,OAAOi1B,GAAYjB,CAAG,EAMtB,SAASA,KAAOroB,EAAY,CAC1B,IAAI3L,EAAQ,GAEZ,KAAO,EAAEA,EAAQJ,EAAO,QACtB,GAAIA,EAAOI,CAAK,EAAE,MAAM,KAAM2L,CAAU,EAAG,MAAO,GAGpD,MAAO,EACT,CACF,CAQA,SAASwpB,GAAaj1B,EAAO,CAC3B,MAAMo1B,EAAwDp1B,EAE9D,OAAO+0B,GAAYhqB,CAAG,EAMtB,SAASA,EAAIzH,EAAM,CACjB,MAAM+xB,EACoB/xB,EAI1B,IAAIrD,EAEJ,IAAKA,KAAOD,EACV,GAAIq1B,EAAap1B,CAAG,IAAMm1B,EAAcn1B,CAAG,EAAG,MAAO,GAGvD,MAAO,EACT,CACF,CAQA,SAASi1B,GAAYl1B,EAAO,CAC1B,OAAO+0B,GAAYvuB,CAAI,EAKvB,SAASA,EAAKlD,EAAM,CAClB,OAAOA,GAAQA,EAAK,OAAStD,CAC/B,CACF,CAQA,SAAS+0B,GAAYO,EAAc,CACjC,OAAOt1B,EAMP,SAASA,EAAM3C,EAAOyC,EAAOmH,EAAQ,CACnC,MAAO,GACLsuB,GAAel4B,CAAK,GAClBi4B,EAAa,KACX,KACAj4B,EACA,OAAOyC,GAAU,SAAWA,EAAQ,OACpCmH,GAAU,MACpB,EAEE,CACF,CAEA,SAAS7J,IAAK,CACZ,MAAO,EACT,CAMA,SAASm4B,GAAel4B,EAAO,CAC7B,OAAOA,IAAU,MAAQ,OAAOA,GAAU,UAAY,SAAUA,CAClE,CCnEA,MAAMiB,GAAQ,CAAA,EAKDk3B,GAAW,GAKXC,GAAO,GAKPC,GAAO,OAiDb,SAASC,GAAanuB,EAAMyL,EAAM2iB,EAASC,EAAS,CAEzD,IAAI71B,EAEA,OAAOiT,GAAS,YAAc,OAAO2iB,GAAY,YACnDC,EAAUD,EAEVA,EAAU3iB,GAGVjT,EAAQiT,EAGV,MAAM6iB,EAAKhB,GAAQ90B,CAAK,EAClB+1B,EAAOF,EAAU,GAAK,EAE5BG,EAAQxuB,EAAM,OAAW,EAAE,EAAC,EAO5B,SAASwuB,EAAQ1yB,EAAMxD,EAAOm2B,EAAS,CACrC,MAAM54B,EACJiG,GAAQ,OAAOA,GAAS,SAAWA,EAAO,CAAA,EAG5C,GAAI,OAAOjG,EAAM,MAAS,SAAU,CAClC,MAAMa,EAEJ,OAAOb,EAAM,SAAY,SACrBA,EAAM,QAER,OAAOA,EAAM,MAAS,SACpBA,EAAM,KACN,OAEN,OAAO,eAAe64B,EAAO,OAAQ,CACnC,MACE,UAAiB5yB,EAAK,MAAQpF,EAAO,IAAMA,EAAO,IAAM,KAAO,GACzE,CAAO,CACH,CAEA,OAAOg4B,EAEP,SAASA,GAAQ,CAEf,IAAIruB,EAASvJ,GAET63B,EAEA7kB,EAEA8kB,EAEJ,IAAI,CAACnjB,GAAQ6iB,EAAGxyB,EAAMxD,EAAOm2B,EAAQA,EAAQ,OAAS,CAAC,GAAK,MAAS,KAEnEpuB,EAASwuB,GAAST,EAAQtyB,EAAM2yB,CAAO,CAAC,EAEpCpuB,EAAO,CAAC,IAAM4tB,IAChB,OAAO5tB,EAIX,GAAI,aAAcvE,GAAQA,EAAK,SAAU,CACvC,MAAMgzB,EAA2ChzB,EAEjD,GAAIgzB,EAAa,UAAYzuB,EAAO,CAAC,IAAM6tB,GAIzC,IAHApkB,GAAUukB,EAAUS,EAAa,SAAS,OAAS,IAAMP,EACzDK,EAAeH,EAAQ,OAAOK,CAAY,EAEnChlB,EAAS,IAAMA,EAASglB,EAAa,SAAS,QAAQ,CAC3D,MAAM3tB,EAAQ2tB,EAAa,SAAShlB,CAAM,EAI1C,GAFA6kB,EAAYH,EAAQrtB,EAAO2I,EAAQ8kB,CAAY,EAAC,EAE5CD,EAAU,CAAC,IAAMV,GACnB,OAAOU,EAGT7kB,EACE,OAAO6kB,EAAU,CAAC,GAAM,SAAWA,EAAU,CAAC,EAAI7kB,EAASykB,CAC/D,CAEJ,CAEA,OAAOluB,CACT,CACF,CACF,CAUA,SAASwuB,GAASh5B,EAAO,CACvB,OAAI,MAAM,QAAQA,CAAK,EACdA,EAGL,OAAOA,GAAU,SACZ,CAACm4B,GAAUn4B,CAAK,EAGlBA,GAAU,KAA8BiB,GAAQ,CAACjB,CAAK,CAC/D,CCvHO,SAAS64B,GAAM1uB,EAAM+uB,EAAeC,EAAkBC,EAAc,CAEzE,IAAIZ,EAEA5iB,EAEA2iB,EAGF,OAAOW,GAAkB,YACzB,OAAOC,GAAqB,YAE5BvjB,EAAO,OACP2iB,EAAUW,EACVV,EAAUW,IAGVvjB,EAAOsjB,EAEPX,EAAUY,EACVX,EAAUY,GAGZd,GAAanuB,EAAMyL,EAAMyjB,EAAUb,CAAO,EAM1C,SAASa,EAASpzB,EAAM2yB,EAAS,CAC/B,MAAMhvB,EAASgvB,EAAQA,EAAQ,OAAS,CAAC,EACnCn2B,EAAQmH,EAASA,EAAO,SAAS,QAAQ3D,CAAI,EAAI,OACvD,OAAOsyB,EAAQtyB,EAAMxD,EAAOmH,CAAM,CACpC,CACF,CCrIA,MAAMC,GAAM,CAAA,EAAG,eAGTjJ,GAAe,CAAA,EAYd,SAAS04B,GAAYnvB,EAAM3J,EAAS,CACzC,MAAMC,EAAWD,GAAWI,GAEtB24B,EAAiB,IAAI,IAErBC,EAAe,IAAI,IAEnBC,EAAiB,IAAI,IAIrBrF,EAAW,CAAC,GAAGsF,GAAiB,GAAGj5B,EAAS,QAAQ,EAGpD8J,EAAQ,CACZ,IAAAmD,EACA,UAAAisB,GACA,eAAAJ,EACA,aAAAC,EACA,eAAAC,EACA,cAAe,CAAA,EACnB,SAAIrF,EACA,IAAA3pB,EACA,QAAShK,EACT,MAAAm5B,GACJ,KAAIC,EACJ,EAEE,OAAAhB,GAAM1uB,EAAM,SAAUlE,EAAM,CAC1B,GAAIA,EAAK,OAAS,cAAgBA,EAAK,OAAS,qBAAsB,CACpE,MAAMylB,EAAMzlB,EAAK,OAAS,aAAeszB,EAAiBC,EACpDrH,EAAK,OAAOlsB,EAAK,UAAU,EAAE,YAAW,EAIzCylB,EAAI,IAAIyG,CAAE,GAEbzG,EAAI,IAAIyG,EAAIlsB,CAAI,CAEpB,CACF,CAAC,EAEMsE,EAYP,SAASE,EAAIxE,EAAM2D,EAAQ,CACzB,MAAMT,EAAOlD,EAAK,KACZ6zB,EAASvvB,EAAM,SAASpB,CAAI,EAElC,GAAIU,GAAI,KAAKU,EAAM,SAAUpB,CAAI,GAAK2wB,EACpC,OAAOA,EAAOvvB,EAAOtE,EAAM2D,CAAM,EAGnC,GAAIW,EAAM,QAAQ,aAAeA,EAAM,QAAQ,YAAY,SAASpB,CAAI,EAAG,CACzE,GAAI,aAAclD,EAAM,CACtB,KAAM,CAAC,SAAAmF,EAAU,GAAG2uB,CAAO,EAAI9zB,EACzBuE,EAASgtB,GAAgBuC,CAAO,EAEtC,OAAAvvB,EAAO,SAAWD,EAAM,IAAItE,CAAI,EAEzBuE,CACT,CAGA,OAAOgtB,GAAgBvxB,CAAI,CAC7B,CAIA,OAFgBsE,EAAM,QAAQ,gBAAkByvB,IAEjCzvB,EAAOtE,EAAM2D,CAAM,CACpC,CAUA,SAAS8D,EAAI9D,EAAQ,CAEnB,MAAMrJ,EAAS,CAAA,EAEf,GAAI,aAAcqJ,EAAQ,CACxB,MAAMqwB,EAAQrwB,EAAO,SACrB,IAAInH,EAAQ,GACZ,KAAO,EAAEA,EAAQw3B,EAAM,QAAQ,CAC7B,MAAMzvB,EAASD,EAAM,IAAI0vB,EAAMx3B,CAAK,EAAGmH,CAAM,EAG7C,GAAIY,EAAQ,CACV,GAAI/H,GAASw3B,EAAMx3B,EAAQ,CAAC,EAAE,OAAS,UACjC,CAAC,MAAM,QAAQ+H,CAAM,GAAKA,EAAO,OAAS,SAC5CA,EAAO,MAAQ0vB,GAAuB1vB,EAAO,KAAK,GAGhD,CAAC,MAAM,QAAQA,CAAM,GAAKA,EAAO,OAAS,WAAW,CACvD,MAAMgiB,EAAOhiB,EAAO,SAAS,CAAC,EAE1BgiB,GAAQA,EAAK,OAAS,SACxBA,EAAK,MAAQ0N,GAAuB1N,EAAK,KAAK,EAElD,CAGE,MAAM,QAAQhiB,CAAM,EACtBjK,EAAO,KAAK,GAAGiK,CAAM,EAErBjK,EAAO,KAAKiK,CAAM,CAEtB,CACF,CACF,CAEA,OAAOjK,CACT,CACF,CAYA,SAASq5B,GAAM1sB,EAAME,EAAI,CACnBF,EAAK,WAAUE,EAAG,SAAWrH,GAASmH,CAAI,EAChD,CAcA,SAASysB,GAAUzsB,EAAME,EAAI,CAE3B,IAAI5C,EAAS4C,EAGb,GAAIF,GAAQA,EAAK,KAAM,CACrB,MAAMitB,EAAQjtB,EAAK,KAAK,MAClBktB,EAAYltB,EAAK,KAAK,UACtBmtB,EAAcntB,EAAK,KAAK,YAE9B,GAAI,OAAOitB,GAAU,SAGnB,GAAI3vB,EAAO,OAAS,UAClBA,EAAO,QAAU2vB,MAMd,CAGH,MAAM/uB,EAAW,aAAcZ,EAASA,EAAO,SAAW,CAACA,CAAM,EACjEA,EAAS,CAAC,KAAM,UAAW,QAAS2vB,EAAO,WAAY,CAAA,EAAI,SAAA/uB,CAAQ,CACrE,CAGEZ,EAAO,OAAS,WAAa6vB,GAC/B,OAAO,OAAO7vB,EAAO,WAAYgtB,GAAgB6C,CAAW,CAAC,EAI7D,aAAc7vB,GACdA,EAAO,UACP4vB,IAAc,MACdA,IAAc,SAEd5vB,EAAO,SAAW4vB,EAEtB,CAEA,OAAO5vB,CACT,CAYA,SAASwvB,GAAsBzvB,EAAOtE,EAAM,CAC1C,MAAMmL,EAAOnL,EAAK,MAAQ,CAAA,EAEpBuE,EACJ,UAAWvE,GACX,EAAE4D,GAAI,KAAKuH,EAAM,aAAa,GAAKvH,GAAI,KAAKuH,EAAM,WAAW,GACzD,CAAC,KAAM,OAAQ,MAAOnL,EAAK,KAAK,EAChC,CACE,KAAM,UACN,QAAS,MACT,WAAY,CAAA,EACZ,SAAUsE,EAAM,IAAItE,CAAI,CAClC,EAEE,OAAAsE,EAAM,MAAMtE,EAAMuE,CAAM,EACjBD,EAAM,UAAUtE,EAAMuE,CAAM,CACrC,CAcO,SAASqvB,GAAKI,EAAOjH,EAAO,CAEjC,MAAMxoB,EAAS,CAAA,EACf,IAAI/H,EAAQ,GAMZ,IAJIuwB,GACFxoB,EAAO,KAAK,CAAC,KAAM,OAAQ,MAAO;AAAA,CAAI,CAAC,EAGlC,EAAE/H,EAAQw3B,EAAM,QACjBx3B,GAAO+H,EAAO,KAAK,CAAC,KAAM,OAAQ,MAAO;AAAA,CAAI,CAAC,EAClDA,EAAO,KAAKyvB,EAAMx3B,CAAK,CAAC,EAG1B,OAAIuwB,GAASiH,EAAM,OAAS,GAC1BzvB,EAAO,KAAK,CAAC,KAAM,OAAQ,MAAO;AAAA,CAAI,CAAC,EAGlCA,CACT,CAUA,SAAS0vB,GAAuBl6B,EAAO,CACrC,IAAIyC,EAAQ,EACRqM,EAAO9O,EAAM,WAAWyC,CAAK,EAEjC,KAAOqM,IAAS,GAAKA,IAAS,IAC5BrM,IACAqM,EAAO9O,EAAM,WAAWyC,CAAK,EAG/B,OAAOzC,EAAM,MAAMyC,CAAK,CAC1B,CCjYO,SAAS63B,GAAOnwB,EAAM3J,EAAS,CACpC,MAAM+J,EAAQ+uB,GAAYnvB,EAAM3J,CAAO,EACjCyF,EAAOsE,EAAM,IAAIJ,EAAM,MAAS,EAChCowB,EAAOzD,GAAOvsB,CAAK,EAEnBC,EAAS,MAAM,QAAQvE,CAAI,EAC7B,CAAC,KAAM,OAAQ,SAAUA,CAAI,EAC7BA,GAAQ,CAAC,KAAM,OAAQ,SAAU,CAAA,CAAE,EAEvC,OAAIs0B,IAIFt6B,EAAO,aAAcuK,CAAM,EAC3BA,EAAO,SAAS,KAAK,CAAC,KAAM,OAAQ,MAAO;AAAA,CAAI,EAAG+vB,CAAI,GAGjD/vB,CACT,CC0Ce,SAASgwB,GAAaC,EAAaj6B,EAAS,CACzD,OAAIi6B,GAAe,QAASA,EAInB,eAAgBtwB,EAAMuwB,EAAM,CAEjC,MAAMC,EACJL,GAAOnwB,EAAM,CAAC,KAAAuwB,EAAM,GAAGl6B,CAAO,CAAC,EAEjC,MAAMi6B,EAAY,IAAIE,EAAUD,CAAI,CACtC,EAMK,SAAUvwB,EAAMuwB,EAAM,CAM3B,OACEJ,GAAOnwB,EAAM,CAAC,KAAAuwB,EAAM,GAAID,GAAej6B,CAAQ,CAAC,CAEpD,CACF,CCvKO,SAASo6B,GAAKz0B,EAAO,CAC1B,GAAIA,EACF,MAAMA,CAEV,8CCTA,IAAI00B,EAAS,OAAO,UAAU,eAC1BC,EAAQ,OAAO,UAAU,SACzBC,EAAiB,OAAO,eACxBC,EAAO,OAAO,yBAEdC,EAAU,SAAiB5F,EAAK,CACnC,OAAI,OAAO,MAAM,SAAY,WACrB,MAAM,QAAQA,CAAG,EAGlByF,EAAM,KAAKzF,CAAG,IAAM,gBAC5B,EAEI6F,EAAgB,SAAuBC,EAAK,CAC/C,GAAI,CAACA,GAAOL,EAAM,KAAKK,CAAG,IAAM,kBAC/B,MAAO,GAGR,IAAIC,EAAoBP,EAAO,KAAKM,EAAK,aAAa,EAClDE,EAAmBF,EAAI,aAAeA,EAAI,YAAY,WAAaN,EAAO,KAAKM,EAAI,YAAY,UAAW,eAAe,EAE7H,GAAIA,EAAI,aAAe,CAACC,GAAqB,CAACC,EAC7C,MAAO,GAKR,IAAIz4B,EACJ,IAAKA,KAAOu4B,EAAK,CAEjB,OAAO,OAAOv4B,EAAQ,KAAei4B,EAAO,KAAKM,EAAKv4B,CAAG,CAC1D,EAGI04B,EAAc,SAAqBC,EAAQ/6B,EAAS,CACnDu6B,GAAkBv6B,EAAQ,OAAS,YACtCu6B,EAAeQ,EAAQ/6B,EAAQ,KAAM,CACpC,WAAY,GACZ,aAAc,GACd,MAAOA,EAAQ,SACf,SAAU,EACb,CAAG,EAED+6B,EAAO/6B,EAAQ,IAAI,EAAIA,EAAQ,QAEjC,EAGIg7B,EAAc,SAAqBL,EAAKt6B,EAAM,CACjD,GAAIA,IAAS,YACZ,GAAKg6B,EAAO,KAAKM,EAAKt6B,CAAI,GAEnB,GAAIm6B,EAGV,OAAOA,EAAKG,EAAKt6B,CAAI,EAAE,UAJvB,QAQF,OAAOs6B,EAAIt6B,CAAI,CAChB,EAEA8mB,OAAAA,GAAiB,SAASA,GAAS,CAClC,IAAInnB,EAASK,EAAM46B,EAAKC,EAAMC,EAAaC,EACvCL,EAAS,UAAU,CAAC,EACpBz1B,EAAI,EACJgrB,EAAS,UAAU,OACnB+K,EAAO,GAaX,IAVI,OAAON,GAAW,YACrBM,EAAON,EACPA,EAAS,UAAU,CAAC,GAAK,CAAA,EAEzBz1B,EAAI,IAEDy1B,GAAU,MAAS,OAAOA,GAAW,UAAY,OAAOA,GAAW,cACtEA,EAAS,CAAA,GAGHz1B,EAAIgrB,EAAQ,EAAEhrB,EAGpB,GAFAtF,EAAU,UAAUsF,CAAC,EAEjBtF,GAAW,KAEd,IAAKK,KAAQL,EACZi7B,EAAMD,EAAYD,EAAQ16B,CAAI,EAC9B66B,EAAOF,EAAYh7B,EAASK,CAAI,EAG5B06B,IAAWG,IAEVG,GAAQH,IAASR,EAAcQ,CAAI,IAAMC,EAAcV,EAAQS,CAAI,KAClEC,GACHA,EAAc,GACdC,EAAQH,GAAOR,EAAQQ,CAAG,EAAIA,EAAM,CAAA,GAEpCG,EAAQH,GAAOP,EAAcO,CAAG,EAAIA,EAAM,CAAA,EAI3CH,EAAYC,EAAQ,CAAE,KAAM16B,EAAM,SAAU8mB,EAAOkU,EAAMD,EAAOF,CAAI,EAAG,GAG7D,OAAOA,EAAS,KAC1BJ,EAAYC,EAAQ,CAAE,KAAM16B,EAAM,SAAU66B,EAAM,GAQvD,OAAOH,CACR,iCCpHe,SAASL,GAAcl7B,EAAO,CAC5C,GAAI,OAAOA,GAAU,UAAYA,IAAU,KAC1C,MAAO,GAGR,MAAM87B,EAAY,OAAO,eAAe97B,CAAK,EAC7C,OAAQ87B,IAAc,MAAQA,IAAc,OAAO,WAAa,OAAO,eAAeA,CAAS,IAAM,OAAS,EAAE,OAAO,eAAe97B,IAAU,EAAE,OAAO,YAAYA,EACtK,CC+BO,SAAS+7B,IAAS,CAEvB,MAAMC,EAAM,CAAA,EAENC,EAAW,CAAC,IAAAC,EAAK,IAAAnoB,CAAG,EAE1B,OAAOkoB,EAGP,SAASC,KAAO37B,EAAQ,CACtB,IAAI47B,EAAkB,GAEtB,MAAMC,EAAW77B,EAAO,IAAG,EAE3B,GAAI,OAAO67B,GAAa,WACtB,MAAM,IAAI,UAAU,2CAA6CA,CAAQ,EAG3E9rB,EAAK,KAAM,GAAG/P,CAAM,EAQpB,SAAS+P,EAAKnK,KAAU4C,EAAQ,CAC9B,MAAM+C,EAAKkwB,EAAI,EAAEG,CAAe,EAChC,IAAI15B,EAAQ,GAEZ,GAAI0D,EAAO,CACTi2B,EAASj2B,CAAK,EACd,MACF,CAGA,KAAO,EAAE1D,EAAQlC,EAAO,SAClBwI,EAAOtG,CAAK,IAAM,MAAQsG,EAAOtG,CAAK,IAAM,UAC9CsG,EAAOtG,CAAK,EAAIlC,EAAOkC,CAAK,GAKhClC,EAASwI,EAGL+C,EACF+tB,GAAK/tB,EAAIwE,CAAI,EAAE,GAAGvH,CAAM,EAExBqzB,EAAS,KAAM,GAAGrzB,CAAM,CAE5B,CACF,CAGA,SAASgL,EAAIsoB,EAAY,CACvB,GAAI,OAAOA,GAAe,WACxB,MAAM,IAAI,UACR,+CAAiDA,CACzD,EAGI,OAAAL,EAAI,KAAKK,CAAU,EACZJ,CACT,CACF,CAkCO,SAASpC,GAAKyC,EAAYF,EAAU,CAEzC,IAAI9oB,EAEJ,OAAOipB,EAQP,SAASA,KAAWnuB,EAAY,CAC9B,MAAMouB,EAAoBF,EAAW,OAASluB,EAAW,OAEzD,IAAI5D,EAEAgyB,GACFpuB,EAAW,KAAKquB,CAAI,EAGtB,GAAI,CACFjyB,EAAS8xB,EAAW,MAAM,KAAMluB,CAAU,CAC5C,OAASjI,EAAO,CACd,MAAMu2B,EAAkCv2B,EAMxC,GAAIq2B,GAAqBlpB,EACvB,MAAMopB,EAGR,OAAOD,EAAKC,CAAS,CACvB,CAEKF,IACChyB,GAAUA,EAAO,MAAQ,OAAOA,EAAO,MAAS,WAClDA,EAAO,KAAKmyB,EAAMF,CAAI,EACbjyB,aAAkB,MAC3BiyB,EAAKjyB,CAAM,EAEXmyB,EAAKnyB,CAAM,EAGjB,CAOA,SAASiyB,EAAKt2B,KAAU4C,EAAQ,CACzBuK,IACHA,EAAS,GACT8oB,EAASj2B,EAAO,GAAG4C,CAAM,EAE7B,CAOA,SAAS4zB,EAAK38B,EAAO,CACnBy8B,EAAK,KAAMz8B,CAAK,CAClB,CACF,CC1JO,MAAM48B,GAAU,CAAC,SAAAC,GAAU,QAAAC,GAAS,QAAAC,GAAS,KAAAC,GAAM,IAAK,GAAG,EAclE,SAASH,GAASI,EAAMF,EAAS,CAC/B,GAAIA,IAAY,QAAa,OAAOA,GAAY,SAC9C,MAAM,IAAI,UAAU,iCAAiC,EAGvDG,GAAWD,CAAI,EACf,IAAIj3B,EAAQ,EACRoD,EAAM,GACN3G,EAAQw6B,EAAK,OAEbE,EAEJ,GACEJ,IAAY,QACZA,EAAQ,SAAW,GACnBA,EAAQ,OAASE,EAAK,OACtB,CACA,KAAOx6B,KACL,GAAIw6B,EAAK,YAAYx6B,CAAK,IAAM,IAG9B,GAAI06B,EAAc,CAChBn3B,EAAQvD,EAAQ,EAChB,KACF,OACS2G,EAAM,IAGf+zB,EAAe,GACf/zB,EAAM3G,EAAQ,GAIlB,OAAO2G,EAAM,EAAI,GAAK6zB,EAAK,MAAMj3B,EAAOoD,CAAG,CAC7C,CAEA,GAAI2zB,IAAYE,EACd,MAAO,GAGT,IAAIG,EAAmB,GACnBC,EAAeN,EAAQ,OAAS,EAEpC,KAAOt6B,KACL,GAAIw6B,EAAK,YAAYx6B,CAAK,IAAM,IAG9B,GAAI06B,EAAc,CAChBn3B,EAAQvD,EAAQ,EAChB,KACF,OAEI26B,EAAmB,IAGrBD,EAAe,GACfC,EAAmB36B,EAAQ,GAGzB46B,EAAe,KAEbJ,EAAK,YAAYx6B,CAAK,IAAMs6B,EAAQ,YAAYM,GAAc,EAC5DA,EAAe,IAGjBj0B,EAAM3G,IAKR46B,EAAe,GACfj0B,EAAMg0B,IAMd,OAAIp3B,IAAUoD,EACZA,EAAMg0B,EACGh0B,EAAM,IACfA,EAAM6zB,EAAK,QAGNA,EAAK,MAAMj3B,EAAOoD,CAAG,CAC9B,CAUA,SAAS0zB,GAAQG,EAAM,CAGrB,GAFAC,GAAWD,CAAI,EAEXA,EAAK,SAAW,EAClB,MAAO,IAGT,IAAI7zB,EAAM,GACN3G,EAAQw6B,EAAK,OAEbK,EAGJ,KAAO,EAAE76B,GACP,GAAIw6B,EAAK,YAAYx6B,CAAK,IAAM,IAC9B,GAAI66B,EAAgB,CAClBl0B,EAAM3G,EACN,KACF,OACU66B,IAEVA,EAAiB,IAIrB,OAAOl0B,EAAM,EACT6zB,EAAK,YAAY,CAAC,IAAM,GACtB,IACA,IACF7zB,IAAQ,GAAK6zB,EAAK,YAAY,CAAC,IAAM,GACnC,KACAA,EAAK,MAAM,EAAG7zB,CAAG,CACzB,CAUA,SAAS2zB,GAAQE,EAAM,CACrBC,GAAWD,CAAI,EAEf,IAAIx6B,EAAQw6B,EAAK,OAEb7zB,EAAM,GACNm0B,EAAY,EACZC,EAAW,GAGXC,EAAc,EAEdH,EAEJ,KAAO76B,KAAS,CACd,MAAMqM,EAAOmuB,EAAK,YAAYx6B,CAAK,EAEnC,GAAIqM,IAAS,GAAc,CAGzB,GAAIwuB,EAAgB,CAClBC,EAAY96B,EAAQ,EACpB,KACF,CAEA,QACF,CAEI2G,EAAM,IAGRk0B,EAAiB,GACjBl0B,EAAM3G,EAAQ,GAGZqM,IAAS,GAEP0uB,EAAW,EACbA,EAAW/6B,EACFg7B,IAAgB,IACzBA,EAAc,GAEPD,EAAW,KAGpBC,EAAc,GAElB,CAEA,OACED,EAAW,GACXp0B,EAAM,GAENq0B,IAAgB,GAEfA,IAAgB,GAAKD,IAAap0B,EAAM,GAAKo0B,IAAaD,EAAY,EAEhE,GAGFN,EAAK,MAAMO,EAAUp0B,CAAG,CACjC,CAUA,SAAS4zB,MAAQU,EAAU,CACzB,IAAIj7B,EAAQ,GAERk7B,EAEJ,KAAO,EAAEl7B,EAAQi7B,EAAS,QACxBR,GAAWQ,EAASj7B,CAAK,CAAC,EAEtBi7B,EAASj7B,CAAK,IAChBk7B,EACEA,IAAW,OAAYD,EAASj7B,CAAK,EAAIk7B,EAAS,IAAMD,EAASj7B,CAAK,GAI5E,OAAOk7B,IAAW,OAAY,IAAMl8B,GAAUk8B,CAAM,CACtD,CAYA,SAASl8B,GAAUw7B,EAAM,CACvBC,GAAWD,CAAI,EAEf,MAAMW,EAAWX,EAAK,YAAY,CAAC,IAAM,GAGzC,IAAIj9B,EAAQ69B,GAAgBZ,EAAM,CAACW,CAAQ,EAE3C,OAAI59B,EAAM,SAAW,GAAK,CAAC49B,IACzB59B,EAAQ,KAGNA,EAAM,OAAS,GAAKi9B,EAAK,YAAYA,EAAK,OAAS,CAAC,IAAM,KAC5Dj9B,GAAS,KAGJ49B,EAAW,IAAM59B,EAAQA,CAClC,CAYA,SAAS69B,GAAgBZ,EAAMa,EAAgB,CAC7C,IAAItzB,EAAS,GACTuzB,EAAoB,EACpBC,EAAY,GACZC,EAAO,EACPx7B,EAAQ,GAERqM,EAEAovB,EAEJ,KAAO,EAAEz7B,GAASw6B,EAAK,QAAQ,CAC7B,GAAIx6B,EAAQw6B,EAAK,OACfnuB,EAAOmuB,EAAK,YAAYx6B,CAAK,MACxB,IAAIqM,IAAS,GAClB,MAEAA,EAAO,GAGT,GAAIA,IAAS,GAAc,CACzB,GAAI,EAAAkvB,IAAcv7B,EAAQ,GAAKw7B,IAAS,GAEjC,GAAID,IAAcv7B,EAAQ,GAAKw7B,IAAS,EAAG,CAChD,GACEzzB,EAAO,OAAS,GAChBuzB,IAAsB,GACtBvzB,EAAO,YAAYA,EAAO,OAAS,CAAC,IAAM,IAC1CA,EAAO,YAAYA,EAAO,OAAS,CAAC,IAAM,IAE1C,GAAIA,EAAO,OAAS,GAGlB,GAFA0zB,EAAiB1zB,EAAO,YAAY,GAAG,EAEnC0zB,IAAmB1zB,EAAO,OAAS,EAAG,CACpC0zB,EAAiB,GACnB1zB,EAAS,GACTuzB,EAAoB,IAEpBvzB,EAASA,EAAO,MAAM,EAAG0zB,CAAc,EACvCH,EAAoBvzB,EAAO,OAAS,EAAIA,EAAO,YAAY,GAAG,GAGhEwzB,EAAYv7B,EACZw7B,EAAO,EACP,QACF,UACSzzB,EAAO,OAAS,EAAG,CAC5BA,EAAS,GACTuzB,EAAoB,EACpBC,EAAYv7B,EACZw7B,EAAO,EACP,QACF,EAGEH,IACFtzB,EAASA,EAAO,OAAS,EAAIA,EAAS,MAAQ,KAC9CuzB,EAAoB,EAExB,MACMvzB,EAAO,OAAS,EAClBA,GAAU,IAAMyyB,EAAK,MAAMe,EAAY,EAAGv7B,CAAK,EAE/C+H,EAASyyB,EAAK,MAAMe,EAAY,EAAGv7B,CAAK,EAG1Cs7B,EAAoBt7B,EAAQu7B,EAAY,EAG1CA,EAAYv7B,EACZw7B,EAAO,CACT,MAAWnvB,IAAS,IAAgBmvB,EAAO,GACzCA,IAEAA,EAAO,EAEX,CAEA,OAAOzzB,CACT,CAUA,SAAS0yB,GAAWD,EAAM,CACxB,GAAI,OAAOA,GAAS,SAClB,MAAM,IAAI,UACR,mCAAqC,KAAK,UAAUA,CAAI,CAC9D,CAEA,CCpaO,MAAMkB,GAAU,CAAC,IAAAC,EAAG,EAE3B,SAASA,IAAM,CACb,MAAO,GACT,CCYO,SAASC,GAAMC,EAAe,CACnC,MAAO,GACLA,IAAkB,MAChB,OAAOA,GAAkB,UACzB,SAAUA,GACVA,EAAc,MACd,aAAcA,GACdA,EAAc,UAEdA,EAAc,OAAS,OAE7B,CClBO,SAASC,GAAUtB,EAAM,CAC9B,GAAI,OAAOA,GAAS,SAClBA,EAAO,IAAI,IAAIA,CAAI,UACV,CAACoB,GAAMpB,CAAI,EAAG,CAEvB,MAAM92B,EAAQ,IAAI,UAChB,+EACE82B,EACA,GACR,EACI,MAAA92B,EAAM,KAAO,uBACPA,CACR,CAEA,GAAI82B,EAAK,WAAa,QAAS,CAE7B,MAAM92B,EAAQ,IAAI,UAAU,gCAAgC,EAC5D,MAAAA,EAAM,KAAO,yBACPA,CACR,CAEA,OAAOq4B,GAAoBvB,CAAI,CACjC,CAUA,SAASuB,GAAoBC,EAAK,CAChC,GAAIA,EAAI,WAAa,GAAI,CAEvB,MAAMt4B,EAAQ,IAAI,UAChB,sDACN,EACI,MAAAA,EAAM,KAAO,4BACPA,CACR,CAEA,MAAMu4B,EAAWD,EAAI,SACrB,IAAIh8B,EAAQ,GAEZ,KAAO,EAAEA,EAAQi8B,EAAS,QACxB,GACEA,EAAS,YAAYj8B,CAAK,IAAM,IAChCi8B,EAAS,YAAYj8B,EAAQ,CAAC,IAAM,GACpC,CACA,MAAMk8B,EAAQD,EAAS,YAAYj8B,EAAQ,CAAC,EAC5C,GAAIk8B,IAAU,IAAgBA,IAAU,IAAe,CAErD,MAAMx4B,EAAQ,IAAI,UAChB,qDACV,EACQ,MAAAA,EAAM,KAAO,4BACPA,CACR,CACF,CAGF,OAAO,mBAAmBu4B,CAAQ,CACpC,CCvDA,MAAME,GAA8B,CAClC,UACA,OACA,WACA,OACA,UACA,SACF,EAEO,MAAMC,EAAM,CAuBjB,YAAY7+B,EAAO,CAEjB,IAAIQ,EAECR,EAEMq+B,GAAMr+B,CAAK,EACpBQ,EAAU,CAAC,KAAMR,CAAK,EACb,OAAOA,GAAU,UAAY8+B,GAAa9+B,CAAK,EACxDQ,EAAU,CAAC,MAAAR,CAAK,EAEhBQ,EAAUR,EANVQ,EAAU,CAAA,EAkBZ,KAAK,IAAM,QAASA,EAAU,GAAK29B,GAAQ,IAAG,EAU9C,KAAK,KAAO,CAAA,EASZ,KAAK,QAAU,CAAA,EAOf,KAAK,SAAW,CAAA,EAOhB,KAAK,MAYL,KAAK,IAUL,KAAK,OASL,KAAK,OAIL,IAAI17B,EAAQ,GAEZ,KAAO,EAAEA,EAAQm8B,GAAM,QAAQ,CAC7B,MAAMha,EAAQga,GAAMn8B,CAAK,EAKvBmiB,KAASpkB,GACTA,EAAQokB,CAAK,IAAM,QACnBpkB,EAAQokB,CAAK,IAAM,OAGnB,KAAKA,CAAK,EAAIA,IAAU,UAAY,CAAC,GAAGpkB,EAAQokB,CAAK,CAAC,EAAIpkB,EAAQokB,CAAK,EAE3E,CAGA,IAAIA,EAGJ,IAAKA,KAASpkB,EAEPo+B,GAAM,SAASha,CAAK,IAEvB,KAAKA,CAAK,EAAIpkB,EAAQokB,CAAK,EAGjC,CAQA,IAAI,UAAW,CACb,OAAO,OAAO,KAAK,MAAS,SACxBgY,GAAQ,SAAS,KAAK,IAAI,EAC1B,MACN,CAcA,IAAI,SAASC,EAAU,CACrBkC,GAAelC,EAAU,UAAU,EACnCmC,GAAWnC,EAAU,UAAU,EAC/B,KAAK,KAAOD,GAAQ,KAAK,KAAK,SAAW,GAAIC,CAAQ,CACvD,CAQA,IAAI,SAAU,CACZ,OAAO,OAAO,KAAK,MAAS,SACxBD,GAAQ,QAAQ,KAAK,IAAI,EACzB,MACN,CAYA,IAAI,QAAQE,EAAS,CACnBI,GAAW,KAAK,SAAU,SAAS,EACnC,KAAK,KAAON,GAAQ,KAAKE,GAAW,GAAI,KAAK,QAAQ,CACvD,CAQA,IAAI,SAAU,CACZ,OAAO,OAAO,KAAK,MAAS,SACxBF,GAAQ,QAAQ,KAAK,IAAI,EACzB,MACN,CAcA,IAAI,QAAQG,EAAS,CAInB,GAHAiC,GAAWjC,EAAS,SAAS,EAC7BG,GAAW,KAAK,QAAS,SAAS,EAE9BH,EAAS,CACX,GAAIA,EAAQ,YAAY,CAAC,IAAM,GAC7B,MAAM,IAAI,MAAM,+BAA+B,EAGjD,GAAIA,EAAQ,SAAS,IAAK,CAAC,EACzB,MAAM,IAAI,MAAM,wCAAwC,CAE5D,CAEA,KAAK,KAAOH,GAAQ,KAAK,KAAK,QAAS,KAAK,MAAQG,GAAW,GAAG,CACpE,CAQA,IAAI,MAAO,CACT,OAAO,KAAK,QAAQ,KAAK,QAAQ,OAAS,CAAC,CAC7C,CAcA,IAAI,KAAKE,EAAM,CACToB,GAAMpB,CAAI,IACZA,EAAOsB,GAAUtB,CAAI,GAGvB8B,GAAe9B,EAAM,MAAM,EAEvB,KAAK,OAASA,GAChB,KAAK,QAAQ,KAAKA,CAAI,CAE1B,CAQA,IAAI,MAAO,CACT,OAAO,OAAO,KAAK,MAAS,SACxBL,GAAQ,SAAS,KAAK,KAAM,KAAK,OAAO,EACxC,MACN,CAcA,IAAI,KAAKqC,EAAM,CACbF,GAAeE,EAAM,MAAM,EAC3BD,GAAWC,EAAM,MAAM,EACvB,KAAK,KAAOrC,GAAQ,KAAK,KAAK,SAAW,GAAIqC,GAAQ,KAAK,SAAW,GAAG,CAC1E,CA+DA,KAAK11B,EAAeC,EAAwBC,EAAQ,CAElD,MAAMhK,EAAU,KAAK,QAAQ8J,EAAeC,EAAwBC,CAAM,EAE1E,MAAAhK,EAAQ,MAAQ,GAEVA,CACR,CA4DA,KAAK8J,EAAeC,EAAwBC,EAAQ,CAElD,MAAMhK,EAAU,KAAK,QAAQ8J,EAAeC,EAAwBC,CAAM,EAE1E,OAAAhK,EAAQ,MAAQ,OAETA,CACT,CA4DA,QAAQ8J,EAAeC,EAAwBC,EAAQ,CACrD,MAAMhK,EAAU,IAAI6J,EAElBC,EACAC,EACAC,CACN,EAEI,OAAI,KAAK,OACPhK,EAAQ,KAAO,KAAK,KAAO,IAAMA,EAAQ,KACzCA,EAAQ,KAAO,KAAK,MAGtBA,EAAQ,MAAQ,GAEhB,KAAK,SAAS,KAAKA,CAAO,EAEnBA,CACT,CAeA,SAASutB,EAAU,CACjB,OAAI,KAAK,QAAU,OACV,GAGL,OAAO,KAAK,OAAU,SACjB,KAAK,MAGE,IAAI,YAAYA,GAAY,MAAS,EACtC,OAAO,KAAK,KAAK,CAClC,CACF,CAYA,SAASgS,GAAWE,EAAMr+B,EAAM,CAC9B,GAAIq+B,GAAQA,EAAK,SAAStC,GAAQ,GAAG,EACnC,MAAM,IAAI,MACR,IAAM/7B,EAAO,uCAAyC+7B,GAAQ,IAAM,GAC1E,CAEA,CAYA,SAASmC,GAAeG,EAAMr+B,EAAM,CAClC,GAAI,CAACq+B,EACH,MAAM,IAAI,MAAM,IAAMr+B,EAAO,mBAAmB,CAEpD,CAYA,SAASq8B,GAAWD,EAAMp8B,EAAM,CAC9B,GAAI,CAACo8B,EACH,MAAM,IAAI,MAAM,YAAcp8B,EAAO,iCAAiC,CAE1E,CAUA,SAASi+B,GAAa9+B,EAAO,CAC3B,MAAO,GACLA,GACE,OAAOA,GAAU,UACjB,eAAgBA,GAChB,eAAgBA,EAEtB,CCloBO,MAAMm/B,GAYP,SAAUh+B,EAAU,CAGlB,MAAMi+B,EAFO,KACO,YAIX,UAEHp/B,EAAQo/B,EAAMj+B,CAAQ,EAEtBk+B,EAAQ,UAAY,CACxB,OAAOr/B,EAAM,MAAMq/B,EAAO,SAAS,CACrC,EAEA,cAAO,eAAeA,EAAOD,CAAK,EAc3BC,CACT,ECiUAx1B,GAAM,CAAA,EAAG,eAeR,MAAMy1B,WAAkBH,EAAiB,CAI9C,aAAc,CAEZ,MAAM,MAAM,EAeZ,KAAK,SAAW,OAYhB,KAAK,OAAS,OAad,KAAK,UAAY,CAAA,EAajB,KAAK,SAAW,OAShB,KAAK,YAAc,GASnB,KAAK,OAAS,OASd,KAAK,UAAY,CAAA,EAUjB,KAAK,OAAS,OASd,KAAK,aAAepD,GAAM,CAC5B,CAaA,MAAO,CAEL,MAAMtB,EAEF,IAAI6E,GAER,IAAI78B,EAAQ,GAEZ,KAAO,EAAEA,EAAQ,KAAK,UAAU,QAAQ,CACtC,MAAM88B,EAAW,KAAK,UAAU98B,CAAK,EACrCg4B,EAAY,IAAI,GAAG8E,CAAQ,CAC7B,CAEA,OAAA9E,EAAY,KAAK9S,GAAO,GAAM,CAAA,EAAI,KAAK,SAAS,CAAC,EAE1C8S,CACT,CA6DA,KAAK73B,EAAK5C,EAAO,CACf,OAAI,OAAO4C,GAAQ,SAEb,UAAU,SAAW,GACvB48B,GAAe,OAAQ,KAAK,MAAM,EAClC,KAAK,UAAU58B,CAAG,EAAI5C,EACf,MAID6J,GAAI,KAAK,KAAK,UAAWjH,CAAG,GAAK,KAAK,UAAUA,CAAG,GAAM,OAI/DA,GACF48B,GAAe,OAAQ,KAAK,MAAM,EAClC,KAAK,UAAY58B,EACV,MAIF,KAAK,SACd,CAmBA,QAAS,CACP,GAAI,KAAK,OACP,OAAO,KAMT,MAAM6O,EAAyD,KAE/D,KAAO,EAAE,KAAK,YAAc,KAAK,UAAU,QAAQ,CACjD,KAAM,CAAC8tB,EAAU,GAAG/+B,CAAO,EAAI,KAAK,UAAU,KAAK,WAAW,EAE9D,GAAIA,EAAQ,CAAC,IAAM,GACjB,SAGEA,EAAQ,CAAC,IAAM,KACjBA,EAAQ,CAAC,EAAI,QAGf,MAAMi/B,EAAcF,EAAS,KAAK9tB,EAAM,GAAGjR,CAAO,EAE9C,OAAOi/B,GAAgB,YACzB,KAAK,aAAa,IAAIA,CAAW,CAErC,CAEA,YAAK,OAAS,GACd,KAAK,YAAc,OAAO,kBAEnB,IACT,CAgBA,MAAM/E,EAAM,CACV,KAAK,OAAM,EACX,MAAMgF,EAAWC,GAAMjF,CAAI,EACrBnR,EAAS,KAAK,QAAU,KAAK,OACnC,OAAAqW,GAAa,QAASrW,CAAM,EACrBA,EAAO,OAAOmW,CAAQ,EAAGA,CAAQ,CAC1C,CA4CA,QAAQhF,EAAM+B,EAAM,CAClB,MAAMhrB,EAAO,KAEb,YAAK,OAAM,EACXmuB,GAAa,UAAW,KAAK,QAAU,KAAK,MAAM,EAClDC,GAAe,UAAW,KAAK,UAAY,KAAK,QAAQ,EAEjDpD,EAAOqD,EAAS,OAAWrD,CAAI,EAAI,IAAI,QAAQqD,CAAQ,EAQ9D,SAASA,EAASvsB,EAASwsB,EAAQ,CACjC,MAAML,EAAWC,GAAMjF,CAAI,EAGrBsF,EAEsBvuB,EAAK,MAAMiuB,CAAQ,EAG/CjuB,EAAK,IAAIuuB,EAAWN,EAAU,SAAUv5B,EAAOgE,EAAMuwB,EAAM,CACzD,GAAIv0B,GAAS,CAACgE,GAAQ,CAACuwB,EACrB,OAAOuF,EAAS95B,CAAK,EAKvB,MAAM+5B,EAEsB/1B,EAGtBg2B,EAAgB1uB,EAAK,UAAUyuB,EAAaxF,CAAI,EAElD0F,GAAgBD,CAAa,EAC/BzF,EAAK,MAAQyF,EAEbzF,EAAK,OAASyF,EAGhBF,EAAS95B,EAAsDu0B,CAAI,CACrE,CAAC,EAOD,SAASuF,EAAS95B,EAAOu0B,EAAM,CACzBv0B,GAAS,CAACu0B,EACZqF,EAAO55B,CAAK,EACHoN,EACTA,EAAQmnB,CAAI,GAEZz6B,EAAOw8B,EAAM,uCAAuC,EACpDA,EAAK,OAAW/B,CAAI,EAExB,CACF,CACF,CAiCA,YAAYA,EAAM,CAEhB,IAAI2F,EAAW,GAEX71B,EAEJ,YAAK,OAAM,EACXo1B,GAAa,cAAe,KAAK,QAAU,KAAK,MAAM,EACtDC,GAAe,cAAe,KAAK,UAAY,KAAK,QAAQ,EAE5D,KAAK,QAAQnF,EAAMuF,CAAQ,EAC3BK,GAAW,cAAe,UAAWD,CAAQ,EAC7CpgC,EAAOuK,EAAQ,6CAA6C,EAErDA,EAKP,SAASy1B,EAAS95B,EAAOu0B,EAAM,CAC7B2F,EAAW,GACXzF,GAAKz0B,CAAK,EACVqE,EAASkwB,CACX,CACF,CAwCA,IAAIvwB,EAAMuwB,EAAM+B,EAAM,CACpB8D,GAAWp2B,CAAI,EACf,KAAK,OAAM,EAEX,MAAMq2B,EAAe,KAAK,aAE1B,MAAI,CAAC/D,GAAQ,OAAO/B,GAAS,aAC3B+B,EAAO/B,EACPA,EAAO,QAGF+B,EAAOqD,EAAS,OAAWrD,CAAI,EAAI,IAAI,QAAQqD,CAAQ,EAW9D,SAASA,EAASvsB,EAASwsB,EAAQ,CACjC9/B,EACE,OAAOy6B,GAAS,WAChB,8CACR,EACM,MAAMgF,EAAWC,GAAMjF,CAAI,EAC3B8F,EAAa,IAAIr2B,EAAMu1B,EAAUO,CAAQ,EAQzC,SAASA,EAAS95B,EAAOs6B,EAAY/F,EAAM,CACzC,MAAMgG,EAEFD,GAAct2B,EAGdhE,EACF45B,EAAO55B,CAAK,EACHoN,EACTA,EAAQmtB,CAAa,GAErBzgC,EAAOw8B,EAAM,uCAAuC,EACpDA,EAAK,OAAWiE,EAAehG,CAAI,EAEvC,CACF,CACF,CAmBA,QAAQvwB,EAAMuwB,EAAM,CAElB,IAAI2F,EAAW,GAEX71B,EAEJ,YAAK,IAAIL,EAAMuwB,EAAMuF,CAAQ,EAE7BK,GAAW,UAAW,MAAOD,CAAQ,EACrCpgC,EAAOuK,EAAQ,6CAA6C,EACrDA,EAKP,SAASy1B,EAAS95B,EAAOgE,EAAM,CAC7BywB,GAAKz0B,CAAK,EACVqE,EAASL,EACTk2B,EAAW,EACb,CACF,CA+BA,UAAUl2B,EAAMuwB,EAAM,CACpB,KAAK,OAAM,EACX,MAAMgF,EAAWC,GAAMjF,CAAI,EACrBjN,EAAW,KAAK,UAAY,KAAK,SACvC,OAAAoS,GAAe,YAAapS,CAAQ,EACpC8S,GAAWp2B,CAAI,EAERsjB,EAAStjB,EAAMu1B,CAAQ,CAChC,CA2DA,IAAI1/B,KAAUoO,EAAY,CACxB,MAAMuyB,EAAY,KAAK,UACjB3Z,EAAY,KAAK,UAIvB,GAFAwY,GAAe,MAAO,KAAK,MAAM,EAE7Bx/B,GAAU,KAEP,GAAI,OAAOA,GAAU,WAC1B4gC,EAAU5gC,EAAOoO,CAAU,UAClB,OAAOpO,GAAU,SACtB,MAAM,QAAQA,CAAK,EACrB6gC,EAAQ7gC,CAAK,EAEb8gC,EAAU9gC,CAAK,MAGjB,OAAM,IAAI,UAAU,+BAAiCA,EAAQ,GAAG,EAGlE,OAAO,KAMP,SAAS+gC,EAAI/gC,EAAO,CAClB,GAAI,OAAOA,GAAU,WACnB4gC,EAAU5gC,EAAO,CAAA,CAAE,UACV,OAAOA,GAAU,SAC1B,GAAI,MAAM,QAAQA,CAAK,EAAG,CACxB,KAAM,CAACghC,EAAQ,GAAG5yB,CAAU,EACkBpO,EAC9C4gC,EAAUI,EAAQ5yB,CAAU,CAC9B,MACE0yB,EAAU9gC,CAAK,MAGjB,OAAM,IAAI,UAAU,+BAAiCA,EAAQ,GAAG,CAEpE,CAMA,SAAS8gC,EAAUt2B,EAAQ,CACzB,GAAI,EAAE,YAAaA,IAAW,EAAE,aAAcA,GAC5C,MAAM,IAAI,MACR,4KACV,EAGMq2B,EAAQr2B,EAAO,OAAO,EAElBA,EAAO,WACTwc,EAAU,SAAWW,GAAO,GAAMX,EAAU,SAAUxc,EAAO,QAAQ,EAEzE,CAMA,SAASq2B,EAAQI,EAAS,CACxB,IAAIx+B,EAAQ,GAEZ,GAAIw+B,GAAY,KAET,GAAI,MAAM,QAAQA,CAAO,EAC9B,KAAO,EAAEx+B,EAAQw+B,EAAQ,QAAQ,CAC/B,MAAMjgC,EAAQigC,EAAQx+B,CAAK,EAC3Bs+B,EAAI//B,CAAK,CACX,KAEA,OAAM,IAAI,UAAU,oCAAsCigC,EAAU,GAAG,CAE3E,CAOA,SAASL,EAAUI,EAAQ5yB,EAAY,CACrC,IAAI3L,EAAQ,GACRy+B,EAAa,GAEjB,KAAO,EAAEz+B,EAAQk+B,EAAU,QACzB,GAAIA,EAAUl+B,CAAK,EAAE,CAAC,IAAMu+B,EAAQ,CAClCE,EAAaz+B,EACb,KACF,CAGF,GAAIy+B,IAAe,GACjBP,EAAU,KAAK,CAACK,EAAQ,GAAG5yB,CAAU,CAAC,UAI/BA,EAAW,OAAS,EAAG,CAC9B,GAAI,CAAC+yB,EAAS,GAAGj9B,CAAI,EAAIkK,EACzB,MAAMgzB,EAAiBT,EAAUO,CAAU,EAAE,CAAC,EAC1CG,GAAWD,CAAc,GAAKC,GAAWF,CAAO,IAClDA,EAAUxZ,GAAO,GAAMyZ,EAAgBD,CAAO,GAGhDR,EAAUO,CAAU,EAAI,CAACF,EAAQG,EAAS,GAAGj9B,CAAI,CACnD,CACF,CACF,CACF,CA8BO,MAAMo9B,GAAU,IAAIhC,GAAS,EAAG,OAAM,EAS7C,SAASM,GAAa/+B,EAAMb,EAAO,CACjC,GAAI,OAAOA,GAAU,WACnB,MAAM,IAAI,UAAU,WAAaa,EAAO,oBAAoB,CAEhE,CASA,SAASg/B,GAAeh/B,EAAMb,EAAO,CACnC,GAAI,OAAOA,GAAU,WACnB,MAAM,IAAI,UAAU,WAAaa,EAAO,sBAAsB,CAElE,CASA,SAAS2+B,GAAe3+B,EAAM0gC,EAAQ,CACpC,GAAIA,EACF,MAAM,IAAI,MACR,gBACE1gC,EACA,kHACR,CAEA,CAQA,SAAS0/B,GAAWt6B,EAAM,CAGxB,GAAI,CAACo7B,GAAWp7B,CAAI,GAAK,OAAOA,EAAK,MAAS,SAC5C,MAAM,IAAI,UAAU,uBAAyBA,EAAO,GAAG,CAG3D,CAUA,SAASq6B,GAAWz/B,EAAM2gC,EAAWnB,EAAU,CAC7C,GAAI,CAACA,EACH,MAAM,IAAI,MACR,IAAMx/B,EAAO,0BAA4B2gC,EAAY,WAC3D,CAEA,CAMA,SAAS7B,GAAM3/B,EAAO,CACpB,OAAOyhC,GAAgBzhC,CAAK,EAAIA,EAAQ,IAAI6+B,GAAM7+B,CAAK,CACzD,CAMA,SAASyhC,GAAgBzhC,EAAO,CAC9B,MAAO,GACLA,GACE,OAAOA,GAAU,UACjB,YAAaA,GACb,aAAcA,EAEpB,CAMA,SAASogC,GAAgBpgC,EAAO,CAC9B,OAAO,OAAOA,GAAU,UAAY8+B,GAAa9+B,CAAK,CACxD,CAUA,SAAS8+B,GAAa9+B,EAAO,CAC3B,MAAO,GACLA,GACE,OAAOA,GAAU,UACjB,eAAgBA,GAChB,eAAgBA,EAEtB,CCtrCA,MAAM0hC,GACJ,oEAGIC,GAAe,CAAA,EAEfC,GAA2B,CAAC,mBAAoB,EAAI,EACpDC,GAAe,gCAIfC,GAAe,CACnB,CAAC,KAAM,aAAc,GAAI,sCAAsC,EAC/D,CAAC,KAAM,qBAAsB,GAAI,sCAAsC,EACvE,CACE,KAAM,YACN,GAAI,qDACJ,GAAI,cACR,EACE,CACE,KAAM,eACN,GAAI,qDACJ,GAAI,iBACR,EACE,CAAC,KAAM,YAAa,GAAI,kBAAkB,EAC1C,CACE,KAAM,kBACN,GAAI,qDACJ,GAAI,oBACR,EACE,CAAC,KAAM,aAAc,GAAI,sCAAsC,EAC/D,CAAC,KAAM,sBAAuB,GAAI,6BAA6B,EAC/D,CACE,KAAM,mBACN,GAAI,gDACR,EACE,CAAC,KAAM,aAAc,GAAI,mBAAmB,EAC5C,CAAC,KAAM,UAAW,GAAI,kCAAmC,GAAI,eAAe,EAC5E,CAAC,KAAM,eAAgB,GAAI,sBAAsB,EACjD,CAAC,KAAM,YAAa,GAAI,iCAAkC,GAAI,YAAY,EAC1E,CAAC,KAAM,SAAU,GAAI,4BAA6B,GAAI,UAAU,EAChE,CAAC,KAAM,YAAa,GAAI,mBAAmB,EAC3C,CAAC,KAAM,oBAAqB,GAAI,oBAAqB,GAAI,cAAc,EACvE,CAAC,KAAM,mBAAoB,GAAI,oBAAqB,GAAI,cAAc,CACxE,EAcO,SAASC,GAASvhC,EAAS,CAChC,MAAMwhC,EAAYC,GAAgBzhC,CAAO,EACnCk6B,EAAOwH,GAAW1hC,CAAO,EAC/B,OAAO2hC,GAAKH,EAAU,QAAQA,EAAU,MAAMtH,CAAI,EAAGA,CAAI,EAAGl6B,CAAO,CACrE,CAmFA,SAASyhC,GAAgBzhC,EAAS,CAChC,MAAM4hC,EAAgB5hC,EAAQ,eAAiBmhC,GACzCU,EAAgB7hC,EAAQ,eAAiBmhC,GACzCW,EAAsB9hC,EAAQ,oBAChC,CAAC,GAAGA,EAAQ,oBAAqB,GAAGohC,EAAwB,EAC5DA,GAQJ,OANkBN,GAAO,EACtB,IAAIzP,EAAW,EACf,IAAIwQ,CAAa,EACjB,IAAI7H,GAAc8H,CAAmB,EACrC,IAAIF,CAAa,CAGtB,CAUA,SAASF,GAAW1hC,EAAS,CAC3B,MAAM4K,EAAW5K,EAAQ,UAAY,GAC/Bk6B,EAAO,IAAImE,GAEjB,OAAI,OAAOzzB,GAAa,SACtBsvB,EAAK,MAAQtvB,EAEblL,GACE,qBACEkL,EACA,0CACR,EAGSsvB,CACT,CAYA,SAASyH,GAAKh4B,EAAM3J,EAAS,CAC3B,MAAM+hC,EAAkB/hC,EAAQ,gBAC1BgiC,EAAehiC,EAAQ,aACvBiiC,EAAajiC,EAAQ,WACrBkiC,EAAqBliC,EAAQ,mBAC7BmiC,EAAWniC,EAAQ,SACnBoiC,EAAmBpiC,EAAQ,iBAC3BqiC,EAAeriC,EAAQ,cAAgBsiC,GAE7C,UAAWC,KAAejB,GACpB,OAAO,OAAOthC,EAASuiC,EAAY,IAAI,GACzC7iC,GACE,eACE6iC,EAAY,KACZ,YACCA,EAAY,GACT,QAAUA,EAAY,GAAK,YAC3B,aACJ,UACArB,GACA,IACAqB,EAAY,GACZ,kBACV,EAIE,OAAIR,GAAmBG,GACrBxiC,GACE,2FACN,EAGE24B,GAAM1uB,EAAM64B,CAAS,EAEd94B,GAAaC,EAAM,CAC5B,SAAI84B,GAAAA,SACA,WAAAR,EACA,mBAAoB,GACxB,IAAI72B,GAAAA,IACJ,KAAIC,GAAAA,KACA,SAAU,GACV,SAAU,EACd,CAAG,EAGD,SAASm3B,EAAU/8B,EAAMxD,EAAOmH,EAAQ,CACtC,GAAI3D,EAAK,OAAS,OAAS2D,GAAU,OAAOnH,GAAU,SACpD,OAAIkgC,EACF/4B,EAAO,SAAS,OAAOnH,EAAO,CAAC,EAE/BmH,EAAO,SAASnH,CAAK,EAAI,CAAC,KAAM,OAAQ,MAAOwD,EAAK,KAAK,EAGpDxD,EAGT,GAAIwD,EAAK,OAAS,UAAW,CAE3B,IAAIrD,EAEJ,IAAKA,KAAO0K,GACV,GACE,OAAO,OAAOA,GAAe1K,CAAG,GAChC,OAAO,OAAOqD,EAAK,WAAYrD,CAAG,EAClC,CACA,MAAM5C,EAAQiG,EAAK,WAAWrD,CAAG,EAC3BgT,EAAOtI,GAAc1K,CAAG,GAC1BgT,IAAS,MAAQA,EAAK,SAAS3P,EAAK,OAAO,KAC7CA,EAAK,WAAWrD,CAAG,EAAIigC,EAAa,OAAO7iC,GAAS,EAAE,EAAG4C,EAAKqD,CAAI,EAEtE,CAEJ,CAEA,GAAIA,EAAK,OAAS,UAAW,CAC3B,IAAIgI,EAASs0B,EACT,CAACA,EAAgB,SAASt8B,EAAK,OAAO,EACtCy8B,EACEA,EAAmB,SAASz8B,EAAK,OAAO,EACxC,GAMN,GAJI,CAACgI,GAAUu0B,GAAgB,OAAO//B,GAAU,WAC9CwL,EAAS,CAACu0B,EAAav8B,EAAMxD,EAAOmH,CAAM,GAGxCqE,GAAUrE,GAAU,OAAOnH,GAAU,SACvC,OAAImgC,GAAoB38B,EAAK,SAC3B2D,EAAO,SAAS,OAAOnH,EAAO,EAAG,GAAGwD,EAAK,QAAQ,EAEjD2D,EAAO,SAAS,OAAOnH,EAAO,CAAC,EAG1BA,CAEX,CACF,CACF,CAWO,SAASqgC,GAAoB9iC,EAAO,CAIzC,MAAMkjC,EAAQljC,EAAM,QAAQ,GAAG,EACzBmjC,EAAenjC,EAAM,QAAQ,GAAG,EAChCojC,EAAapjC,EAAM,QAAQ,GAAG,EAC9B4d,EAAQ5d,EAAM,QAAQ,GAAG,EAE/B,OAEEkjC,IAAU,IAETtlB,IAAU,IAAMslB,EAAQtlB,GACxBulB,IAAiB,IAAMD,EAAQC,GAC/BC,IAAe,IAAMF,EAAQE,GAE9BvB,GAAa,KAAK7hC,EAAM,MAAM,EAAGkjC,CAAK,CAAC,EAEhCljC,EAGF,EACT","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139]}