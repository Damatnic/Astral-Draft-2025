{"version":3,"file":"AchievementsWidget-BQqVW3wL.js","sources":["../../utils/careerStats.ts","../../components/icons/MedalIcon.tsx","../../components/profile/AchievementsWidget.tsx"],"sourcesContent":["\nimport type { League, User } from '../types';\n\nexport const calculateManagerStats = (manager: User, leagues: League[]) => {\n    const managerId = manager.id;\n    const championships = manager.badges?.filter(b => b.type === 'CHAMPION').length || 0;\n    \n    return {\n        championships,\n        leaguesJoined: leagues.filter(l => !l.isMock && l.teams.some(t => t.owner.id === managerId)).length,\n        trophies: manager.badges?.map(b => ({id: b.id, text: `🏅 ${b.text}`})) || [],\n    };\n};\n\nexport const calculateCareerHistory = (managerId: string, leagues: League[]) => {\n    const historyEntries: any[] = [];\n\n    leagues.forEach(league => {\n        const myTeam = league.teams.find(t => t.owner.id === managerId);\n        if (!myTeam) return;\n\n        if (league.history) {\n            league.history.forEach(seasonHistory => {\n                const myStanding = seasonHistory.finalStandings.find(s => s.teamId === myTeam.id);\n                if (myStanding) {\n                    historyEntries.push({\n                        key: `${league.id}-${seasonHistory.season}`,\n                        season: seasonHistory.season,\n                        leagueName: league.name,\n                        leagueId: league.id,\n                        isComplete: true,\n                        rank: myStanding.rank,\n                        record: myStanding.record,\n                        isChampion: seasonHistory.championTeamId === myTeam.id\n                    });\n                }\n            });\n        }\n\n        if (league.status !== 'PRE_DRAFT' && league.status !== 'DRAFTING') {\n            const currentRank = [...league.teams].sort((a,b) => b.record.wins - a.record.wins).findIndex(t => t.id === myTeam.id) + 1;\n            historyEntries.push({\n                key: `${league.id}-current`,\n                season: new Date().getFullYear(),\n                leagueName: league.name,\n                leagueId: league.id,\n                isComplete: false,\n                rank: currentRank,\n                record: myTeam.record,\n                isChampion: false\n            });\n        }\n    });\n\n    return historyEntries.sort((a, b) => b.season - a.season || a.leagueName.localeCompare(b.leagueName));\n};\n\n\nexport const calculateHeadToHeadRecord = (myUserId: string, opponentUserId: string, leagues: League[]) => {\n    const record = {\n        regularSeason: { wins: 0, losses: 0, ties: 0 },\n        playoffs: { wins: 0, losses: 0, ties: 0 },\n    };\n\n    leagues.forEach(league => {\n        const myTeam = league.teams.find(t => t.owner.id === myUserId);\n        const opponentTeam = league.teams.find(t => t.owner.id === opponentUserId);\n\n        if (!myTeam || !opponentTeam) return;\n\n        // Regular season\n        league.schedule.forEach(matchup => {\n            const isH2H = (matchup.teamA.teamId === myTeam.id && matchup.teamB.teamId === opponentTeam.id) ||\n                          (matchup.teamA.teamId === opponentTeam.id && matchup.teamB.teamId === myTeam.id);\n\n            if (isH2H && matchup.teamA.score > 0 && matchup.teamB.score > 0) { // Check if played\n                const myScore = matchup.teamA.teamId === myTeam.id ? matchup.teamA.score : matchup.teamB.score;\n                const opponentScore = matchup.teamA.teamId === opponentTeam.id ? matchup.teamA.score : matchup.teamB.score;\n\n                if (myScore > opponentScore) record.regularSeason.wins++;\n                else if (opponentScore > myScore) record.regularSeason.losses++;\n                else record.regularSeason.ties++;\n            }\n        });\n\n        // Playoffs\n        if (league.playoffBracket) {\n            Object.values(league.playoffBracket).flat().forEach(matchup => {\n                 const isH2H = (matchup.teamA.teamId === myTeam.id && matchup.teamB.teamId === opponentTeam.id) ||\n                               (matchup.teamA.teamId === opponentTeam.id && matchup.teamB.teamId === myTeam.id);\n                \n                if (isH2H && matchup.teamA.score > 0 && matchup.teamB.score > 0) {\n                    const myScore = matchup.teamA.teamId === myTeam.id ? matchup.teamA.score : matchup.teamB.score;\n                    const opponentScore = matchup.teamA.teamId === opponentTeam.id ? matchup.teamA.score : matchup.teamB.score;\n\n                    if (myScore > opponentScore) record.playoffs.wins++;\n                    else if (opponentScore > myScore) record.playoffs.losses++;\n                    else record.playoffs.ties++;\n                }\n            });\n        }\n    });\n\n    return record;\n}\n","\nimport React from 'react';\n\nexport const MedalIcon: React.FC<{ className?: string }> = ({ className }) => (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className={className || \"h-5 w-5\"}>\n        <path d=\"M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z\"/>\n        <circle cx=\"12\" cy=\"10\" r=\"3\"/>\n    </svg>\n);\n","import React from 'react';\nimport type { Badge } from '../../types';\nimport { Widget } from '../ui/Widget';\nimport { TrophyIcon } from '../icons/TrophyIcon';\nimport { MedalIcon } from '../icons/MedalIcon';\nimport { FlameIcon } from '../icons/FlameIcon';\n\nconst badgeIcons: Record<Badge['type'], React.ReactNode> = {\n    CHAMPION: <TrophyIcon />,\n    TOP_SCORER: <MedalIcon />,\n    WIN_STREAK_3: <FlameIcon />,\n};\n\nconst badgeColors: Record<Badge['type'], string> = {\n    CHAMPION: 'border-yellow-400/50 bg-yellow-500/10 text-yellow-300',\n    TOP_SCORER: 'border-purple-400/50 bg-purple-500/10 text-purple-300',\n    WIN_STREAK_3: 'border-orange-400/50 bg-orange-500/10 text-orange-300',\n};\n\nconst AchievementsWidget: React.FC<{ badges: Badge[] }> = ({ badges }) => {\n    if (!badges || badges.length === 0) {\n        return null; // Don't show the widget if there are no badges\n    }\n\n    return (\n        <Widget title=\"Achievements\" icon={<TrophyIcon />}>\n            <div className=\"p-4 space-y-2\">\n                {badges.map((badge: any) => (\n                    <div key={badge.id} className={`flex items-center gap-3 p-2 rounded-lg border-l-4 ${badgeColors[badge.type]}`}>\n                        <div className=\"text-xl\">{badgeIcons[badge.type]}</div>\n                        <div>\n                             <p className=\"font-semibold text-sm text-white\">{badge.text}</p>\n                             <p className=\"text-xs text-gray-400\">{badge.season}</p>\n                        </div>\n                    </div>\n                ))}\n            </div>\n        </Widget>\n    );\n};\n\nexport default AchievementsWidget;"],"names":["calculateManagerStats","manager","leagues","managerId","b","l","t","calculateCareerHistory","historyEntries","league","myTeam","seasonHistory","myStanding","s","currentRank","a","calculateHeadToHeadRecord","myUserId","opponentUserId","record","opponentTeam","matchup","myScore","opponentScore","MedalIcon","className","jsxDEV","this","badgeIcons","TrophyIcon","FlameIcon","badgeColors","AchievementsWidget","badges","Widget","badge"],"mappings":"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"}