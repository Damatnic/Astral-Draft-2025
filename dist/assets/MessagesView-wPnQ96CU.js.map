{"version":3,"file":"MessagesView-wPnQ96CU.js","sources":["../../components/messages/ConversationList.tsx","../../components/icons/SendIcon.tsx","../../components/messages/MessageThread.tsx","../../views/MessagesView.tsx"],"sourcesContent":["import React from 'react';\nimport { useAppState } from '../../contexts/AppContext';\nimport type { User } from '../../types';\nimport { Avatar } from '../ui/Avatar';\nimport { PlusCircleIcon } from '../icons/PlusCircleIcon';\n\ninterface ConversationListProps {\n    selectedUserId: string | null;\n    onSelectUser: (userId: string) => void;\n    onStartNewMessage: () => void;\n    isNewMessageActive: boolean;\n}\n\nconst ConversationList: React.FC<ConversationListProps> = ({ selectedUserId, onSelectUser, onStartNewMessage, isNewMessageActive }) => {\n    const { state } = useAppState();\n\n    const conversations = React.useMemo(() => {\n        const userMap = new Map<string, User>();\n        state.leagues.forEach((league: any) => {\n            league.members.forEach((member: any) => {\n                if (member.id !== state.user.id) {\n                    userMap.set(member.id, member);\n                }\n            });\n        });\n\n        const lastMessageTimes: { [userId: string]: number } = {};\n        const unreadCounts: { [userId: string]: number } = {};\n        \n        state.directMessages.forEach((dm: any) => {\n            const otherUserId = dm.fromUserId === state.user.id ? dm.toUserId : dm.fromUserId;\n            if (!lastMessageTimes[otherUserId] || dm.timestamp > lastMessageTimes[otherUserId]) {\n                lastMessageTimes[otherUserId] = dm.timestamp;\n            }\n            if (dm.toUserId === state.user.id && !dm.isRead) {\n                unreadCounts[otherUserId] = (unreadCounts[otherUserId] || 0) + 1;\n            }\n        });\n\n        return Array.from(userMap.values())\n            .map((user: any) => ({\n                user,\n                lastMessage: lastMessageTimes[user.id] || 0,\n                unreadCount: unreadCounts[user.id] || 0,\n            }))\n            .sort((a, b) => b.lastMessage - a.lastMessage);\n\n    }, [state.leagues, state.directMessages, state.user.id]);\n\n    return (\n        <div className=\"h-full flex flex-col\">\n            <div className=\"p-4 border-b border-[var(--panel-border)]\">\n                <button\n                    onClick={onStartNewMessage}\n                    className={`w-full flex items-center justify-center gap-2 px-3 py-2 text-sm font-bold rounded-lg transition-colors ${\n                        isNewMessageActive ? 'bg-cyan-500 text-black' : 'bg-white/10 hover:bg-white/20'\n                    }`}\n                >\n                    <PlusCircleIcon /> New Message\n                </button>\n            </div>\n            <div className=\"flex-grow overflow-y-auto p-2 space-y-1\">\n                {conversations.map(({ user, unreadCount }) => (\n                    <button\n                        key={user.id}\n                        onClick={() => onSelectUser(user.id)}\n                        className={`w-full flex items-center justify-between p-2 rounded-md text-left transition-colors ${\n                            selectedUserId === user.id ? 'bg-cyan-500/20' : 'hover:bg-white/10'\n                        }`}\n                    >\n                        <div className=\"flex items-center gap-3\">\n                            <Avatar avatar={user.avatar} className=\"w-10 h-10 text-2xl rounded-full\" />\n                            <span className=\"font-semibold text-sm\">{user.name}</span>\n                        </div>\n                        {unreadCount > 0 && (\n                            <span className=\"w-5 h-5 bg-red-500 text-white text-xs font-bold rounded-full flex items-center justify-center\">\n                                {unreadCount}\n                            </span>\n                        )}\n                    </button>\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default ConversationList;","import React from 'react';\n\nexport const SendIcon: React.FC<{ className?: string }> = ({ className }) => (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className={className || \"h-5 w-5\"}>\n        <line x1=\"22\" y1=\"2\" x2=\"11\" y2=\"13\"/>\n        <polygon points=\"22 2 15 22 11 13 2 9 22 2\"/>\n    </svg>\n);","import React from 'react';\nimport { useAppState } from '../../contexts/AppContext';\nimport { Avatar } from '../ui/Avatar';\nimport { SendIcon } from '../icons/SendIcon';\nimport type { User } from '../../types';\nimport EmptyState from '../ui/EmptyState';\nimport { UsersIcon } from 'lucide-react';\n\ninterface MessageThreadProps {\n    userId: string | null;\n    onUserSelected?: (userId: string) => void;\n}\n\nconst MessageThread: React.FC<MessageThreadProps> = ({ userId, onUserSelected }) => {\n    const { state, dispatch } = useAppState();\n    const [text, setText] = React.useState('');\n    const [tempUser, setTempUser] = React.useState<User | null>(null);\n    const messagesEndRef = React.useRef<HTMLDivElement>(null);\n\n    const otherUser = userId ? state.leagues.flatMap(l => l.members).find((m: any) => m.id === userId) : null;\n    const finalUser = otherUser || tempUser;\n\n    React.useEffect(() => {\n        if (userId) {\n            dispatch({ type: 'MARK_CONVERSATION_AS_READ', payload: { userId } });\n        }\n    }, [userId, dispatch]);\n\n    React.useEffect(() => {\n        messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n    }, [userId, state.directMessages]);\n    \n    const handleSend = () => {\n        if (!text.trim() || !finalUser) return;\n        dispatch({ type: 'SEND_DIRECT_MESSAGE', payload: { toUserId: finalUser.id, text } });\n        setText('');\n    };\n\n    const messages = state.directMessages.filter(\n        dm => (dm.fromUserId === state.user.id && dm.toUserId === userId) || (dm.fromUserId === userId && dm.toUserId === state.user.id)\n    );\n    \n    const allUsers = React.useMemo(() => {\n        const userMap = new Map<string, User>();\n        state.leagues.forEach((league: any) => {\n            league.members.forEach((member: any) => {\n                if (member.id !== state.user.id) {\n                    userMap.set(member.id, member);\n                }\n            });\n        });\n        return Array.from(userMap.values());\n    },[state.leagues, state.user.id]);\n\n    if (!userId && onUserSelected) {\n         return (\n            <div className=\"h-full flex flex-col\">\n                <div className=\"p-2 border-b border-[var(--panel-border)]\">\n                     <p className=\"p-2 text-sm\">Select a user to start a conversation:</p>\n                </div>\n                <div className=\"flex-grow overflow-y-auto p-2 space-y-1\">\n                    {allUsers.map((user: any) => (\n                        <button key={user.id} onClick={() => onUserSelected(user.id)} className=\"w-full flex items-center p-2 rounded-md hover:bg-white/10\">\n                            <Avatar avatar={user.avatar} className=\"w-8 h-8 rounded-full mr-2\"/>\n                            {user.name}\n                        </button>\n                    ))}\n                </div>\n            </div>\n         )\n    }\n\n    if (!finalUser) {\n        return <div />;\n    }\n\n    return (\n        <div className=\"h-full flex flex-col\">\n            <header className=\"p-3 border-b border-[var(--panel-border)] flex items-center gap-3\">\n                <Avatar avatar={finalUser.avatar} className=\"w-8 h-8 text-xl rounded-full\" />\n                <h3 className=\"font-bold text-lg\">{finalUser.name}</h3>\n            </header>\n            <main className=\"flex-grow p-4 space-y-4 overflow-y-auto\">\n                {messages.map((msg: any) => (\n                    <div key={msg.id} className={`flex items-start gap-2.5 text-sm ${msg.fromUserId === state.user.id ? 'justify-end' : ''}`}>\n                        {msg.fromUserId !== state.user.id && <Avatar avatar={finalUser.avatar} className=\"w-8 h-8 text-xl rounded-full\" />}\n                        <div className={`p-2 rounded-lg max-w-[70%] ${msg.fromUserId === state.user.id ? 'bg-cyan-600' : 'bg-black/20'}`}>\n                            <p>{msg.text}</p>\n                        </div>\n                    </div>\n                ))}\n                 <div ref={messagesEndRef} />\n            </main>\n            <footer className=\"p-3 border-t border-[var(--panel-border)]\">\n                <div className=\"flex gap-2\">\n                    <input\n                        type=\"text\"\n                        value={text}\n                        onChange={e => setText(e.target.value)}\n                        onKeyDown={e => e.key === 'Enter' && handleSend()}\n                        placeholder={`Message ${finalUser.name}...`}\n                        className=\"flex-grow bg-black/20 p-2 rounded-md border border-white/10 focus:outline-none focus:ring-1 focus:ring-cyan-400\"\n                    />\n                    <button onClick={handleSend} disabled={!text.trim()} className=\"p-2 bg-cyan-500 text-black rounded-md disabled:opacity-50\">\n                        <SendIcon />\n                    </button>\n                </div>\n            </footer>\n        </div>\n    );\n};\n\nexport default MessageThread;","import React from 'react';\nimport { useAppState } from '../contexts/AppContext';\nimport { MailIcon } from '../components/icons/MailIcon';\nimport ConversationList from '../components/messages/ConversationList';\nimport MessageThread from '../components/messages/MessageThread';\nimport EmptyState from '../components/ui/EmptyState';\nimport { InboxIcon } from '../components/icons/InboxIcon';\n\nconst MessagesView: React.FC = () => {\n    const { state, dispatch } = useAppState();\n    const [selectedUserId, setSelectedUserId] = React.useState<string | null>(null);\n    const [showNewMessage, setShowNewMessage] = React.useState(false);\n\n    const handleSelectUser = (userId: string) => {\n        setSelectedUserId(userId);\n        setShowNewMessage(false);\n    }\n    \n    const handleStartNewMessage = () => {\n        setSelectedUserId(null);\n        setShowNewMessage(true);\n    };\n    \n    // Auto-select first user with unread messages\n    React.useEffect(() => {\n        const firstUnread = state.directMessages.find(dm => dm.toUserId === state.user.id && !dm.isRead);\n        if (firstUnread) {\n            setSelectedUserId(firstUnread.fromUserId);\n        }\n    }, []);\n\n    return (\n        <div className=\"w-full h-full flex flex-col p-4 sm:p-6 lg:p-8 overflow-y-auto\">\n            <header className=\"flex-shrink-0 flex justify-between items-center mb-6\">\n                <div>\n                    <h1 className=\"font-display text-3xl sm:text-4xl font-extrabold tracking-wider uppercase flex items-center gap-3\">\n                        <MailIcon />\n                        MESSAGES\n                    </h1>\n                </div>\n                <button onClick={() => dispatch({ type: 'SET_VIEW', payload: 'DASHBOARD' })} className=\"px-4 py-2 bg-white/10 rounded-lg text-sm hover:bg-white/20\">\n                    Back to Dashboard\n                </button>\n            </header>\n            <main className=\"flex-grow glass-pane rounded-2xl overflow-hidden flex\">\n                <div className=\"w-1/3 border-r border-[var(--panel-border)] flex flex-col\">\n                    <ConversationList \n                        selectedUserId={selectedUserId} \n                        onSelectUser={handleSelectUser}\n                        onStartNewMessage={handleStartNewMessage}\n                        isNewMessageActive={showNewMessage}\n                    />\n                </div>\n                <div className=\"w-2/3\">\n                    {selectedUserId ? (\n                        <MessageThread userId={selectedUserId} />\n                    ) : showNewMessage ? (\n                         <MessageThread userId={null} onUserSelected={handleSelectUser}/>\n                    ) : (\n                        <div className=\"h-full flex items-center justify-center\">\n                            <EmptyState \n                                illustration={<InboxIcon />}\n                                message=\"Select a conversation or start a new one.\"\n                            />\n                        </div>\n                    )}\n                </div>\n            </main>\n        </div>\n    );\n};\n\nexport default MessagesView;"],"names":["ConversationList","selectedUserId","onSelectUser","onStartNewMessage","isNewMessageActive","state","useAppState","conversations","React","userMap","league","member","lastMessageTimes","unreadCounts","dm","otherUserId","user","b","jsxDEV","PlusCircleIcon","this","unreadCount","Avatar","SendIcon","className","MessageThread","userId","onUserSelected","dispatch","text","setText","tempUser","setTempUser","messagesEndRef","finalUser","l","m","handleSend","messages","allUsers","msg","e","MessagesView","setSelectedUserId","showNewMessage","setShowNewMessage","handleSelectUser","handleStartNewMessage","firstUnread","MailIcon","EmptyState","InboxIcon"],"mappings":"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"}