{"version":3,"file":"ChampionshipOddsView-C3RbmCj_.js","sources":["../../components/analytics/ChampionshipProbChart.tsx","../../components/modals/TradeScenarioModal.tsx","../../components/icons/FlaskConicalIcon.tsx","../../views/ChampionshipOddsView.tsx"],"sourcesContent":["\nimport React from 'react';\nimport type { League } from '../../types';\n\ninterface ChampionshipProbChartProps {\n    league: League;\n}\n\nconst teamColors = [\n    '#34d399', '#f87171', '#60a5fa', '#facc15', '#a78bfa', '#fb923c',\n    '#f472b6', '#38bdf8', '#a3e635', '#4ade80', '#c084fc', '#fb7185'\n];\n\nconst ChampionshipProbChart: React.FC<ChampionshipProbChartProps> = ({ league }) => {\n    const chartRef = React.useRef<SVGSVGElement>(null);\n    const [tooltip, setTooltip] = React.useState<{ x: number, y: number, content: React.ReactNode } | null>(null);\n\n    const width = 800;\n    const height = 400;\n    const padding = 50;\n\n    const weeks = Array.from({ length: league.currentWeek }, (_, i) => i + 1);\n    const xScale = (week: number) => padding + ((week - 1) / (weeks.length - 1 || 1)) * (width - 2 * padding);\n    const yScale = (prob: number) => height - padding - (prob / 100) * (height - 2 * padding);\n\n    const handleMouseMove = (e: React.MouseEvent<SVGSVGElement>) => {\n        if (!chartRef.current) return;\n        const svgRect = chartRef.current.getBoundingClientRect();\n        const mouseX = e.clientX - svgRect.left;\n        \n        const weekIndex = Math.round(((mouseX - padding) / (width - 2 * padding)) * (weeks.length - 1));\n        const week = weeks[weekIndex];\n        if (week === undefined) return;\n\n        const dataForWeek = league.teams.map((team, i) => {\n            const prob = team.championshipProbHistory?.find((h: any) => h.week === week)?.probability ?? null;\n            return { name: team.name, prob, color: teamColors[i % teamColors.length] };\n        }).filter((d: any) => d.prob !== null).sort((a, b) => b.prob! - a.prob!);\n\n        if (dataForWeek.length === 0) return;\n\n        setTooltip({\n            x: e.clientX - svgRect.left,\n            y: e.clientY - svgRect.top,\n            content: (\n                <div className=\"p-2 bg-gray-900/80 rounded-lg text-xs\">\n                    <p className=\"font-bold mb-1\">Week {week}</p>\n                    {dataForWeek.map((d: any) => (\n                        <div key={d.name} className=\"flex items-center gap-2\">\n                            <div className=\"w-2 h-2 rounded-full\" style={{ backgroundColor: d.color }}></div>\n                            <span>{d.name}:</span>\n                            <span className=\"font-bold\">{d.prob?.toFixed(1)}%</span>\n                        </div>\n                    ))}\n                </div>\n            )\n        });\n    };\n    \n    const handleMouseLeave = () => setTooltip(null);\n\n    return (\n        <div className=\"relative w-full h-full\">\n            <svg ref={chartRef} viewBox={`0 0 ${width} ${height}`} onMouseMove={handleMouseMove} onMouseLeave={handleMouseLeave} className=\"w-full h-full\">\n                {/* Axes */}\n                <line x1={padding} y1={height - padding} x2={width - padding} y2={height - padding} stroke=\"#475569\" />\n                <line x1={padding} y1={padding} x2={padding} y2={height - padding} stroke=\"#475569\" />\n                \n                {/* Y-axis labels */}\n                {[0, 25, 50, 75, 100].map((p: any) => (\n                    <g key={p}>\n                        <text x={padding - 10} y={yScale(p)} textAnchor=\"end\" alignmentBaseline=\"middle\" fill=\"#94a3b8\" fontSize=\"12\">{p}%</text>\n                        <line x1={padding} y1={yScale(p)} x2={width - padding} y2={yScale(p)} stroke=\"#475569\" strokeDasharray=\"2,2\" opacity=\"0.5\"/>\n                    </g>\n                ))}\n                \n                 {/* X-axis labels */}\n                 {weeks.map((w: any) => (\n                     <text key={w} x={xScale(w)} y={height - padding + 20} textAnchor=\"middle\" fill=\"#94a3b8\" fontSize=\"12\">{w}</text>\n                 ))}\n\n                {/* Data lines */}\n                {league.teams.map((team, i) => {\n                    const history = team.championshipProbHistory?.filter(h => h.week <= league.currentWeek) || [];\n                    if (history.length < 2) return null;\n                    const pathData = history.map((h: any) => `${xScale(h.week)},${yScale(h.probability)}`).join(' L ');\n                    return (\n                        <path key={team.id} d={`M ${pathData}`} fill=\"none\" stroke={teamColors[i % teamColors.length]} strokeWidth=\"2\" />\n                    );\n                })}\n            </svg>\n            {tooltip && (\n                <div className=\"absolute pointer-events-none p-2 rounded-lg\" style={{ left: tooltip.x + 10, top: tooltip.y + 10 }}>\n                    {tooltip.content}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default ChampionshipProbChart;","\n\nimport React from 'react';\nimport { motion } from 'framer-motion';\nimport type { Team, Player, League, ChampionshipOddsSimulation } from '../../types';\nimport { players } from '../../data/players';\nimport Modal from '../ui/Modal';\nimport { ArrowRightLeftIcon } from '../icons/ArrowRightLeftIcon';\nimport { SparklesIcon } from '../icons/SparklesIcon';\nimport { simulateTradeImpactOnOdds } from '../../services/geminiService';\nimport { useLeague } from '../../hooks/useLeague';\nimport LoadingSpinner from '../ui/LoadingSpinner';\nimport { ArrowDownIcon } from '../icons/ArrowDownIcon';\nimport { ArrowUpIcon } from '../icons/ArrowUpIcon';\nimport { MinusIcon } from '../icons/MinusIcon';\n\ninterface TradeScenarioModalProps {\n    league: League;\n    onClose: () => void;\n}\n\nconst PlayerSelectItem: React.FC<{ player: Player; isSelected: boolean; onToggle: () => void }> = ({ player, isSelected, onToggle }) => (\n    <div\n        onClick={onToggle}\n        className={`flex items-center gap-3 p-2 rounded-md cursor-pointer transition-colors ${\n            isSelected ? 'bg-cyan-500/30 ring-2 ring-cyan-400' : 'bg-black/10 hover:bg-black/20'\n        }`}\n    >\n        <div>\n            <p className=\"font-bold text-sm\">{player.name}</p>\n            <p className=\"text-xs text-gray-400\">{player.position} - {player.team}</p>\n        </div>\n    </div>\n);\n\nconst SimulationResult: React.FC<{ result: ChampionshipOddsSimulation, league: League, myTeamId: number, opponentTeamId: number }> = ({ result, league, myTeamId, opponentTeamId }) => {\n    const changes = result.after.map((after: any) => {\n        const before = result.before.find((b: any) => b.teamId === after.teamId);\n        const change = before ? after.probability - before.probability : 0;\n        return {\n            team: league.teams.find((t: any) => t.id === after.teamId),\n            before: before?.probability,\n            after: after.probability,\n            change\n        };\n    }).sort((a,b) => b.change - a.change);\n\n    const ChangeIndicator = ({ change }: { change: number }) => {\n        if (Math.abs(change) < 0.1) return <MinusIcon className=\"text-gray-400\" />;\n        if (change > 0) return <ArrowUpIcon className=\"text-green-400\" />;\n        return <ArrowDownIcon className=\"text-red-400\" />;\n    };\n\n    return (\n        <div className=\"p-4 bg-black/20 rounded-lg\">\n            <h4 className=\"font-bold text-lg text-center text-cyan-300 mb-2\">Simulation Results</h4>\n            <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n                {changes.map(({ team, before, after, change }) => (\n                    <div key={team?.id} className={`p-2 rounded-md flex items-center justify-between text-sm ${team?.id === myTeamId || team?.id === opponentTeamId ? 'bg-cyan-900/50' : ''}`}>\n                        <span>{team?.name}</span>\n                        <div className=\"flex items-center gap-2 font-mono\">\n                            <span>{before?.toFixed(1)}%</span>\n                            <span className=\"text-gray-400\">â†’</span>\n                            <span className=\"font-bold\">{after.toFixed(1)}%</span>\n                            <div className=\"w-16 text-right flex items-center justify-end gap-1\">\n                                <ChangeIndicator change={change} />\n                                <span className={change > 0 ? 'text-green-400' : change < 0 ? 'text-red-400' : 'text-gray-400'}>\n                                    ({change > 0 && '+'}{change.toFixed(1)}%)\n                                </span>\n                            </div>\n                        </div>\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n};\n\n\nconst TradeScenarioModal: React.FC<TradeScenarioModalProps> = ({ league, onClose }) => {\n    const { myTeam } = useLeague();\n    const [opponentId, setOpponentId] = React.useState<number | null>(null);\n    const [playersToSend, setPlayersToSend] = React.useState<Set<number>>(new Set());\n    const [playersToReceive, setPlayersToReceive] = React.useState<Set<number>>(new Set());\n    const [simulationResult, setSimulationResult] = React.useState<ChampionshipOddsSimulation | null>(null);\n    const [isLoading, setIsLoading] = React.useState(false);\n\n    const opponentTeam = league.teams.find((t: any) => t.id === opponentId);\n\n    const togglePlayer = (playerId: number, list: 'send' | 'receive') => {\n        const [state, setState] = list === 'send' ? [playersToSend, setPlayersToSend] : [playersToReceive, setPlayersToReceive];\n        const newSet = new Set(state);\n        if (newSet.has(playerId)) newSet.delete(playerId);\n        else newSet.add(playerId);\n        setState(newSet);\n        setSimulationResult(null);\n    };\n\n    const handleSimulate = async () => {\n        if (!myTeam || !opponentTeam || (playersToSend.size === 0 && playersToReceive.size === 0)) return;\n        setIsLoading(true);\n        setSimulationResult(null);\n\n        const toSend = players.filter((p: any) => playersToSend.has(p.id));\n        const toReceive = players.filter((p: any) => playersToReceive.has(p.id));\n\n        const after = await simulateTradeImpactOnOdds(league, myTeam, opponentTeam, toSend, toReceive);\n\n        if (after) {\n            const before = league.teams.map((t: any) => ({\n                teamId: t.id,\n                probability: t.championshipProbHistory?.find((h: any) => h.week === league.currentWeek)?.probability || 0,\n            }));\n            setSimulationResult({ before, after });\n        }\n        setIsLoading(false);\n    };\n    \n    return (\n        <Modal onClose={onClose}>\n            <motion.div\n                className=\"glass-pane rounded-xl shadow-2xl w-full max-w-4xl max-h-[90vh] flex flex-col\"\n                {...{\n                    initial: { opacity: 0, scale: 0.95 },\n                    animate: { opacity: 1, scale: 1 },\n                }}\n            >\n                <header className=\"p-4 border-b border-[var(--panel-border)] text-center\">\n                    <h2 className=\"text-xl font-bold font-display\">\"What If?\" Trade Simulator</h2>\n                </header>\n\n                <main className=\"p-4 grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div className=\"flex flex-col\">\n                        <h3 className=\"font-semibold text-center mb-2\">{myTeam?.name} Gives:</h3>\n                        <div className=\"bg-black/10 p-2 rounded-lg space-y-2 flex-grow h-48 overflow-y-auto\">\n                            {myTeam?.roster.map(p => <PlayerSelectItem key={p.id} player={p} isSelected={playersToSend.has(p.id)} onToggle={() => togglePlayer(p.id, 'send')} />)}\n                        </div>\n                    </div>\n                    <div className=\"flex flex-col\">\n                         <label htmlFor=\"opponent-select\" className=\"block text-sm text-center font-medium text-gray-400 mb-1\">Trade with:</label>\n                        <select\n                            id=\"opponent-select\"\n                            value={opponentId || ''}\n                            onChange={(e: any) => {\n                                setOpponentId(Number(e.target.value));\n                                setPlayersToReceive(new Set());\n                                setSimulationResult(null);\n                            }}\n                            className=\"w-full bg-black/20 p-2 rounded-md border border-white/10 mb-2\"\n                        >\n                            <option value=\"\" disabled>Select a Team</option>\n                            {league.teams.filter((t: any) => t.id !== myTeam?.id).map((t: any) => (\n                                <option key={t.id} value={t.id}>{t.name}</option>\n                            ))}\n                        </select>\n                        <div className={`bg-black/10 p-2 rounded-lg space-y-2 flex-grow h-48 overflow-y-auto ${!opponentTeam ? 'flex items-center justify-center text-gray-500' : ''}`}>\n                            {opponentTeam ? \n                                opponentTeam.roster.map(p => <PlayerSelectItem key={p.id} player={p} isSelected={playersToReceive.has(p.id)} onToggle={() => togglePlayer(p.id, 'receive')} />)\n                               : <p>Select an opponent to see their roster.</p>\n                            }\n                        </div>\n                    </div>\n                </main>\n\n                <div className=\"px-4 pb-4\">\n                     {isLoading ? <LoadingSpinner size=\"sm\" text=\"Simulating season outcomes...\" /> :\n                      simulationResult && myTeam && opponentTeam ? <SimulationResult result={simulationResult} league={league} myTeamId={myTeam.id} opponentTeamId={opponentTeam.id} /> : null\n                    }\n                </div>\n                \n                <footer className=\"p-4 flex justify-between items-center border-t border-[var(--panel-border)]\">\n                    <button type=\"button\" onClick={onClose} className=\"mobile-touch-target px-4 py-3 bg-transparent border border-transparent hover:border-[var(--panel-border)] text-[var(--text-secondary)] font-bold rounded-lg\">Close</button>\n                    <button onClick={handleSimulate} disabled={!opponentTeam || isLoading} className=\"mobile-touch-target flex items-center gap-2 px-6 py-3 bg-gradient-to-r from-purple-500 to-indigo-600 text-white font-bold rounded-lg disabled:opacity-50\">\n                        <SparklesIcon />\n                        Simulate Impact\n                    </button>\n                </footer>\n            </motion.div>\n        </Modal>\n    );\n};\n\nexport default TradeScenarioModal;","\nimport React from 'react';\n\nexport const FlaskConicalIcon: React.FC<{ className?: string }> = ({ className }) => (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className={className || \"h-5 w-5\"}>\n        <path d=\"M4.5 3h15\"/>\n        <path d=\"M6 3v12.5a4.5 4.5 0 0 0 9 0V3\"/>\n        <path d=\"M6 14h12\"/>\n    </svg>\n);","\nimport React from 'react';\nimport { useAppState } from '../contexts/AppContext';\nimport { useLeague } from '../hooks/useLeague';\nimport { Widget } from '../components/ui/Widget';\nimport ErrorDisplay from '../components/core/ErrorDisplay';\nimport { generateChampionshipProbabilities } from '../services/geminiService';\nimport { TrophyIcon } from '../components/icons/TrophyIcon';\nimport LoadingSpinner from '../components/ui/LoadingSpinner';\nimport ChampionshipProbChart from '../components/analytics/ChampionshipProbChart';\nimport { Avatar } from '../components/ui/Avatar';\nimport { AnimatePresence } from 'framer-motion';\nimport TradeScenarioModal from '../components/modals/TradeScenarioModal';\nimport { FlaskConicalIcon } from '../components/icons/FlaskConicalIcon';\n\nconst ChampionshipOddsView: React.FC = () => {\n    const { state, dispatch } = useAppState();\n    const { league } = useLeague();\n    const [isLoading, setIsLoading] = React.useState(false);\n    const [isSimModalOpen, setIsSimModalOpen] = React.useState(false);\n\n    React.useEffect(() => {\n        const needsUpdate = league?.teams.some(t => {\n            const history = t.championshipProbHistory || [];\n            return !history.some(h => h.week === league.currentWeek);\n        });\n\n        if (league && needsUpdate && (league.status === 'IN_SEASON' || league.status === 'PLAYOFFS')) {\n            setIsLoading(true);\n            generateChampionshipProbabilities(league)\n                .then(data => {\n                    if (data) {\n                        dispatch({ type: 'SET_CHAMPIONSHIP_PROBS', payload: { leagueId: league.id, data } });\n                    }\n                })\n                .finally(() => setIsLoading(false));\n        }\n    }, [league, dispatch]);\n\n    if (!league || !(league.status === 'IN_SEASON' || league.status === 'PLAYOFFS' || league.status === 'COMPLETE')) {\n        return <ErrorDisplay title=\"Not Available\" message=\"Championship odds are calculated during the season.\" onRetry={() => dispatch({ type: 'SET_VIEW', payload: 'ANALYTICS_HUB' })} />;\n    }\n    \n    if (league.settings.aiAssistanceLevel === 'BASIC') {\n        return <ErrorDisplay title=\"Feature Disabled\" message=\"Championship Odds are disabled in leagues with Basic AI Assistance.\" onRetry={() => dispatch({ type: 'SET_VIEW', payload: 'ANALYTICS_HUB' })} />;\n    }\n    \n    const rankedTeams = [...league.teams]\n        .map(team => {\n            const history = team.championshipProbHistory || [];\n            const currentProb = history.length > 0 ? history.find(h => h.week === league.currentWeek)?.probability ?? history[history.length - 1].probability : 0;\n            return { ...team, currentProb };\n        })\n        .sort((a, b) => b.currentProb - a.currentProb);\n\n    return (\n        <div className=\"w-full h-full flex flex-col p-4 sm:p-6 lg:p-8 overflow-y-auto\">\n            <header className=\"flex-shrink-0 flex justify-between items-center mb-6\">\n                <div>\n                    <h1 className=\"font-display text-3xl sm:text-4xl font-extrabold tracking-wider uppercase text-[var(--text-primary)]\">\n                        Championship Odds\n                    </h1>\n                    <p className=\"text-sm text-[var(--text-secondary)] tracking-widest\">{league.name}</p>\n                </div>\n                <div className=\"flex items-center gap-2\">\n                     <button \n                        onClick={() => setIsSimModalOpen(true)}\n                        className=\"px-4 py-2 bg-purple-500/20 text-purple-300 rounded-lg text-sm hover:bg-purple-500/30 flex items-center gap-2\"\n                    >\n                        <FlaskConicalIcon /> Run Trade Scenario\n                    </button>\n                    <button onClick={() => dispatch({ type: 'SET_VIEW', payload: 'ANALYTICS_HUB' })} className=\"px-4 py-2 bg-white/10 rounded-lg text-sm hover:bg-white/20\">\n                        Back to Analytics Hub\n                    </button>\n                </div>\n            </header>\n            <main className=\"flex-grow grid grid-cols-1 lg:grid-cols-3 gap-6\">\n                <div className=\"lg:col-span-2\">\n                    <Widget title=\"Probability Trends\" icon={<TrophyIcon />}>\n                        <div className=\"p-4 h-[60vh]\">\n                            {isLoading ? <LoadingSpinner text=\"Calculating probabilities...\" /> : <ChampionshipProbChart league={league} />}\n                        </div>\n                    </Widget>\n                </div>\n                <div className=\"lg:col-span-1\">\n                     <Widget title={`Current Odds - Week ${league.currentWeek}`}>\n                        <div className=\"p-2 space-y-1 max-h-[60vh] overflow-y-auto\">\n                            {rankedTeams.map((team, index) => (\n                                <div key={team.id} className={`flex items-center justify-between p-2 rounded-md ${index === 0 ? 'bg-yellow-500/10' : 'bg-black/10'}`}>\n                                    <div className=\"flex items-center gap-2\">\n                                        <span className=\"font-bold w-6\">{index + 1}</span>\n                                        <Avatar avatar={team.avatar} className=\"w-8 h-8 rounded-md\" />\n                                        <p className=\"font-semibold text-sm\">{team.name}</p>\n                                    </div>\n                                    <p className=\"font-bold text-yellow-300\">{team.currentProb.toFixed(1)}%</p>\n                                </div>\n                            ))}\n                        </div>\n                    </Widget>\n                </div>\n            </main>\n             <AnimatePresence>\n                {isSimModalOpen && (\n                    <TradeScenarioModal \n                        league={league}\n                        onClose={() => setIsSimModalOpen(false)}\n                    />\n                )}\n            </AnimatePresence>\n        </div>\n    );\n};\n\nexport default ChampionshipOddsView;\n"],"names":["teamColors","ChampionshipProbChart","league","chartRef","React","tooltip","setTooltip","width","height","padding","weeks","_","i","xScale","week","yScale","prob","handleMouseMove","e","svgRect","mouseX","weekIndex","dataForWeek","team","h","d","a","b","jsxDEV","this","handleMouseLeave","p","w","history","pathData","PlayerSelectItem","player","isSelected","onToggle","SimulationResult","result","myTeamId","opponentTeamId","changes","after","before","change","ChangeIndicator","MinusIcon","ArrowUpIcon","ArrowDownIcon","TradeScenarioModal","onClose","myTeam","useLeague","opponentId","setOpponentId","playersToSend","setPlayersToSend","playersToReceive","setPlayersToReceive","simulationResult","setSimulationResult","isLoading","setIsLoading","opponentTeam","t","togglePlayer","playerId","list","state","setState","newSet","handleSimulate","toSend","players","toReceive","simulateTradeImpactOnOdds","Modal","motion","LoadingSpinner","SparklesIcon","FlaskConicalIcon","className","ChampionshipOddsView","dispatch","useAppState","isSimModalOpen","setIsSimModalOpen","needsUpdate","generateChampionshipProbabilities","data","ErrorDisplay","rankedTeams","currentProb","Widget","TrophyIcon","index","Avatar","AnimatePresence"],"mappings":"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"}