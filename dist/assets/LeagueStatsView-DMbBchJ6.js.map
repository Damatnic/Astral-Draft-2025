{"version":3,"file":"LeagueStatsView-DMbBchJ6.js","sources":["../../utils/stats.ts","../../views/LeagueStatsView.tsx"],"sourcesContent":["\nimport type { League } from '../types';\n\nexport interface TeamStats {\n    teamId: number;\n    teamName: string;\n    avatar: string;\n    totalPointsFor: number;\n    totalPointsAgainst: number;\n    highestWeek: { week: number, score: number };\n    lowestWeek: { week: number, score: number };\n}\n\nexport const calculateLeagueStats = (league: League) => {\n    const stats: TeamStats[] = league.teams.map(team => {\n        let totalPointsFor = 0;\n        let totalPointsAgainst = 0;\n        let highestWeek = { week: 0, score: 0 };\n        let lowestWeek = { week: 0, score: Infinity };\n\n        league.schedule.forEach(matchup => {\n            if (matchup.week >= league.currentWeek) return;\n\n            if (matchup.teamA.teamId === team.id) {\n                totalPointsFor += matchup.teamA.score;\n                totalPointsAgainst += matchup.teamB.score;\n                if (matchup.teamA.score > highestWeek.score) {\n                    highestWeek = { week: matchup.week, score: matchup.teamA.score };\n                }\n                if (matchup.teamA.score < lowestWeek.score) {\n                    lowestWeek = { week: matchup.week, score: matchup.teamA.score };\n                }\n            } else if (matchup.teamB.teamId === team.id) {\n                totalPointsFor += matchup.teamB.score;\n                totalPointsAgainst += matchup.teamA.score;\n                if (matchup.teamB.score > highestWeek.score) {\n                    highestWeek = { week: matchup.week, score: matchup.teamB.score };\n                }\n                if (matchup.teamB.score < lowestWeek.score) {\n                    lowestWeek = { week: matchup.week, score: matchup.teamB.score };\n                }\n            }\n        });\n\n        return {\n            teamId: team.id,\n            teamName: team.name,\n            avatar: team.avatar,\n            totalPointsFor,\n            totalPointsAgainst,\n            highestWeek,\n            lowestWeek: lowestWeek.score === Infinity ? { week: 0, score: 0 } : lowestWeek,\n        };\n    });\n\n    const leaderboards = {\n        pointsFor: [...stats].sort((a, b) => b.totalPointsFor - a.totalPointsFor),\n        pointsAgainst: [...stats].sort((a, b) => b.totalPointsAgainst - a.totalPointsAgainst),\n        highestSingleGame: [...stats].sort((a, b) => b.highestWeek.score - a.highestWeek.score),\n    };\n\n    return leaderboards;\n};\n","\nimport React from 'react';\nimport { useAppState } from '../contexts/AppContext';\nimport { useLeague } from '../hooks/useLeague';\nimport { Widget } from '../components/ui/Widget';\nimport ErrorDisplay from '../components/core/ErrorDisplay';\nimport { calculateLeagueStats } from '../utils/stats';\nimport type { TeamStats } from '../utils/stats';\nimport { Avatar } from '../components/ui/Avatar';\nimport { TrophyIcon } from '../components/icons/TrophyIcon';\nimport { FlameIcon } from '../components/icons/FlameIcon';\nimport { ShieldAlertIcon } from '../components/icons/ShieldAlertIcon';\n\nconst Leaderboard: React.FC<{ title: string; icon: React.ReactNode; data: TeamStats[]; valueKey: keyof TeamStats; subtext?: (stat: TeamStats) => string }> = ({ title, icon, data, valueKey, subtext }) => (\n    <Widget title={title} icon={icon}>\n        <div className=\"p-2 space-y-1\">\n            {data.map((stat, index) => (\n                <div key={stat.teamId} className={`flex items-center gap-3 p-2 rounded-md ${index === 0 ? 'bg-yellow-500/10' : 'bg-black/10'}`}>\n                    <span className=\"font-bold text-lg w-6 text-center\">{index + 1}</span>\n                    <Avatar avatar={stat.avatar} className=\"w-8 h-8 rounded-md\" />\n                    <div className=\"flex-grow\">\n                        <p className=\"font-semibold text-sm\">{stat.teamName}</p>\n                        {subtext && <p className=\"text-xs text-gray-400\">{subtext(stat)}</p>}\n                    </div>\n                    <p className=\"font-bold text-lg font-mono\">\n                        {(valueKey === 'highestWeek' ? stat.highestWeek.score : stat[valueKey] as number).toFixed(2)}\n                    </p>\n                </div>\n            ))}\n        </div>\n    </Widget>\n);\n\nconst LeagueStatsView: React.FC = () => {\n    const { dispatch } = useAppState();\n    const { league } = useLeague();\n    \n    if (!league || league.status === 'PRE_DRAFT' || league.status === 'DRAFTING') {\n        return <ErrorDisplay title=\"Not Available\" message=\"League stats will be available once the season starts.\" onRetry={() => dispatch({ type: 'SET_VIEW', payload: 'LEAGUE_HUB' })} />;\n    }\n\n    const leaderboards = calculateLeagueStats(league);\n\n    return (\n        <div className=\"w-full h-full flex flex-col p-4 sm:p-6 lg:p-8 overflow-y-auto\">\n            <header className=\"flex-shrink-0 flex justify-between items-center mb-6\">\n                <div>\n                    <h1 className=\"font-display text-3xl sm:text-4xl font-extrabold tracking-wider uppercase text-[var(--text-primary)]\">\n                        League Statistics\n                    </h1>\n                    <p className=\"text-sm text-[var(--text-secondary)] tracking-widest\">{league.name}</p>\n                </div>\n                <button onClick={() => dispatch({ type: 'SET_VIEW', payload: 'LEAGUE_HUB' })} className=\"px-4 py-2 bg-white/10 rounded-lg text-sm hover:bg-white/20\">\n                    Back to League Hub\n                </button>\n            </header>\n            <main className=\"flex-grow grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                <Leaderboard \n                    title=\"Total Points For\"\n                    icon={<TrophyIcon />}\n                    data={leaderboards.pointsFor}\n                    valueKey=\"totalPointsFor\"\n                />\n                <Leaderboard \n                    title=\"Best Week\"\n                    icon={<FlameIcon />}\n                    data={leaderboards.highestSingleGame}\n                    valueKey=\"highestWeek\"\n                    subtext={(stat) => `Week ${stat.highestWeek.week}`}\n                />\n                <Leaderboard \n                    title=\"Total Points Against\"\n                    icon={<ShieldAlertIcon />}\n                    data={leaderboards.pointsAgainst}\n                    valueKey=\"totalPointsAgainst\"\n                />\n            </main>\n        </div>\n    );\n};\n\nexport default LeagueStatsView;"],"names":["calculateLeagueStats","league","stats","team","totalPointsFor","totalPointsAgainst","highestWeek","lowestWeek","matchup","b","Leaderboard","title","icon","data","valueKey","subtext","jsxDEV","Widget","stat","index","this","Avatar","LeagueStatsView","dispatch","useAppState","useLeague","ErrorDisplay","leaderboards","TrophyIcon","FlameIcon","ShieldAlertIcon"],"mappings":"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"}