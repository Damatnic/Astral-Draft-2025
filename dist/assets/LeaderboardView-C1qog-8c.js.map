{"version":3,"file":"LeaderboardView-C1qog-8c.js","sources":["../../views/LeaderboardView.tsx"],"sourcesContent":["/**\n * Comprehensive Leaderboard View Component\n * Shows rankings, achievements, and performance using oracleScoringService\n */\n\nimport React from 'react';\nimport { useAppState } from '../contexts/AppContext';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { Widget } from '../components/ui/Widget';\nimport { Avatar } from '../components/ui/Avatar';\nimport { TrophyIcon } from '../components/icons/TrophyIcon';\nimport { StarIcon } from '../components/icons/StarIcon';\nimport { FlameIcon } from '../components/icons/FlameIcon';\nimport { CrownIcon } from '../components/icons/CrownIcon';\nimport { TrendingUpIcon } from '../components/icons/TrendingUpIcon';\nimport { type Achievement } from '../services/oracleScoringService';\n\ninterface LeaderboardFilter {\n  timeframe: 'weekly' | 'monthly' | 'season' | 'all-time';\n  category: 'overall' | 'accuracy' | 'streak' | 'consistency';\n  league?: string;\n}\n\ninterface LeaderboardTab {\n  id: string;\n  label: string;\n  icon: React.ReactNode;\n  description: string;\n}\n\ninterface LeaderboardEntry {\n  userId: string;\n  user: {\n    id: string;\n    name: string;\n    avatar: string;\n  };\n  totalPoints: number;\n  correctPredictions: number;\n  totalPredictions: number;\n  accuracy: number;\n  oracleBeats: number;\n  currentStreak: number;\n  longestStreak: number;\n  rank: number;\n  level: number;\n  consistency: number;\n  achievements: Achievement[];\n  streak: number;\n}\n\nconst LeaderboardView: React.FC = () => {\n  const { state } = useAppState();\n  const [activeTab, setActiveTab] = React.useState('overall');\n  const [filter, setFilter] = React.useState<LeaderboardFilter>({\n    timeframe: 'season',\n    category: 'overall'\n  });\n  const [leaderboardData, setLeaderboardData] = React.useState<LeaderboardEntry[]>([]);\n  const [achievements, setAchievements] = React.useState<(Achievement & { points: number; category: string })[]>([]);\n  const [isLoading, setIsLoading] = React.useState(true);\n\n  // Mock data generator for leaderboard\n  const generateMockLeaderboardData = (users: any[]): LeaderboardEntry[] => {\n    return users.map((user, index) => {\n      const baseScore = Math.max(50, 1000 - (index * 50) + Math.random() * 100);\n      const predictions = Math.floor(20 + Math.random() * 30);\n      const correct = Math.floor(predictions * (0.6 + Math.random() * 0.3));\n      \n      return {\n        userId: user.id,\n        user: {\n          id: user.id,\n          name: user.name,\n          avatar: user.avatar\n        },\n        totalPoints: Math.floor(baseScore),\n        correctPredictions: correct,\n        totalPredictions: predictions,\n        accuracy: (correct / predictions) * 100,\n        oracleBeats: Math.floor(Math.random() * 15),\n        currentStreak: Math.floor(Math.random() * 10) - 3,\n        longestStreak: Math.floor(Math.random() * 15),\n        rank: index + 1,\n        level: Math.floor(baseScore / 100),\n        consistency: 60 + Math.random() * 40,\n        achievements: [],\n        streak: Math.floor(Math.random() * 10) - 3\n      };\n    });\n  };\n\n  const generateMockAchievements = (): (Achievement & { points: number; category: string })[] => {\n    return [\n      {\n        id: 'first_prediction',\n        name: 'First Steps',\n        description: 'Made your first Oracle prediction',\n        icon: 'üë∂',\n        tier: 'bronze',\n        requirement: { type: 'prediction_count', value: 1 },\n        points: 50,\n        category: 'milestone'\n      },\n      {\n        id: 'accuracy_master',\n        name: 'Accuracy Master',\n        description: 'Achieved 80% accuracy over 20 predictions',\n        icon: 'üéØ',\n        tier: 'gold',\n        requirement: { type: 'accuracy', value: 80 },\n        points: 200,\n        category: 'accuracy'\n      },\n      {\n        id: 'streak_legend',\n        name: 'Streak Legend',\n        description: 'Achieved a 10-game winning streak',\n        icon: 'üî•',\n        tier: 'platinum',\n        requirement: { type: 'streak', value: 10 },\n        points: 300,\n        category: 'streak'\n      },\n      {\n        id: 'oracle_slayer',\n        name: 'Oracle Slayer',\n        description: 'Beat the Oracle 5 times in a row',\n        icon: '‚öîÔ∏è',\n        tier: 'legendary',\n        requirement: { type: 'oracle_beats', value: 5 },\n        points: 500,\n        category: 'accuracy'\n      },\n      {\n        id: 'perfect_week',\n        name: 'Perfect Week',\n        description: 'Got 100% accuracy for a full week',\n        icon: 'üíØ',\n        tier: 'platinum',\n        requirement: { type: 'perfect_week', value: 1 },\n        points: 400,\n        category: 'streak'\n      }\n    ];\n  };\n\n  const tabs: LeaderboardTab[] = [\n    {\n      id: 'overall',\n      label: 'Overall Rankings',\n      icon: <TrophyIcon />,\n      description: 'Complete leaderboard with all scoring categories'\n    },\n    {\n      id: 'weekly',\n      label: 'Weekly Champions',\n      icon: <CrownIcon />,\n      description: 'Top performers for the current week'\n    },\n    {\n      id: 'streaks',\n      label: 'Hot Streaks',\n      icon: <FlameIcon />,\n      description: 'Longest winning and losing streaks'\n    },\n    {\n      id: 'achievements',\n      label: 'Achievements',\n      icon: <StarIcon />,\n      description: 'Badges and milestones unlocked'\n    }\n  ];\n\n  // Load leaderboard data\n  React.useEffect(() => {\n    const loadLeaderboardData = async () => {\n      setIsLoading(true);\n      try {\n        // Get unique users from all leagues\n        const uniqueUsers = state.leagues\n          .flatMap(league => league.members)\n          .reduce((unique, user) => {\n            if (!unique.find(u => u.id === user.id)) {\n              unique.push(user);\n            }\n            return unique;\n          }, [] as any[])\n          .slice(0, 20);\n\n        // Generate mock leaderboard data\n        const leaderboard = generateMockLeaderboardData(uniqueUsers);\n        setLeaderboardData(leaderboard);\n\n        // Generate mock achievements\n        const mockAchievements = generateMockAchievements();\n        setAchievements(mockAchievements);\n      } catch (error) {\n        console.error('Failed to load leaderboard data:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadLeaderboardData();\n  }, [filter, state.leagues]);\n\n  const getRankIcon = (rank: number) => {\n    switch (rank) {\n      case 1:\n        return <div className=\"w-8 h-8 bg-gradient-to-br from-yellow-400 to-yellow-600 rounded-full flex items-center justify-center text-black font-bold text-sm\">1</div>;\n      case 2:\n        return <div className=\"w-8 h-8 bg-gradient-to-br from-gray-300 to-gray-500 rounded-full flex items-center justify-center text-black font-bold text-sm\">2</div>;\n      case 3:\n        return <div className=\"w-8 h-8 bg-gradient-to-br from-orange-400 to-orange-600 rounded-full flex items-center justify-center text-white font-bold text-sm\">3</div>;\n      default:\n        return <div className=\"w-8 h-8 bg-slate-700 rounded-full flex items-center justify-center text-white font-bold text-sm\">{rank}</div>;\n    }\n  };\n\n  const getScoreColor = (score: number, maxScore: number) => {\n    const percentage = (score / maxScore) * 100;\n    if (percentage >= 80) return 'text-green-400';\n    if (percentage >= 60) return 'text-yellow-400';\n    if (percentage >= 40) return 'text-orange-400';\n    return 'text-red-400';\n  };\n\n  const renderOverallLeaderboard = () => (\n    <div className=\"space-y-4\">\n      {/* Filters */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n        <select\n          value={filter.timeframe}\n          onChange={(e) => setFilter(prev => ({ ...prev, timeframe: e.target.value as LeaderboardFilter['timeframe'] }))}\n          className=\"form-input bg-slate-800 border-slate-600 text-white rounded-lg px-4 py-2\"\n        >\n          <option value=\"weekly\">This Week</option>\n          <option value=\"monthly\">This Month</option>\n          <option value=\"season\">This Season</option>\n          <option value=\"all-time\">All Time</option>\n        </select>\n        \n        <select\n          value={filter.category}\n          onChange={(e) => setFilter(prev => ({ ...prev, category: e.target.value as LeaderboardFilter['category'] }))}\n          className=\"form-input bg-slate-800 border-slate-600 text-white rounded-lg px-4 py-2\"\n        >\n          <option value=\"overall\">Overall Score</option>\n          <option value=\"accuracy\">Prediction Accuracy</option>\n          <option value=\"streak\">Current Streak</option>\n          <option value=\"consistency\">Consistency Rating</option>\n        </select>\n\n        {state.leagues.length > 1 && (\n          <select\n            value={filter.league || ''}\n            onChange={(e) => setFilter(prev => ({ ...prev, league: e.target.value || undefined }))}\n            className=\"form-input bg-slate-800 border-slate-600 text-white rounded-lg px-4 py-2\"\n          >\n            <option value=\"\">All Leagues</option>\n            {state.leagues.map(league => (\n              <option key={league.id} value={league.id}>{league.name}</option>\n            ))}\n          </select>\n        )}\n      </div>\n\n      {/* Top 3 Podium */}\n      {leaderboardData.length >= 3 && (\n        <div className=\"grid grid-cols-3 gap-4 mb-8\">\n          {/* 2nd Place */}\n          <motion.div \n            className=\"bg-gradient-to-br from-gray-600 to-gray-800 rounded-xl p-6 text-center relative\"\n            initial={{ y: 20, opacity: 0 }}\n            animate={{ y: 0, opacity: 1 }}\n            transition={{ delay: 0.1 }}\n          >\n            <div className=\"w-16 h-16 mx-auto mb-4 relative\">\n              <Avatar avatar={leaderboardData[1].user.avatar} className=\"w-16 h-16 rounded-full border-4 border-gray-300\" />\n              <div className=\"absolute -top-2 -right-2 w-8 h-8 bg-gradient-to-br from-gray-300 to-gray-500 rounded-full flex items-center justify-center text-black font-bold text-sm\">2</div>\n            </div>\n            <h3 className=\"font-bold text-white text-lg\">{leaderboardData[1].user.name}</h3>\n            <p className=\"text-gray-300 text-sm\">{leaderboardData[1].totalPoints} points</p>\n            <div className=\"mt-2 text-gray-400 text-xs\">\n              {leaderboardData[1].accuracy.toFixed(1)}% accuracy\n            </div>\n          </motion.div>\n\n          {/* 1st Place */}\n          <motion.div \n            className=\"bg-gradient-to-br from-yellow-500 to-yellow-700 rounded-xl p-6 text-center relative transform scale-105\"\n            initial={{ y: 20, opacity: 0 }}\n            animate={{ y: 0, opacity: 1 }}\n            transition={{ delay: 0.2 }}\n          >\n            <CrownIcon className=\"w-8 h-8 mx-auto mb-2 text-yellow-200\" />\n            <div className=\"w-20 h-20 mx-auto mb-4 relative\">\n              <Avatar avatar={leaderboardData[0].user.avatar} className=\"w-20 h-20 rounded-full border-4 border-yellow-300\" />\n              <div className=\"absolute -top-2 -right-2 w-10 h-10 bg-gradient-to-br from-yellow-400 to-yellow-600 rounded-full flex items-center justify-center text-black font-bold\">1</div>\n            </div>\n            <h3 className=\"font-bold text-black text-xl\">{leaderboardData[0].user.name}</h3>\n            <p className=\"text-black/80 font-semibold\">{leaderboardData[0].totalPoints} points</p>\n            <div className=\"mt-2 text-black/70 text-sm\">\n              {leaderboardData[0].accuracy.toFixed(1)}% accuracy\n            </div>\n          </motion.div>\n\n          {/* 3rd Place */}\n          <motion.div \n            className=\"bg-gradient-to-br from-orange-600 to-orange-800 rounded-xl p-6 text-center relative\"\n            initial={{ y: 20, opacity: 0 }}\n            animate={{ y: 0, opacity: 1 }}\n            transition={{ delay: 0.3 }}\n          >\n            <div className=\"w-16 h-16 mx-auto mb-4 relative\">\n              <Avatar avatar={leaderboardData[2].user.avatar} className=\"w-16 h-16 rounded-full border-4 border-orange-300\" />\n              <div className=\"absolute -top-2 -right-2 w-8 h-8 bg-gradient-to-br from-orange-400 to-orange-600 rounded-full flex items-center justify-center text-white font-bold text-sm\">3</div>\n            </div>\n            <h3 className=\"font-bold text-white text-lg\">{leaderboardData[2].user.name}</h3>\n            <p className=\"text-orange-200 text-sm\">{leaderboardData[2].totalPoints} points</p>\n            <div className=\"mt-2 text-orange-300 text-xs\">\n              {leaderboardData[2].accuracy.toFixed(1)}% accuracy\n            </div>\n          </motion.div>\n        </div>\n      )}\n\n      {/* Full Rankings Table */}\n      <Widget title=\"Complete Rankings\" className=\"overflow-hidden\">\n        <div className=\"space-y-2\">\n          {leaderboardData.map((scoreCard, index) => (\n            <motion.div\n              key={scoreCard.user.id}\n              className={`\n                flex items-center gap-4 p-4 rounded-lg transition-all duration-200\n                ${index < 3 ? 'bg-gradient-to-r from-slate-800 to-slate-700 border border-accent-500/30' : 'bg-slate-800/50 hover:bg-slate-800'}\n                ${scoreCard.user.id === state.user.id ? 'ring-2 ring-accent-500/50' : ''}\n              `}\n              initial={{ x: -20, opacity: 0 }}\n              animate={{ x: 0, opacity: 1 }}\n              transition={{ delay: index * 0.05 }}\n            >\n              {/* Rank */}\n              <div className=\"flex-shrink-0\">\n                {getRankIcon(index + 1)}\n              </div>\n\n              {/* User Info */}\n              <div className=\"flex items-center gap-3 flex-1\">\n                <Avatar avatar={scoreCard.user.avatar} className=\"w-10 h-10 rounded-full\" />\n                <div>\n                  <h4 className=\"font-semibold text-white text-sm\">\n                    {scoreCard.user.name}\n                    {scoreCard.user.id === state.user.id && (\n                      <span className=\"ml-2 text-xs text-accent-400\">(You)</span>\n                    )}\n                  </h4>\n                  <p className=\"text-slate-400 text-xs\">\n                    {scoreCard.achievements.length} achievements\n                  </p>\n                </div>\n              </div>\n\n              {/* Stats */}\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-center flex-1\">\n                <div>\n                  <p className={`font-bold ${getScoreColor(scoreCard.totalPoints, 1000)}`}>\n                    {scoreCard.totalPoints}\n                  </p>\n                  <p className=\"text-xs text-slate-400\">Total Score</p>\n                </div>\n                <div>\n                  <p className=\"font-bold text-blue-400\">\n                    {scoreCard.accuracy.toFixed(1)}%\n                  </p>\n                  <p className=\"text-xs text-slate-400\">Accuracy</p>\n                </div>\n                <div>\n                  <p className=\"font-bold text-purple-400\">\n                    {scoreCard.streak}\n                  </p>\n                  <p className=\"text-xs text-slate-400\">Streak</p>\n                </div>\n                <div className=\"hidden md:block\">\n                  <p className=\"font-bold text-green-400\">\n                    {scoreCard.consistency.toFixed(1)}\n                  </p>\n                  <p className=\"text-xs text-slate-400\">Consistency</p>\n                </div>\n              </div>\n\n              {/* Trend Indicator */}\n              <div className=\"flex-shrink-0\">\n                <TrendingUpIcon className=\"w-5 h-5 text-green-400\" />\n              </div>\n            </motion.div>\n          ))}\n        </div>\n      </Widget>\n    </div>\n  );\n\n  const renderWeeklyChampions = () => (\n    <Widget title=\"Weekly Champions\" className=\"space-y-4\">\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        {[...Array(12)].map((_, weekIndex) => {\n          const week = weekIndex + 1;\n          const champion = leaderboardData[weekIndex % leaderboardData.length];\n          if (!champion) return null;\n\n          return (\n            <motion.div\n              key={week}\n              className=\"bg-slate-800 rounded-lg p-4 border border-slate-700\"\n              initial={{ scale: 0.9, opacity: 0 }}\n              animate={{ scale: 1, opacity: 1 }}\n              transition={{ delay: weekIndex * 0.1 }}\n            >\n              <div className=\"flex items-center gap-3 mb-3\">\n                <div className=\"w-8 h-8 bg-gradient-to-br from-purple-500 to-blue-500 rounded-full flex items-center justify-center text-white font-bold text-sm\">\n                  {week}\n                </div>\n                <div>\n                  <h4 className=\"font-semibold text-white text-sm\">Week {week}</h4>\n                  <p className=\"text-slate-400 text-xs\">Champion</p>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center gap-3\">\n                <Avatar avatar={champion.user.avatar} className=\"w-12 h-12 rounded-full\" />\n                <div>\n                  <h5 className=\"font-semibold text-white\">{champion.user.name}</h5>\n                  <p className=\"text-accent-400 text-sm font-medium\">\n                    {Math.floor(champion.totalPoints / 10)} pts\n                  </p>\n                </div>\n              </div>\n            </motion.div>\n          );\n        })}\n      </div>\n    </Widget>\n  );\n\n  const renderStreaks = () => (\n    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n      <Widget title=\"üî• Hot Streaks\" className=\"space-y-3\">\n        {leaderboardData\n          .filter(user => user.streak > 0)\n          .sort((a, b) => b.streak - a.streak)\n          .slice(0, 10)\n          .map((scoreCard, index) => (\n            <div key={scoreCard.user.id} className=\"flex items-center gap-3 p-3 bg-slate-800 rounded-lg\">\n              <div className=\"w-8 h-8 bg-gradient-to-br from-red-500 to-orange-500 rounded-full flex items-center justify-center text-white font-bold text-sm\">\n                {index + 1}\n              </div>\n              <Avatar avatar={scoreCard.user.avatar} className=\"w-8 h-8 rounded-full\" />\n              <div className=\"flex-1\">\n                <h4 className=\"font-semibold text-white text-sm\">{scoreCard.user.name}</h4>\n                <p className=\"text-orange-400 text-xs\">{scoreCard.streak} game streak</p>\n              </div>\n              <FlameIcon className=\"w-5 h-5 text-orange-400\" />\n            </div>\n          ))}\n      </Widget>\n\n      <Widget title=\"‚ùÑÔ∏è Cold Streaks\" className=\"space-y-3\">\n        {leaderboardData\n          .filter(user => user.streak < 0)\n          .sort((a, b) => a.streak - b.streak)\n          .slice(0, 10)\n          .map((scoreCard, index) => (\n            <div key={scoreCard.user.id} className=\"flex items-center gap-3 p-3 bg-slate-800 rounded-lg\">\n              <div className=\"w-8 h-8 bg-gradient-to-br from-blue-500 to-cyan-500 rounded-full flex items-center justify-center text-white font-bold text-sm\">\n                {index + 1}\n              </div>\n              <Avatar avatar={scoreCard.user.avatar} className=\"w-8 h-8 rounded-full\" />\n              <div className=\"flex-1\">\n                <h4 className=\"font-semibold text-white text-sm\">{scoreCard.user.name}</h4>\n                <p className=\"text-blue-400 text-xs\">{Math.abs(scoreCard.streak)} game streak</p>\n              </div>\n              <div className=\"text-blue-400 text-lg\">‚ùÑÔ∏è</div>\n            </div>\n          ))}\n      </Widget>\n    </div>\n  );\n\n  const renderAchievements = () => (\n    <Widget title=\"Achievement Gallery\" className=\"space-y-6\">\n      {/* Recent Achievements */}\n      <div className=\"mb-6\">\n        <h3 className=\"text-lg font-semibold text-white mb-4\">üèÜ Recent Unlocks</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {achievements.slice(0, 6).map((achievement, index) => (\n            <motion.div\n              key={`${achievement.id}-${index}`}\n              className=\"bg-gradient-to-br from-slate-800 to-slate-900 rounded-lg p-4 border border-accent-500/30\"\n              initial={{ y: 20, opacity: 0 }}\n              animate={{ y: 0, opacity: 1 }}\n              transition={{ delay: index * 0.1 }}\n            >\n              <div className=\"text-center\">\n                <div className=\"w-16 h-16 mx-auto mb-3 bg-gradient-to-br from-yellow-400 to-orange-500 rounded-full flex items-center justify-center text-2xl\">\n                  {achievement.icon}\n                </div>\n                <h4 className=\"font-bold text-white text-sm mb-1\">{achievement.name}</h4>\n                <p className=\"text-slate-400 text-xs mb-2\">{achievement.description}</p>\n                <p className=\"text-accent-400 text-xs font-medium\">+{achievement.points} points</p>\n              </div>\n            </motion.div>\n          ))}\n        </div>\n      </div>\n\n      {/* Achievement Categories */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <div>\n          <h3 className=\"text-lg font-semibold text-white mb-4\">üéØ Accuracy Masters</h3>\n          <div className=\"space-y-2\">\n            {achievements\n              .filter(ach => ach.category === 'accuracy')\n              .slice(0, 5)\n              .map((achievement, index) => (\n                <div key={achievement.id} className=\"flex items-center gap-3 p-3 bg-slate-800 rounded-lg\">\n                  <div className=\"text-2xl\">{achievement.icon}</div>\n                  <div className=\"flex-1\">\n                    <h4 className=\"font-semibold text-white text-sm\">{achievement.name}</h4>\n                    <p className=\"text-slate-400 text-xs\">{achievement.description}</p>\n                  </div>\n                  <span className=\"text-yellow-400 text-sm font-bold\">+{achievement.points}</span>\n                </div>\n              ))}\n          </div>\n        </div>\n\n        <div>\n          <h3 className=\"text-lg font-semibold text-white mb-4\">üî• Streak Legends</h3>\n          <div className=\"space-y-2\">\n            {achievements\n              .filter(ach => ach.category === 'streak')\n              .slice(0, 5)\n              .map((achievement, index) => (\n                <div key={achievement.id} className=\"flex items-center gap-3 p-3 bg-slate-800 rounded-lg\">\n                  <div className=\"text-2xl\">{achievement.icon}</div>\n                  <div className=\"flex-1\">\n                    <h4 className=\"font-semibold text-white text-sm\">{achievement.name}</h4>\n                    <p className=\"text-slate-400 text-xs\">{achievement.description}</p>\n                  </div>\n                  <span className=\"text-yellow-400 text-sm font-bold\">+{achievement.points}</span>\n                </div>\n              ))}\n          </div>\n        </div>\n      </div>\n    </Widget>\n  );\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"animate-pulse space-y-6\">\n          <div className=\"h-8 bg-slate-700 rounded w-1/3\"></div>\n          <div className=\"grid grid-cols-3 gap-4\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"h-40 bg-slate-700 rounded-xl\"></div>\n            ))}\n          </div>\n          <div className=\"space-y-4\">\n            {[...Array(5)].map((_, i) => (\n              <div key={i} className=\"h-16 bg-slate-700 rounded-lg\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 max-w-7xl\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <h1 className=\"text-4xl font-bold text-white mb-2 font-display\">\n          Oracle Leaderboard\n        </h1>\n        <p className=\"text-slate-400\">\n          Track your performance and compete against the best predictors\n        </p>\n      </div>\n\n      {/* Tabs */}\n      <div className=\"flex flex-wrap gap-2 mb-8 border-b border-slate-700\">\n        {tabs.map((tab) => (\n          <button\n            key={tab.id}\n            onClick={() => setActiveTab(tab.id)}\n            className={`\n              flex items-center gap-2 px-4 py-3 rounded-t-lg font-medium transition-all duration-200\n              ${activeTab === tab.id\n                ? 'bg-accent-500/20 text-accent-400 border-b-2 border-accent-500'\n                : 'text-slate-400 hover:text-white hover:bg-slate-800/50'\n              }\n            `}\n          >\n            <div className=\"w-5 h-5\">{tab.icon}</div>\n            <span className=\"hidden sm:inline\">{tab.label}</span>\n          </button>\n        ))}\n      </div>\n\n      {/* Tab Content */}\n      <AnimatePresence mode=\"wait\">\n        <motion.div\n          key={activeTab}\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ opacity: 1, y: 0 }}\n          exit={{ opacity: 0, y: -20 }}\n          transition={{ duration: 0.3 }}\n        >\n          {activeTab === 'overall' && renderOverallLeaderboard()}\n          {activeTab === 'weekly' && renderWeeklyChampions()}\n          {activeTab === 'streaks' && renderStreaks()}\n          {activeTab === 'achievements' && renderAchievements()}\n        </motion.div>\n      </AnimatePresence>\n    </div>\n  );\n};\n\nexport default LeaderboardView;\n"],"names":["LeaderboardView","state","useAppState","activeTab","setActiveTab","React","filter","setFilter","leaderboardData","setLeaderboardData","achievements","setAchievements","isLoading","setIsLoading","generateMockLeaderboardData","users","user","index","baseScore","predictions","correct","generateMockAchievements","tabs","TrophyIcon","this","CrownIcon","FlameIcon","StarIcon","uniqueUsers","league","unique","u","leaderboard","mockAchievements","error","getRankIcon","rank","jsxDEV","getScoreColor","score","maxScore","percentage","renderOverallLeaderboard","e","prev","motion","Avatar","Widget","scoreCard","TrendingUpIcon","renderWeeklyChampions","_","weekIndex","week","champion","renderStreaks","b","renderAchievements","achievement","ach","i","tab","AnimatePresence"],"mappings":"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"}