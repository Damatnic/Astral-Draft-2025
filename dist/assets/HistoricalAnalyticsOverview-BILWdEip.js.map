{"version":3,"file":"HistoricalAnalyticsOverview-BILWdEip.js","sources":["../../services/oracleHistoricalAnalyticsService.ts","../../hooks/useHistoricalAnalytics.ts","../../components/analytics/AnalyticsComponents.tsx","../../views/HistoricalAnalyticsOverview.tsx"],"sourcesContent":["/**\n * Oracle Historical Analytics Service\n * Advanced historical prediction tracking, trend analysis, and performance metrics\n * Extends the base OracleAnalyticsService with comprehensive historical data management\n */\n\nimport { OracleAnalytics, AccuracyTrend, PredictionTypeStats, UserInsight } from './oracleAnalyticsService';\nimport { OraclePrediction, PredictionType } from './oraclePredictionService';\n\nexport interface HistoricalPredictionRecord {\n    id: string;\n    predictionId: string;\n    week: number;\n    season: string;\n    type: PredictionType;\n    question: string;\n    oracleChoice: number;\n    confidence: number;\n    actualResult?: number;\n    isCorrect?: boolean;\n    userPrediction?: number;\n    userCorrect?: boolean;\n    recordedAt: string;\n    completedAt?: string;\n    reasoning: string;\n    dataPoints: string[];\n    metadata: PredictionMetadata;\n}\n\nexport interface PredictionMetadata {\n    gameWeather?: string;\n    injuryReport?: string[];\n    lineMovement?: number;\n    publicBetting?: number;\n    expertConsensus?: number;\n    marketSentiment?: 'bullish' | 'bearish' | 'neutral';\n    contextualFactors?: string[];\n}\n\nexport interface HistoricalTrendAnalysis {\n    timeframe: 'weekly' | 'monthly' | 'seasonal' | 'yearly';\n    accuracyTrend: TrendPoint[];\n    confidenceTrend: TrendPoint[];\n    typesPerformance: TypePerformanceTrend[];\n    seasonalPatterns: SeasonalPattern[];\n    improvementMetrics: ImprovementMetrics;\n    predictionVolume: VolumeMetrics;\n}\n\nexport interface TrendPoint {\n    period: string;\n    value: number;\n    count: number;\n    change?: number;\n    percentChange?: number;\n}\n\nexport interface TypePerformanceTrend {\n    type: PredictionType;\n    periods: TrendPoint[];\n    overallTrend: 'improving' | 'declining' | 'stable';\n    trendStrength: number;\n    bestPeriod: string;\n    worstPeriod: string;\n}\n\nexport interface SeasonalPattern {\n    pattern: 'early_season' | 'mid_season' | 'late_season' | 'playoffs';\n    averageAccuracy: number;\n    predictionVolume: number;\n    confidenceLevel: number;\n    strongestTypes: PredictionType[];\n    insights: string[];\n}\n\nexport interface ImprovementMetrics {\n    accuracyImprovement: number;\n    confidenceCalibration: number;\n    streakLength: number;\n    consistencyScore: number;\n    adaptabilityIndex: number;\n    learningVelocity: number;\n}\n\nexport interface VolumeMetrics {\n    totalPredictions: number;\n    dailyAverage: number;\n    weeklyAverage: number;\n    peakPeriods: string[];\n    lowPeriods: string[];\n    volumeTrend: 'increasing' | 'decreasing' | 'stable';\n}\n\nexport interface AccuracyBreakdown {\n    overall: AccuracyStats;\n    byType: Record<PredictionType, AccuracyStats>;\n    byConfidence: Record<string, AccuracyStats>;\n    byTimeframe: Record<string, AccuracyStats>;\n    byWeek: Record<number, AccuracyStats>;\n    contextual: ContextualAccuracy[];\n}\n\nexport interface AccuracyStats {\n    accuracy: number;\n    totalPredictions: number;\n    correctPredictions: number;\n    averageConfidence: number;\n    confidenceRange: [number, number];\n    calibrationScore: number;\n}\n\nexport interface ContextualAccuracy {\n    context: string;\n    factor: string;\n    accuracy: number;\n    sampleSize: number;\n    significance: number;\n}\n\nexport interface PerformanceComparison {\n    timeframePrevious: string;\n    timeframeCurrent: string;\n    accuracyChange: number;\n    confidenceChange: number;\n    volumeChange: number;\n    typeChanges: Record<PredictionType, number>;\n    significantImprovements: string[];\n    areasOfConcern: string[];\n}\n\nexport interface AdvancedInsights {\n    streakAnalysis: StreakAnalysis;\n    confidenceAnalysis: ConfidenceAnalysis;\n    typeSpecialization: TypeSpecializationAnalysis;\n    contextualFactors: ContextualFactorAnalysis;\n    predictivePatterns: PredictivePatterns;\n    recommendations: AdvancedRecommendation[];\n}\n\nexport interface StreakAnalysis {\n    currentStreak: number;\n    longestStreak: number;\n    streakType: 'correct' | 'incorrect' | 'mixed';\n    streakProbability: number;\n    breakPatterns: string[];\n    maintainanceStrategies: string[];\n}\n\nexport interface ConfidenceAnalysis {\n    overconfidenceIndex: number;\n    underconfidenceIndex: number;\n    calibrationCurve: CalibrationPoint[];\n    optimalConfidenceRange: [number, number];\n    confidenceDistribution: Record<string, number>;\n    reliabilityScore: number;\n}\n\nexport interface CalibrationPoint {\n    confidenceRange: [number, number];\n    expectedAccuracy: number;\n    actualAccuracy: number;\n    sampleSize: number;\n}\n\nexport interface TypeSpecializationAnalysis {\n    strongestTypes: PredictionType[];\n    weakestTypes: PredictionType[];\n    specializationIndex: number;\n    consistencyAcrossTypes: number;\n    typeProgressions: Record<PredictionType, number>;\n    crossTypeCorrelations: Record<string, number>;\n}\n\nexport interface ContextualFactorAnalysis {\n    weatherImpact: FactorImpact;\n    injuryImpact: FactorImpact;\n    lineMovementImpact: FactorImpact;\n    publicBettingImpact: FactorImpact;\n    sentimentImpact: FactorImpact;\n    combinedFactorEffects: CombinedFactorEffect[];\n}\n\nexport interface FactorImpact {\n    positiveCorrelation: boolean;\n    impactStrength: number;\n    significanceLevel: number;\n    optimalConditions: string[];\n    avoidanceConditions: string[];\n}\n\nexport interface CombinedFactorEffect {\n    factors: string[];\n    combinedImpact: number;\n    frequency: number;\n    accuracy: number;\n    recommendation: string;\n}\n\nexport interface PredictivePatterns {\n    timeBasedPatterns: TimePattern[];\n    sequencePatterns: SequencePattern[];\n    contextPatterns: ContextPattern[];\n    emergingPatterns: EmergingPattern[];\n}\n\nexport interface TimePattern {\n    pattern: string;\n    frequency: number;\n    accuracy: number;\n    confidence: number;\n    nextOccurrence?: string;\n}\n\nexport interface SequencePattern {\n    sequence: string[];\n    frequency: number;\n    nextLikelyOutcome: string;\n    confidence: number;\n}\n\nexport interface ContextPattern {\n    context: Record<string, any>;\n    accuracy: number;\n    frequency: number;\n    significance: number;\n}\n\nexport interface EmergingPattern {\n    pattern: string;\n    strength: number;\n    recency: number;\n    potential: number;\n    description: string;\n}\n\nexport interface AdvancedRecommendation {\n    type: 'STRATEGY' | 'FOCUS_AREA' | 'IMPROVEMENT' | 'WARNING' | 'OPPORTUNITY';\n    priority: 'high' | 'medium' | 'low';\n    title: string;\n    description: string;\n    actionItems: string[];\n    expectedImpact: number;\n    timeframe: string;\n    metrics: string[];\n    supportingData: any;\n}\n\nclass OracleHistoricalAnalyticsService {\n    private readonly HISTORICAL_DATA_KEY = 'oracleHistoricalData';\n    private readonly TREND_CACHE_KEY = 'oracleTrendCache';\n    private readonly CACHE_DURATION = 1000 * 60 * 60; // 1 hour\n\n    /**\n     * Store historical prediction record\n     */\n    async storeHistoricalRecord(\n        prediction: OraclePrediction,\n        actualResult?: number,\n        userPrediction?: number,\n        metadata?: Partial<PredictionMetadata>\n    ): Promise<void> {\n        const records = await this.getHistoricalRecords();\n        \n        const historicalRecord: HistoricalPredictionRecord = {\n            id: `hist_${prediction.id}_${Date.now()}`,\n            predictionId: prediction.id,\n            week: prediction.week,\n            season: new Date().getFullYear().toString(),\n            type: prediction.type,\n            question: prediction.question,\n            oracleChoice: prediction.oracleChoice,\n            confidence: prediction.confidence,\n            actualResult,\n            isCorrect: actualResult !== undefined ? prediction.oracleChoice === actualResult : undefined,\n            userPrediction,\n            userCorrect: userPrediction !== undefined && actualResult !== undefined \n                ? userPrediction === actualResult : undefined,\n            recordedAt: prediction.timestamp,\n            completedAt: actualResult !== undefined ? new Date().toISOString() : undefined,\n            reasoning: prediction.reasoning,\n            dataPoints: prediction.dataPoints,\n            metadata: {\n                gameWeather: metadata?.gameWeather,\n                injuryReport: metadata?.injuryReport || [],\n                lineMovement: metadata?.lineMovement,\n                publicBetting: metadata?.publicBetting,\n                expertConsensus: metadata?.expertConsensus,\n                marketSentiment: metadata?.marketSentiment,\n                contextualFactors: metadata?.contextualFactors || []\n            }\n        };\n\n        const existingIndex = records.findIndex(r => r.predictionId === prediction.id);\n        if (existingIndex >= 0) {\n            records[existingIndex] = historicalRecord;\n        } else {\n            records.push(historicalRecord);\n        }\n\n        await this.storeHistoricalRecords(records);\n        await this.invalidateTrendCache();\n    }\n\n    /**\n     * Get comprehensive historical trend analysis\n     */\n    async getHistoricalTrendAnalysis(\n        timeframe: 'weekly' | 'monthly' | 'seasonal' | 'yearly' = 'monthly'\n    ): Promise<HistoricalTrendAnalysis> {\n        const cacheKey = `${this.TREND_CACHE_KEY}_${timeframe}`;\n        const cached = this.getCachedData(cacheKey);\n        if (cached) return cached;\n\n        const records = await this.getCompletedHistoricalRecords();\n        \n        const analysis: HistoricalTrendAnalysis = {\n            timeframe,\n            accuracyTrend: await this.calculateAccuracyTrend(records, timeframe),\n            confidenceTrend: await this.calculateConfidenceTrend(records, timeframe),\n            typesPerformance: await this.calculateTypePerformanceTrends(records, timeframe),\n            seasonalPatterns: await this.analyzeSeasonalPatterns(records),\n            improvementMetrics: await this.calculateImprovementMetrics(records),\n            predictionVolume: await this.calculateVolumeMetrics(records, timeframe)\n        };\n\n        this.setCachedData(cacheKey, analysis);\n        return analysis;\n    }\n\n    /**\n     * Get detailed accuracy breakdown\n     */\n    async getAccuracyBreakdown(): Promise<AccuracyBreakdown> {\n        const records = await this.getCompletedHistoricalRecords();\n        \n        return {\n            overall: this.calculateAccuracyStats(records),\n            byType: this.calculateAccuracyByType(records),\n            byConfidence: this.calculateAccuracyByConfidence(records),\n            byTimeframe: this.calculateAccuracyByTimeframe(records),\n            byWeek: this.calculateAccuracyByWeek(records),\n            contextual: await this.calculateContextualAccuracy(records)\n        };\n    }\n\n    /**\n     * Compare performance between timeframes\n     */\n    async getPerformanceComparison(\n        currentPeriod: string,\n        previousPeriod: string\n    ): Promise<PerformanceComparison> {\n        const records = await this.getCompletedHistoricalRecords();\n        \n        const currentRecords = this.filterRecordsByPeriod(records, currentPeriod);\n        const previousRecords = this.filterRecordsByPeriod(records, previousPeriod);\n\n        const currentStats = this.calculateAccuracyStats(currentRecords);\n        const previousStats = this.calculateAccuracyStats(previousRecords);\n\n        return {\n            timeframePrevious: previousPeriod,\n            timeframeCurrent: currentPeriod,\n            accuracyChange: currentStats.accuracy - previousStats.accuracy,\n            confidenceChange: currentStats.averageConfidence - previousStats.averageConfidence,\n            volumeChange: currentRecords.length - previousRecords.length,\n            typeChanges: this.calculateTypeChanges(currentRecords, previousRecords),\n            significantImprovements: this.identifySignificantImprovements(currentStats, previousStats),\n            areasOfConcern: this.identifyAreasOfConcern(currentStats, previousStats)\n        };\n    }\n\n    /**\n     * Generate advanced insights from historical data\n     */\n    async getAdvancedInsights(): Promise<AdvancedInsights> {\n        const records = await this.getCompletedHistoricalRecords();\n        \n        return {\n            streakAnalysis: await this.analyzeStreaks(records),\n            confidenceAnalysis: await this.analyzeConfidence(records),\n            typeSpecialization: await this.analyzeTypeSpecialization(records),\n            contextualFactors: await this.analyzeContextualFactors(records),\n            predictivePatterns: await this.analyzePredictivePatterns(records),\n            recommendations: await this.generateAdvancedRecommendations(records)\n        };\n    }\n\n    /**\n     * Export historical data for analysis\n     */\n    async exportHistoricalData(\n        format: 'json' | 'csv' = 'json',\n        filters?: {\n            startDate?: string;\n            endDate?: string;\n            types?: PredictionType[];\n            minConfidence?: number;\n        }\n    ): Promise<string> {\n        let records = await this.getHistoricalRecords();\n        \n        // Apply filters\n        if (filters) {\n            records = records.filter(record => {\n                if (filters.startDate && record.recordedAt < filters.startDate) return false;\n                if (filters.endDate && record.recordedAt > filters.endDate) return false;\n                if (filters.types && !filters.types.includes(record.type)) return false;\n                if (filters.minConfidence && record.confidence < filters.minConfidence) return false;\n                return true;\n            });\n        }\n\n        if (format === 'csv') {\n            return this.convertToCSV(records);\n        }\n        \n        return JSON.stringify(records, null, 2);\n    }\n\n    /**\n     * Import historical data from external source\n     */\n    async importHistoricalData(\n        data: string,\n        format: 'json' | 'csv' = 'json',\n        merge: boolean = true\n    ): Promise<{ imported: number; errors: string[] }> {\n        try {\n            let newRecords: HistoricalPredictionRecord[];\n            \n            if (format === 'csv') {\n                newRecords = this.parseCSV(data);\n            } else {\n                newRecords = JSON.parse(data);\n            }\n\n            const errors: string[] = [];\n            const validRecords: HistoricalPredictionRecord[] = [];\n\n            // Validate records\n            for (const record of newRecords) {\n                const validation = this.validateHistoricalRecord(record);\n                if (validation.isValid) {\n                    validRecords.push(record);\n                } else {\n                    errors.push(`Invalid record ${record.id}: ${validation.errors.join(', ')}`);\n                }\n            }\n\n            if (merge) {\n                const existingRecords = await this.getHistoricalRecords();\n                const mergedRecords = this.mergeRecords(existingRecords, validRecords);\n                await this.storeHistoricalRecords(mergedRecords);\n            } else {\n                await this.storeHistoricalRecords(validRecords);\n            }\n\n            await this.invalidateTrendCache();\n\n            return {\n                imported: validRecords.length,\n                errors\n            };\n        } catch (error) {\n            throw new Error(`Import failed: ${error instanceof Error ? error.message : String(error)}`);\n        }\n    }\n\n    // Private helper methods\n    private async getHistoricalRecords(): Promise<HistoricalPredictionRecord[]> {\n        try {\n            const data = localStorage.getItem(this.HISTORICAL_DATA_KEY);\n            return data ? JSON.parse(data) : [];\n        } catch (error) {\n            console.error('Error loading historical records:', error);\n            return [];\n        }\n    }\n\n    private async getCompletedHistoricalRecords(): Promise<HistoricalPredictionRecord[]> {\n        const records = await this.getHistoricalRecords();\n        return records.filter(record => record.actualResult !== undefined);\n    }\n\n    private async storeHistoricalRecords(records: HistoricalPredictionRecord[]): Promise<void> {\n        try {\n            localStorage.setItem(this.HISTORICAL_DATA_KEY, JSON.stringify(records));\n        } catch (error) {\n            console.error('Error storing historical records:', error);\n            throw new Error('Failed to store historical data');\n        }\n    }\n\n    private getCachedData(key: string): any {\n        try {\n            const cached = localStorage.getItem(key);\n            if (!cached) return null;\n            \n            const { data, timestamp } = JSON.parse(cached);\n            if (Date.now() - timestamp > this.CACHE_DURATION) {\n                localStorage.removeItem(key);\n                return null;\n            }\n            \n            return data;\n        } catch {\n            return null;\n        }\n    }\n\n    private setCachedData(key: string, data: any): void {\n        try {\n            const cacheItem = {\n                data,\n                timestamp: Date.now()\n            };\n            localStorage.setItem(key, JSON.stringify(cacheItem));\n        } catch (error) {\n            console.warn('Failed to cache data:', error);\n        }\n    }\n\n    private async invalidateTrendCache(): Promise<void> {\n        const keys = ['weekly', 'monthly', 'seasonal', 'yearly'];\n        keys.forEach(timeframe => {\n            localStorage.removeItem(`${this.TREND_CACHE_KEY}_${timeframe}`);\n        });\n    }\n\n    private async calculateAccuracyTrend(\n        records: HistoricalPredictionRecord[],\n        timeframe: string\n    ): Promise<TrendPoint[]> {\n        const groupedRecords = this.groupRecordsByTimeframe(records, timeframe);\n        const trendPoints: TrendPoint[] = [];\n\n        Object.entries(groupedRecords).forEach(([period, periodRecords]) => {\n            const correct = periodRecords.filter(r => r.isCorrect).length;\n            const total = periodRecords.length;\n            const accuracy = total > 0 ? correct / total : 0;\n\n            trendPoints.push({\n                period,\n                value: accuracy,\n                count: total\n            });\n        });\n\n        // Calculate changes\n        for (let i = 1; i < trendPoints.length; i++) {\n            const current = trendPoints[i];\n            const previous = trendPoints[i - 1];\n            current.change = current.value - previous.value;\n            current.percentChange = previous.value > 0 \n                ? (current.change / previous.value) * 100 \n                : 0;\n        }\n\n        return trendPoints.sort((a, b) => a.period.localeCompare(b.period));\n    }\n\n    private async calculateConfidenceTrend(\n        records: HistoricalPredictionRecord[],\n        timeframe: string\n    ): Promise<TrendPoint[]> {\n        const groupedRecords = this.groupRecordsByTimeframe(records, timeframe);\n        const trendPoints: TrendPoint[] = [];\n\n        Object.entries(groupedRecords).forEach(([period, periodRecords]) => {\n            const avgConfidence = periodRecords.reduce((sum, r) => sum + r.confidence, 0) / periodRecords.length;\n\n            trendPoints.push({\n                period,\n                value: avgConfidence,\n                count: periodRecords.length\n            });\n        });\n\n        return trendPoints.sort((a, b) => a.period.localeCompare(b.period));\n    }\n\n    private groupRecordsByTimeframe(\n        records: HistoricalPredictionRecord[],\n        timeframe: string\n    ): Record<string, HistoricalPredictionRecord[]> {\n        const grouped: Record<string, HistoricalPredictionRecord[]> = {};\n\n        records.forEach(record => {\n            const date = new Date(record.recordedAt);\n            let period: string;\n\n            switch (timeframe) {\n                case 'weekly':\n                    period = `${date.getFullYear()}-W${this.getWeekNumber(date)}`;\n                    break;\n                case 'monthly':\n                    period = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\n                    break;\n                case 'seasonal':\n                    period = `${date.getFullYear()}-${this.getSeason(date)}`;\n                    break;\n                case 'yearly':\n                    period = date.getFullYear().toString();\n                    break;\n                default:\n                    period = date.toISOString().split('T')[0];\n            }\n\n            if (!grouped[period]) {\n                grouped[period] = [];\n            }\n            grouped[period].push(record);\n        });\n\n        return grouped;\n    }\n\n    private getWeekNumber(date: Date): number {\n        const firstDayOfYear = new Date(date.getFullYear(), 0, 1);\n        const pastDaysOfYear = (date.getTime() - firstDayOfYear.getTime()) / 86400000;\n        return Math.ceil((pastDaysOfYear + firstDayOfYear.getDay() + 1) / 7);\n    }\n\n    private getSeason(date: Date): string {\n        const month = date.getMonth() + 1;\n        if (month >= 9 && month <= 12) return 'Fall';\n        if (month >= 1 && month <= 2) return 'Winter';\n        if (month >= 3 && month <= 5) return 'Spring';\n        return 'Summer';\n    }\n\n    private calculateAccuracyStats(records: HistoricalPredictionRecord[]): AccuracyStats {\n        const correctPredictions = records.filter(r => r.isCorrect).length;\n        const totalPredictions = records.length;\n        const accuracy = totalPredictions > 0 ? correctPredictions / totalPredictions : 0;\n        \n        const confidences = records.map(r => r.confidence);\n        const averageConfidence = confidences.reduce((sum, c) => sum + c, 0) / confidences.length || 0;\n        const confidenceRange: [number, number] = [\n            Math.min(...confidences) || 0,\n            Math.max(...confidences) || 0\n        ];\n\n        const calibrationScore = this.calculateCalibrationScore(records);\n\n        return {\n            accuracy,\n            totalPredictions,\n            correctPredictions,\n            averageConfidence,\n            confidenceRange,\n            calibrationScore\n        };\n    }\n\n    private calculateCalibrationScore(records: HistoricalPredictionRecord[]): number {\n        // Group predictions by confidence ranges\n        const confidenceBuckets: Record<string, HistoricalPredictionRecord[]> = {};\n        \n        records.forEach(record => {\n            const bucket = Math.floor(record.confidence / 10) * 10;\n            const bucketKey = `${bucket}-${bucket + 10}`;\n            if (!confidenceBuckets[bucketKey]) {\n                confidenceBuckets[bucketKey] = [];\n            }\n            confidenceBuckets[bucketKey].push(record);\n        });\n\n        // Calculate calibration error\n        let totalError = 0;\n        let totalRecords = 0;\n\n        Object.entries(confidenceBuckets).forEach(([bucket, bucketRecords]) => {\n            const avgConfidence = bucketRecords.reduce((sum, r) => sum + r.confidence, 0) / bucketRecords.length;\n            const actualAccuracy = bucketRecords.filter(r => r.isCorrect).length / bucketRecords.length;\n            const error = Math.abs((avgConfidence / 100) - actualAccuracy);\n            \n            totalError += error * bucketRecords.length;\n            totalRecords += bucketRecords.length;\n        });\n\n        const calibrationError = totalRecords > 0 ? totalError / totalRecords : 0;\n        return Math.max(0, 1 - calibrationError); // Convert to score (higher is better)\n    }\n\n    private async calculateTypePerformanceTrends(\n        records: HistoricalPredictionRecord[],\n        timeframe: string\n    ): Promise<TypePerformanceTrend[]> {\n        const types = Array.from(new Set(records.map(r => r.type)));\n        const trends: TypePerformanceTrend[] = [];\n\n        for (const type of types) {\n            const typeRecords = records.filter(r => r.type === type);\n            const groupedRecords = this.groupRecordsByTimeframe(typeRecords, timeframe);\n            \n            const periods: TrendPoint[] = Object.entries(groupedRecords).map(([period, periodRecords]) => {\n                const correct = periodRecords.filter(r => r.isCorrect).length;\n                const total = periodRecords.length;\n                const accuracy = total > 0 ? correct / total : 0;\n\n                return {\n                    period,\n                    value: accuracy,\n                    count: total\n                };\n            }).sort((a, b) => a.period.localeCompare(b.period));\n\n            // Calculate trend\n            const values = periods.map(p => p.value);\n            const trendStrength = this.calculateTrendStrength(values);\n            const overallTrend = this.determineTrendDirection(values);\n            \n            const bestPeriod = periods.reduce((best, current) => \n                current.value > best.value ? current : best, periods[0]);\n            const worstPeriod = periods.reduce((worst, current) => \n                current.value < worst.value ? current : worst, periods[0]);\n\n            trends.push({\n                type,\n                periods,\n                overallTrend,\n                trendStrength,\n                bestPeriod: bestPeriod?.period || '',\n                worstPeriod: worstPeriod?.period || ''\n            });\n        }\n\n        return trends;\n    }\n\n    private async analyzeSeasonalPatterns(\n        records: HistoricalPredictionRecord[]\n    ): Promise<SeasonalPattern[]> {\n        const patterns: SeasonalPattern[] = [];\n        const seasonMap = {\n            'early_season': (week: number) => week >= 1 && week <= 6,\n            'mid_season': (week: number) => week >= 7 && week <= 12,\n            'late_season': (week: number) => week >= 13 && week <= 17,\n            'playoffs': (week: number) => week >= 18\n        };\n\n        for (const [pattern, weekFilter] of Object.entries(seasonMap)) {\n            const seasonRecords = records.filter(r => weekFilter(r.week));\n            \n            if (seasonRecords.length === 0) continue;\n\n            const stats = this.calculateAccuracyStats(seasonRecords);\n            const typeStats = this.calculateAccuracyByType(seasonRecords);\n            const strongestTypes = Object.entries(typeStats)\n                .sort(([,a], [,b]) => b.accuracy - a.accuracy)\n                .slice(0, 3)\n                .map(([type]) => type as PredictionType);\n\n            patterns.push({\n                pattern: pattern as any,\n                averageAccuracy: stats.accuracy,\n                predictionVolume: seasonRecords.length,\n                confidenceLevel: stats.averageConfidence,\n                strongestTypes,\n                insights: this.generateSeasonalInsights(pattern, stats, strongestTypes)\n            });\n        }\n\n        return patterns;\n    }\n\n    private async calculateImprovementMetrics(\n        records: HistoricalPredictionRecord[]\n    ): Promise<ImprovementMetrics> {\n        const sortedRecords = [...records].sort((a, b) => \n            new Date(a.recordedAt).getTime() - new Date(b.recordedAt).getTime()\n        );\n\n        const earlyRecords = sortedRecords.slice(0, Math.floor(sortedRecords.length / 3));\n        const recentRecords = sortedRecords.slice(-Math.floor(sortedRecords.length / 3));\n\n        const earlyStats = this.calculateAccuracyStats(earlyRecords);\n        const recentStats = this.calculateAccuracyStats(recentRecords);\n\n        const accuracyImprovement = recentStats.accuracy - earlyStats.accuracy;\n        const confidenceCalibration = recentStats.calibrationScore - earlyStats.calibrationScore;\n        \n        const streakLength = this.calculateCurrentStreak(sortedRecords);\n        const consistencyScore = this.calculateConsistencyScore(records);\n        const adaptabilityIndex = this.calculateAdaptabilityIndex(records);\n        const learningVelocity = this.calculateLearningVelocity(sortedRecords);\n\n        return {\n            accuracyImprovement,\n            confidenceCalibration,\n            streakLength,\n            consistencyScore,\n            adaptabilityIndex,\n            learningVelocity\n        };\n    }\n\n    private async calculateVolumeMetrics(\n        records: HistoricalPredictionRecord[],\n        timeframe: string\n    ): Promise<VolumeMetrics> {\n        const groupedRecords = this.groupRecordsByTimeframe(records, timeframe);\n        const volumeByPeriod = Object.entries(groupedRecords).map(([period, periodRecords]) => ({\n            period,\n            count: periodRecords.length\n        }));\n\n        const totalPredictions = records.length;\n        const periods = volumeByPeriod.length;\n        const dailyAverage = totalPredictions / (periods || 1);\n        const weeklyAverage = dailyAverage * 7;\n\n        const sortedByVolume = volumeByPeriod.sort((a, b) => b.count - a.count);\n        const peakPeriods = sortedByVolume.slice(0, 3).map(p => p.period);\n        const lowPeriods = sortedByVolume.slice(-3).map(p => p.period);\n\n        const volumes = volumeByPeriod.map(p => p.count);\n        const volumeTrendDirection = this.determineTrendDirection(volumes);\n        let volumeTrend: 'increasing' | 'decreasing' | 'stable';\n        if (volumeTrendDirection === 'improving') {\n            volumeTrend = 'increasing';\n        } else if (volumeTrendDirection === 'declining') {\n            volumeTrend = 'decreasing';\n        } else {\n            volumeTrend = 'stable';\n        }\n\n        return {\n            totalPredictions,\n            dailyAverage,\n            weeklyAverage,\n            peakPeriods,\n            lowPeriods,\n            volumeTrend\n        };\n    }\n\n    private calculateAccuracyByType(\n        records: HistoricalPredictionRecord[]\n    ): Record<PredictionType, AccuracyStats> {\n        const result: Record<string, AccuracyStats> = {};\n        const types = Array.from(new Set(records.map(r => r.type)));\n\n        for (const type of types) {\n            const typeRecords = records.filter(r => r.type === type);\n            result[type] = this.calculateAccuracyStats(typeRecords);\n        }\n\n        return result as Record<PredictionType, AccuracyStats>;\n    }\n\n    private calculateAccuracyByConfidence(\n        records: HistoricalPredictionRecord[]\n    ): Record<string, AccuracyStats> {\n        const result: Record<string, AccuracyStats> = {};\n        const confidenceRanges = ['0-60', '60-70', '70-80', '80-90', '90-100'];\n\n        for (const range of confidenceRanges) {\n            const [min, max] = range.split('-').map(Number);\n            const rangeRecords = records.filter(r => r.confidence >= min && r.confidence < max);\n            result[range] = this.calculateAccuracyStats(rangeRecords);\n        }\n\n        return result;\n    }\n\n    private calculateAccuracyByTimeframe(\n        records: HistoricalPredictionRecord[]\n    ): Record<string, AccuracyStats> {\n        const result: Record<string, AccuracyStats> = {};\n        const groupedRecords = this.groupRecordsByTimeframe(records, 'monthly');\n\n        for (const [period, periodRecords] of Object.entries(groupedRecords)) {\n            result[period] = this.calculateAccuracyStats(periodRecords);\n        }\n\n        return result;\n    }\n\n    private calculateAccuracyByWeek(\n        records: HistoricalPredictionRecord[]\n    ): Record<number, AccuracyStats> {\n        const result: Record<number, AccuracyStats> = {};\n        const weeks = Array.from(new Set(records.map(r => r.week)));\n\n        for (const week of weeks) {\n            const weekRecords = records.filter(r => r.week === week);\n            result[week] = this.calculateAccuracyStats(weekRecords);\n        }\n\n        return result;\n    }\n\n    private async calculateContextualAccuracy(\n        records: HistoricalPredictionRecord[]\n    ): Promise<ContextualAccuracy[]> {\n        const contextualFactors: ContextualAccuracy[] = [];\n\n        // Weather impact\n        const weatherRecords = records.filter(r => r.metadata.gameWeather);\n        if (weatherRecords.length > 0) {\n            const goodWeatherRecords = weatherRecords.filter(r => \n                !r.metadata.gameWeather?.toLowerCase().includes('rain') &&\n                !r.metadata.gameWeather?.toLowerCase().includes('snow')\n            );\n            const badWeatherRecords = weatherRecords.filter(r => \n                r.metadata.gameWeather?.toLowerCase().includes('rain') ||\n                r.metadata.gameWeather?.toLowerCase().includes('snow')\n            );\n\n            if (goodWeatherRecords.length > 5) {\n                const goodWeatherStats = this.calculateAccuracyStats(goodWeatherRecords);\n                contextualFactors.push({\n                    context: 'Weather',\n                    factor: 'Good Weather',\n                    accuracy: goodWeatherStats.accuracy,\n                    sampleSize: goodWeatherRecords.length,\n                    significance: this.calculateSignificance(goodWeatherRecords.length)\n                });\n            }\n\n            if (badWeatherRecords.length > 5) {\n                const badWeatherStats = this.calculateAccuracyStats(badWeatherRecords);\n                contextualFactors.push({\n                    context: 'Weather',\n                    factor: 'Bad Weather',\n                    accuracy: badWeatherStats.accuracy,\n                    sampleSize: badWeatherRecords.length,\n                    significance: this.calculateSignificance(badWeatherRecords.length)\n                });\n            }\n        }\n\n        // Line movement impact\n        const lineMovementRecords = records.filter(r => r.metadata.lineMovement !== undefined);\n        if (lineMovementRecords.length > 10) {\n            const favorableMovement = lineMovementRecords.filter(r => r.metadata.lineMovement !== undefined && r.metadata.lineMovement > 0);\n            const unfavorableMovement = lineMovementRecords.filter(r => r.metadata.lineMovement !== undefined && r.metadata.lineMovement < 0);\n\n            if (favorableMovement.length > 5) {\n                const favorableStats = this.calculateAccuracyStats(favorableMovement);\n                contextualFactors.push({\n                    context: 'Line Movement',\n                    factor: 'Favorable',\n                    accuracy: favorableStats.accuracy,\n                    sampleSize: favorableMovement.length,\n                    significance: this.calculateSignificance(favorableMovement.length)\n                });\n            }\n\n            if (unfavorableMovement.length > 5) {\n                const unfavorableStats = this.calculateAccuracyStats(unfavorableMovement);\n                contextualFactors.push({\n                    context: 'Line Movement',\n                    factor: 'Unfavorable',\n                    accuracy: unfavorableStats.accuracy,\n                    sampleSize: unfavorableMovement.length,\n                    significance: this.calculateSignificance(unfavorableMovement.length)\n                });\n            }\n        }\n\n        return contextualFactors;\n    }\n\n    private filterRecordsByPeriod(\n        records: HistoricalPredictionRecord[],\n        period: string\n    ): HistoricalPredictionRecord[] {\n        const [year, month] = period.split('-').map(Number);\n        return records.filter(record => {\n            const recordDate = new Date(record.recordedAt);\n            return recordDate.getFullYear() === year && recordDate.getMonth() + 1 === month;\n        });\n    }\n\n    private calculateTypeChanges(\n        currentRecords: HistoricalPredictionRecord[],\n        previousRecords: HistoricalPredictionRecord[]\n    ): Record<PredictionType, number> {\n        const currentStats = this.calculateAccuracyByType(currentRecords);\n        const previousStats = this.calculateAccuracyByType(previousRecords);\n        const changes: Record<string, number> = {};\n\n        const allTypes = new Set([\n            ...Object.keys(currentStats),\n            ...Object.keys(previousStats)\n        ]);\n\n        for (const type of allTypes) {\n            const currentAcc = (currentStats as any)[type]?.accuracy || 0;\n            const previousAcc = (previousStats as any)[type]?.accuracy || 0;\n            changes[type] = currentAcc - previousAcc;\n        }\n\n        return changes as Record<PredictionType, number>;\n    }\n\n    private identifySignificantImprovements(\n        currentStats: AccuracyStats,\n        previousStats: AccuracyStats\n    ): string[] {\n        const improvements: string[] = [];\n        const accuracyImprovement = currentStats.accuracy - previousStats.accuracy;\n        const confidenceImprovement = currentStats.averageConfidence - previousStats.averageConfidence;\n        const calibrationImprovement = currentStats.calibrationScore - previousStats.calibrationScore;\n\n        if (accuracyImprovement > 0.05) {\n            improvements.push(`Accuracy improved by ${(accuracyImprovement * 100).toFixed(1)}%`);\n        }\n        if (calibrationImprovement > 0.1) {\n            improvements.push(`Confidence calibration improved significantly`);\n        }\n        if (confidenceImprovement > 5 && accuracyImprovement > 0) {\n            improvements.push(`Increased confidence with maintained accuracy`);\n        }\n\n        return improvements;\n    }\n\n    private identifyAreasOfConcern(\n        currentStats: AccuracyStats,\n        previousStats: AccuracyStats\n    ): string[] {\n        const concerns: string[] = [];\n        const accuracyChange = currentStats.accuracy - previousStats.accuracy;\n        const calibrationChange = currentStats.calibrationScore - previousStats.calibrationScore;\n\n        if (accuracyChange < -0.05) {\n            concerns.push(`Accuracy declined by ${Math.abs(accuracyChange * 100).toFixed(1)}%`);\n        }\n        if (calibrationChange < -0.1) {\n            concerns.push(`Confidence calibration worsened`);\n        }\n        if (currentStats.accuracy < 0.5) {\n            concerns.push(`Overall accuracy below 50%`);\n        }\n\n        return concerns;\n    }\n\n    private async analyzeStreaks(\n        records: HistoricalPredictionRecord[]\n    ): Promise<StreakAnalysis> {\n        const sortedRecords = [...records].sort((a, b) => \n            new Date(a.recordedAt).getTime() - new Date(b.recordedAt).getTime()\n        );\n\n        const currentStreak = this.calculateCurrentStreak(sortedRecords);\n        const longestStreak = this.calculateLongestStreak(sortedRecords);\n        const streakType = this.determineStreakType(sortedRecords);\n        const streakProbability = this.calculateStreakProbability(sortedRecords);\n\n        return {\n            currentStreak,\n            longestStreak,\n            streakType,\n            streakProbability,\n            breakPatterns: this.identifyBreakPatterns(sortedRecords),\n            maintainanceStrategies: this.generateMaintainanceStrategies(streakType, currentStreak)\n        };\n    }\n\n    private async analyzeConfidence(\n        records: HistoricalPredictionRecord[]\n    ): Promise<ConfidenceAnalysis> {\n        const calibrationCurve = this.calculateCalibrationCurve(records);\n        const overconfidenceIndex = this.calculateOverconfidenceIndex(records);\n        const underconfidenceIndex = this.calculateUnderconfidenceIndex(records);\n        const optimalConfidenceRange = this.findOptimalConfidenceRange(records);\n        const confidenceDistribution = this.calculateConfidenceDistribution(records);\n        const reliabilityScore = this.calculateReliabilityScore(records);\n\n        return {\n            overconfidenceIndex,\n            underconfidenceIndex,\n            calibrationCurve,\n            optimalConfidenceRange,\n            confidenceDistribution,\n            reliabilityScore\n        };\n    }\n\n    private async analyzeTypeSpecialization(\n        records: HistoricalPredictionRecord[]\n    ): Promise<TypeSpecializationAnalysis> {\n        const typeStats = this.calculateAccuracyByType(records);\n        const sortedTypes = Object.entries(typeStats).sort(([,a], [,b]) => b.accuracy - a.accuracy);\n        \n        const strongestTypes = sortedTypes.slice(0, 3).map(([type]) => type as PredictionType);\n        const weakestTypes = sortedTypes.slice(-3).map(([type]) => type as PredictionType);\n        \n        const specializationIndex = this.calculateSpecializationIndex(typeStats);\n        const consistencyAcrossTypes = this.calculateTypeConsistency(typeStats);\n        const typeProgressions = this.calculateTypeProgressions(records);\n        const crossTypeCorrelations = this.calculateCrossTypeCorrelations(records);\n\n        return {\n            strongestTypes,\n            weakestTypes,\n            specializationIndex,\n            consistencyAcrossTypes,\n            typeProgressions,\n            crossTypeCorrelations\n        };\n    }\n\n    private async analyzeContextualFactors(\n        records: HistoricalPredictionRecord[]\n    ): Promise<ContextualFactorAnalysis> {\n        return {\n            weatherImpact: this.analyzeWeatherImpact(records),\n            injuryImpact: this.analyzeInjuryImpact(records),\n            lineMovementImpact: this.analyzeLineMovementImpact(records),\n            publicBettingImpact: this.analyzePublicBettingImpact(records),\n            sentimentImpact: this.analyzeSentimentImpact(records),\n            combinedFactorEffects: this.analyzeCombinedFactorEffects(records)\n        };\n    }\n\n    private async analyzePredictivePatterns(\n        records: HistoricalPredictionRecord[]\n    ): Promise<PredictivePatterns> {\n        return {\n            timeBasedPatterns: this.identifyTimeBasedPatterns(records),\n            sequencePatterns: this.identifySequencePatterns(records),\n            contextPatterns: this.identifyContextPatterns(records),\n            emergingPatterns: this.identifyEmergingPatterns(records)\n        };\n    }\n\n    private async generateAdvancedRecommendations(\n        records: HistoricalPredictionRecord[]\n    ): Promise<AdvancedRecommendation[]> {\n        const recommendations: AdvancedRecommendation[] = [];\n        const stats = this.calculateAccuracyStats(records);\n        const typeStats = this.calculateAccuracyByType(records);\n\n        // Accuracy-based recommendations\n        if (stats.accuracy < 0.6) {\n            recommendations.push({\n                type: 'IMPROVEMENT',\n                priority: 'high',\n                title: 'Focus on Prediction Accuracy',\n                description: 'Current accuracy is below optimal threshold. Consider reviewing prediction methodology.',\n                actionItems: [\n                    'Review recent incorrect predictions for patterns',\n                    'Consider reducing confidence levels',\n                    'Focus on strongest prediction types'\n                ],\n                expectedImpact: 0.15,\n                timeframe: '2-4 weeks',\n                metrics: ['accuracy', 'calibration'],\n                supportingData: { currentAccuracy: stats.accuracy }\n            });\n        }\n\n        // Type specialization recommendations\n        const sortedTypes = Object.entries(typeStats).sort(([,a], [,b]) => b.accuracy - a.accuracy);\n        const strongestType = sortedTypes[0];\n        const weakestType = sortedTypes[sortedTypes.length - 1];\n\n        if (strongestType && strongestType[1].accuracy > 0.7) {\n            recommendations.push({\n                type: 'OPPORTUNITY',\n                priority: 'medium',\n                title: `Leverage Strength in ${strongestType[0]}`,\n                description: `You show exceptional performance in ${strongestType[0]} predictions.`,\n                actionItems: [\n                    `Increase focus on ${strongestType[0]} predictions`,\n                    'Analyze what makes these predictions successful',\n                    'Apply similar methodology to other types'\n                ],\n                expectedImpact: 0.08,\n                timeframe: '1-2 weeks',\n                metrics: ['type_accuracy', 'overall_confidence'],\n                supportingData: { \n                    type: strongestType[0],\n                    accuracy: strongestType[1].accuracy\n                }\n            });\n        }\n\n        if (weakestType && weakestType[1].accuracy < 0.5 && weakestType[1].totalPredictions > 10) {\n            recommendations.push({\n                type: 'WARNING',\n                priority: 'high',\n                title: `Address Weakness in ${weakestType[0]}`,\n                description: `Performance in ${weakestType[0]} predictions needs attention.`,\n                actionItems: [\n                    `Reduce volume of ${weakestType[0]} predictions temporarily`,\n                    'Study successful patterns in this category',\n                    'Consider lower confidence levels for this type'\n                ],\n                expectedImpact: 0.12,\n                timeframe: '2-3 weeks',\n                metrics: ['type_accuracy', 'overall_accuracy'],\n                supportingData: { \n                    type: weakestType[0],\n                    accuracy: weakestType[1].accuracy\n                }\n            });\n        }\n\n        return recommendations;\n    }\n\n    // Additional helper methods for calculations\n    private calculateTrendStrength(values: number[]): number {\n        if (values.length < 2) return 0;\n        \n        const firstHalf = values.slice(0, Math.floor(values.length / 2));\n        const secondHalf = values.slice(Math.floor(values.length / 2));\n        \n        const firstAvg = firstHalf.reduce((sum, val) => sum + val, 0) / firstHalf.length;\n        const secondAvg = secondHalf.reduce((sum, val) => sum + val, 0) / secondHalf.length;\n        \n        return Math.abs(secondAvg - firstAvg);\n    }\n\n    private determineTrendDirection(values: number[]): 'improving' | 'declining' | 'stable' {\n        if (values.length < 2) return 'stable';\n        \n        const firstHalf = values.slice(0, Math.floor(values.length / 2));\n        const secondHalf = values.slice(Math.floor(values.length / 2));\n        \n        const firstAvg = firstHalf.reduce((sum, val) => sum + val, 0) / firstHalf.length;\n        const secondAvg = secondHalf.reduce((sum, val) => sum + val, 0) / secondHalf.length;\n        \n        const change = secondAvg - firstAvg;\n        \n        if (Math.abs(change) < 0.05) return 'stable';\n        return change > 0 ? 'improving' : 'declining';\n    }\n\n    private generateSeasonalInsights(\n        pattern: string,\n        stats: AccuracyStats,\n        strongestTypes: PredictionType[]\n    ): string[] {\n        const insights: string[] = [];\n        \n        if (stats.accuracy > 0.7) {\n            insights.push(`Strong performance during ${pattern.replace('_', ' ')} period`);\n        }\n        \n        if (strongestTypes.length > 0) {\n            insights.push(`Best prediction types: ${strongestTypes.join(', ')}`);\n        }\n        \n        if (stats.calibrationScore > 0.8) {\n            insights.push(`Well-calibrated confidence levels during this period`);\n        }\n        \n        return insights;\n    }\n\n    private calculateCurrentStreak(records: HistoricalPredictionRecord[]): number {\n        if (records.length === 0) return 0;\n        \n        let streak = 0;\n        for (let i = records.length - 1; i >= 0; i--) {\n            if (records[i].isCorrect) {\n                streak++;\n            } else {\n                break;\n            }\n        }\n        return streak;\n    }\n\n    private calculateLongestStreak(records: HistoricalPredictionRecord[]): number {\n        let maxStreak = 0;\n        let currentStreak = 0;\n        \n        for (const record of records) {\n            if (record.isCorrect) {\n                currentStreak++;\n                maxStreak = Math.max(maxStreak, currentStreak);\n            } else {\n                currentStreak = 0;\n            }\n        }\n        \n        return maxStreak;\n    }\n\n    private determineStreakType(records: HistoricalPredictionRecord[]): 'correct' | 'incorrect' | 'mixed' {\n        if (records.length === 0) return 'mixed';\n        \n        const recentRecords = records.slice(-10);\n        const correctCount = recentRecords.filter(r => r.isCorrect).length;\n        \n        if (correctCount >= 8) return 'correct';\n        if (correctCount <= 2) return 'incorrect';\n        return 'mixed';\n    }\n\n    private calculateStreakProbability(records: HistoricalPredictionRecord[]): number {\n        const overallAccuracy = this.calculateAccuracyStats(records).accuracy;\n        const recentAccuracy = this.calculateAccuracyStats(records.slice(-20)).accuracy;\n        \n        // Weighted probability based on overall and recent performance\n        return (overallAccuracy * 0.3) + (recentAccuracy * 0.7);\n    }\n\n    private identifyBreakPatterns(records: HistoricalPredictionRecord[]): string[] {\n        const patterns: string[] = [];\n        \n        // Analyze when streaks tend to break\n        const streakBreaks = this.findStreakBreaks(records);\n        const contextAnalysis = this.analyzeBreakContexts(streakBreaks);\n        \n        if (contextAnalysis.commonFactors.length > 0) {\n            patterns.push(`Streaks often break during: ${contextAnalysis.commonFactors.join(', ')}`);\n        }\n        \n        return patterns;\n    }\n\n    private generateMaintainanceStrategies(streakType: string, currentStreak: number): string[] {\n        const strategies: string[] = [];\n        \n        if (streakType === 'correct' && currentStreak > 5) {\n            strategies.push('Maintain consistent methodology');\n            strategies.push('Avoid overconfidence');\n            strategies.push('Continue systematic approach');\n        } else if (streakType === 'incorrect') {\n            strategies.push('Review recent prediction methodology');\n            strategies.push('Consider reducing prediction volume');\n            strategies.push('Focus on strongest categories');\n        }\n        \n        return strategies;\n    }\n\n    // Additional calculation helper methods (simplified implementations)\n    private calculateConsistencyScore(records: HistoricalPredictionRecord[]): number {\n        const weeklyAccuracy = this.calculateAccuracyByWeek(records);\n        const accuracyValues = Object.values(weeklyAccuracy).map(stats => stats.accuracy);\n        \n        if (accuracyValues.length === 0) return 0;\n        \n        const mean = accuracyValues.reduce((sum, val) => sum + val, 0) / accuracyValues.length;\n        const variance = accuracyValues.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / accuracyValues.length;\n        \n        return Math.max(0, 1 - Math.sqrt(variance));\n    }\n\n    private calculateAdaptabilityIndex(records: HistoricalPredictionRecord[]): number {\n        // Simplified: measure how well performance adapts to different contexts\n        const contextualAccuracy = records.filter(r => r.metadata.contextualFactors?.length).length;\n        return Math.min(1, contextualAccuracy / records.length);\n    }\n\n    private calculateLearningVelocity(records: HistoricalPredictionRecord[]): number {\n        if (records.length < 10) return 0;\n        \n        const segments = Math.floor(records.length / 5);\n        const segmentAccuracies: number[] = [];\n        \n        for (let i = 0; i < 5; i++) {\n            const start = i * segments;\n            const end = (i + 1) * segments;\n            const segmentRecords = records.slice(start, end);\n            segmentAccuracies.push(this.calculateAccuracyStats(segmentRecords).accuracy);\n        }\n        \n        // Calculate improvement rate\n        let totalImprovement = 0;\n        for (let i = 1; i < segmentAccuracies.length; i++) {\n            totalImprovement += segmentAccuracies[i] - segmentAccuracies[i - 1];\n        }\n        \n        return totalImprovement / (segmentAccuracies.length - 1);\n    }\n\n    private calculateSignificance(sampleSize: number): number {\n        // Simple significance calculation based on sample size\n        if (sampleSize < 5) return 0.1;\n        if (sampleSize < 20) return 0.5;\n        if (sampleSize < 50) return 0.8;\n        return 0.95;\n    }\n\n    // Complex analysis methods\n    private calculateCalibrationCurve(records: HistoricalPredictionRecord[]): CalibrationPoint[] {\n        // Calculate calibration curve points (confidence vs. accuracy)\n        const bins: { [bin: string]: { total: number; correct: number } } = {};\n        for (const record of records) {\n            const binStart = Math.floor((record.confidence ?? 0) / 10) * 10;\n            const binEnd = binStart + 9;\n            const binKey = `${binStart}-${binEnd}`;\n            if (!bins[binKey]) bins[binKey] = { total: 0, correct: 0 };\n            bins[binKey].total++;\n            if (record.isCorrect) bins[binKey].correct++;\n        }\n        return Object.entries(bins).map(([binKey, stats]) => {\n            const [start, end] = binKey.split('-').map(Number);\n            return {\n                confidenceRange: [start, end],\n                expectedAccuracy: (start + end) / 200, // expected: midpoint as percent\n                actualAccuracy: stats.total ? stats.correct / stats.total : 0,\n                sampleSize: stats.total\n            };\n        });\n    }\n\n    private calculateOverconfidenceIndex(records: HistoricalPredictionRecord[]): number {\n        // Overconfidence: high confidence, low accuracy\n        let overconfident = 0;\n        let total = 0;\n        for (const record of records) {\n            if ((record.confidence ?? 0) >= 80) {\n                total++;\n                if (!record.isCorrect) overconfident++;\n            }\n        }\n        return total ? overconfident / total : 0;\n    }\n\n    private calculateUnderconfidenceIndex(records: HistoricalPredictionRecord[]): number {\n        // Underconfidence: low confidence, high accuracy\n        let underconfident = 0;\n        let total = 0;\n        for (const record of records) {\n            if ((record.confidence ?? 0) <= 40) {\n                total++;\n                if (record.isCorrect) underconfident++;\n            }\n        }\n        return total ? underconfident / total : 0;\n    }\n\n    private findOptimalConfidenceRange(records: HistoricalPredictionRecord[]): [number, number] {\n        return [70, 85];\n    }\n\n    private calculateConfidenceDistribution(records: HistoricalPredictionRecord[]): Record<string, number> {\n        return {};\n    }\n\n    private calculateReliabilityScore(records: HistoricalPredictionRecord[]): number {\n        return 0.8;\n    }\n\n    private calculateSpecializationIndex(typeStats: Record<string, AccuracyStats>): number {\n        return 0.7;\n    }\n\n    private calculateTypeConsistency(typeStats: Record<string, AccuracyStats>): number {\n        return 0.8;\n    }\n\n    private calculateTypeProgressions(records: HistoricalPredictionRecord[]): Record<PredictionType, number> {\n        return {} as Record<PredictionType, number>;\n    }\n\n    private calculateCrossTypeCorrelations(records: HistoricalPredictionRecord[]): Record<string, number> {\n        return {};\n    }\n\n    // Factor analysis methods (simplified)\n    private analyzeWeatherImpact(records: HistoricalPredictionRecord[]): FactorImpact {\n        return {\n            positiveCorrelation: true,\n            impactStrength: 0.3,\n            significanceLevel: 0.7,\n            optimalConditions: ['Clear skies', 'Mild temperature'],\n            avoidanceConditions: ['Heavy rain', 'Snow']\n        };\n    }\n\n    private analyzeInjuryImpact(records: HistoricalPredictionRecord[]): FactorImpact {\n        return {\n            positiveCorrelation: false,\n            impactStrength: 0.4,\n            significanceLevel: 0.8,\n            optimalConditions: ['No key injuries'],\n            avoidanceConditions: ['Star player injured']\n        };\n    }\n\n    private analyzeLineMovementImpact(records: HistoricalPredictionRecord[]): FactorImpact {\n        return {\n            positiveCorrelation: true,\n            impactStrength: 0.25,\n            significanceLevel: 0.6,\n            optimalConditions: ['Favorable line movement'],\n            avoidanceConditions: ['Sharp reverse line movement']\n        };\n    }\n\n    private analyzePublicBettingImpact(records: HistoricalPredictionRecord[]): FactorImpact {\n        return {\n            positiveCorrelation: false,\n            impactStrength: 0.2,\n            significanceLevel: 0.5,\n            optimalConditions: ['Contrarian position'],\n            avoidanceConditions: ['Heavy public favorite']\n        };\n    }\n\n    private analyzeSentimentImpact(records: HistoricalPredictionRecord[]): FactorImpact {\n        return {\n            positiveCorrelation: true,\n            impactStrength: 0.15,\n            significanceLevel: 0.4,\n            optimalConditions: ['Positive market sentiment'],\n            avoidanceConditions: ['Extreme negative sentiment']\n        };\n    }\n\n    private analyzeCombinedFactorEffects(records: HistoricalPredictionRecord[]): CombinedFactorEffect[] {\n        return [];\n    }\n\n    // Pattern identification methods (simplified)\n    private identifyTimeBasedPatterns(records: HistoricalPredictionRecord[]): TimePattern[] {\n        return [];\n    }\n\n    private identifySequencePatterns(records: HistoricalPredictionRecord[]): SequencePattern[] {\n        return [];\n    }\n\n    private identifyContextPatterns(records: HistoricalPredictionRecord[]): ContextPattern[] {\n        return [];\n    }\n\n    private identifyEmergingPatterns(records: HistoricalPredictionRecord[]): EmergingPattern[] {\n        return [];\n    }\n\n    private findStreakBreaks(records: HistoricalPredictionRecord[]): any[] {\n        return [];\n    }\n\n    private analyzeBreakContexts(streakBreaks: any[]): { commonFactors: string[] } {\n        return { commonFactors: [] };\n    }\n\n    private convertToCSV(records: HistoricalPredictionRecord[]): string {\n        if (records.length === 0) return '';\n        \n        const headers = Object.keys(records[0]).join(',');\n        const rows = records.map(record => {\n            return Object.values(record).map(value => {\n                if (typeof value === 'object' && value !== null) {\n                    return JSON.stringify(value).replace(/\"/g, '\"\"');\n                }\n                return String(value).replace(/\"/g, '\"\"');\n            }).join(',');\n        });\n        \n        return [headers, ...rows].join('\\n');\n    }\n\n    private parseCSV(csvData: string): HistoricalPredictionRecord[] {\n        // Simplified CSV parser - in production, use a proper CSV library\n        const lines = csvData.split('\\n');\n        const headers = lines[0].split(',');\n        const records: HistoricalPredictionRecord[] = [];\n        \n        for (let i = 1; i < lines.length; i++) {\n            const values = lines[i].split(',');\n            const record: any = {};\n            \n            headers.forEach((header, index) => {\n                record[header] = values[index];\n            });\n            \n            records.push(record as HistoricalPredictionRecord);\n        }\n        \n        return records;\n    }\n\n    private validateHistoricalRecord(record: any): { isValid: boolean; errors: string[] } {\n        const errors: string[] = [];\n        \n        if (!record.id) errors.push('Missing id');\n        if (!record.predictionId) errors.push('Missing predictionId');\n        if (typeof record.confidence !== 'number') errors.push('Invalid confidence');\n        if (!record.type) errors.push('Missing type');\n        \n        return {\n            isValid: errors.length === 0,\n            errors\n        };\n    }\n\n    private mergeRecords(\n        existing: HistoricalPredictionRecord[],\n        newRecords: HistoricalPredictionRecord[]\n    ): HistoricalPredictionRecord[] {\n        const merged = [...existing];\n        \n        for (const newRecord of newRecords) {\n            const existingIndex = merged.findIndex(r => r.id === newRecord.id);\n            if (existingIndex >= 0) {\n                merged[existingIndex] = newRecord;\n            } else {\n                merged.push(newRecord);\n            }\n        }\n        \n        return merged;\n    }\n}\n\nexport default new OracleHistoricalAnalyticsService();\n","/**\n * Oracle Historical Analytics Hook\n * React hook for managing historical prediction analytics and trend analysis\n */\n\nimport { useState, useEffect, useCallback } from 'react';\nimport oracleHistoricalAnalyticsService, {\n    HistoricalTrendAnalysis,\n    AccuracyBreakdown,\n    PerformanceComparison,\n    AdvancedInsights,\n    HistoricalPredictionRecord\n} from '../services/oracleHistoricalAnalyticsService';\nimport { OraclePrediction, PredictionType } from '../services/oraclePredictionService';\n\nexport type TimeframeType = 'weekly' | 'monthly' | 'seasonal' | 'yearly';\nexport type ExportFormat = 'json' | 'csv';\n\nexport interface UseHistoricalAnalyticsResult {\n    // Data\n    trendAnalysis: HistoricalTrendAnalysis | null;\n    accuracyBreakdown: AccuracyBreakdown | null;\n    performanceComparison: PerformanceComparison | null;\n    advancedInsights: AdvancedInsights | null;\n    historicalRecords: HistoricalPredictionRecord[];\n    \n    // Loading states\n    isLoading: boolean;\n    isLoadingTrends: boolean;\n    isLoadingBreakdown: boolean;\n    isLoadingComparison: boolean;\n    isLoadingInsights: boolean;\n    \n    // Error states\n    error: string | null;\n    \n    // Actions\n    refreshAnalytics: () => Promise<void>;\n    recordPrediction: (\n        prediction: OraclePrediction,\n        actualResult?: number,\n        userPrediction?: number\n    ) => Promise<void>;\n    exportData: (format?: ExportFormat, filters?: any) => Promise<string>;\n    importData: (data: string, format?: ExportFormat) => Promise<{ imported: number; errors: string[] }>;\n    \n    // Filtering and analysis\n    analyzeTimeframe: (timeframe: TimeframeType) => Promise<void>;\n    comparePerformance: (currentPeriod: string, previousPeriod: string) => Promise<void>;\n    filterByType: (types: PredictionType[]) => HistoricalPredictionRecord[];\n    filterByDateRange: (startDate: string, endDate: string) => HistoricalPredictionRecord[];\n    filterByAccuracy: (minAccuracy: number) => HistoricalPredictionRecord[];\n    \n    // Metrics\n    getOverallStats: () => {\n        totalPredictions: number;\n        overallAccuracy: number;\n        averageConfidence: number;\n        longestStreak: number;\n        currentStreak: number;\n    };\n    getTypePerformance: () => Record<PredictionType, { accuracy: number; count: number }>;\n    getRecentPerformance: (days: number) => {\n        accuracy: number;\n        predictions: number;\n        improvement: number;\n    };\n}\n\nexport function useHistoricalAnalytics(): UseHistoricalAnalyticsResult {\n    // State\n    const [trendAnalysis, setTrendAnalysis] = useState<HistoricalTrendAnalysis | null>(null);\n    const [accuracyBreakdown, setAccuracyBreakdown] = useState<AccuracyBreakdown | null>(null);\n    const [performanceComparison, setPerformanceComparison] = useState<PerformanceComparison | null>(null);\n    const [advancedInsights, setAdvancedInsights] = useState<AdvancedInsights | null>(null);\n    const [historicalRecords, setHistoricalRecords] = useState<HistoricalPredictionRecord[]>([]);\n    \n    // Loading states\n    const [isLoading, setIsLoading] = useState(false);\n    const [isLoadingTrends, setIsLoadingTrends] = useState(false);\n    const [isLoadingBreakdown, setIsLoadingBreakdown] = useState(false);\n    const [isLoadingComparison, setIsLoadingComparison] = useState(false);\n    const [isLoadingInsights, setIsLoadingInsights] = useState(false);\n    \n    // Error state\n    const [error, setError] = useState<string | null>(null);\n    \n    // Load initial data\n    useEffect(() => {\n        loadInitialData();\n    }, []);\n    \n    const loadInitialData = async () => {\n        setIsLoading(true);\n        setError(null);\n        \n        try {\n            await Promise.all([\n                loadTrendAnalysis(),\n                loadAccuracyBreakdown(),\n                loadHistoricalRecords()\n            ]);\n        } catch (err) {\n            setError(err instanceof Error ? err.message : 'Failed to load analytics data');\n        } finally {\n            setIsLoading(false);\n        }\n    };\n    \n    const loadTrendAnalysis = async (timeframe: TimeframeType = 'monthly') => {\n        setIsLoadingTrends(true);\n        try {\n            const analysis = await oracleHistoricalAnalyticsService.getHistoricalTrendAnalysis(timeframe);\n            setTrendAnalysis(analysis);\n        } catch (err) {\n            throw new Error(`Failed to load trend analysis: ${err instanceof Error ? err.message : String(err)}`);\n        } finally {\n            setIsLoadingTrends(false);\n        }\n    };\n    \n    const loadAccuracyBreakdown = async () => {\n        setIsLoadingBreakdown(true);\n        try {\n            const breakdown = await oracleHistoricalAnalyticsService.getAccuracyBreakdown();\n            setAccuracyBreakdown(breakdown);\n        } catch (err) {\n            throw new Error(`Failed to load accuracy breakdown: ${err instanceof Error ? err.message : String(err)}`);\n        } finally {\n            setIsLoadingBreakdown(false);\n        }\n    };\n    \n    const loadHistoricalRecords = async () => {\n        try {\n            const records = await oracleHistoricalAnalyticsService['getHistoricalRecords']();\n            setHistoricalRecords(records);\n        } catch (err) {\n            throw new Error(`Failed to load historical records: ${err instanceof Error ? err.message : String(err)}`);\n        }\n    };\n    \n    const loadAdvancedInsights = async () => {\n        setIsLoadingInsights(true);\n        try {\n            const insights = await oracleHistoricalAnalyticsService.getAdvancedInsights();\n            setAdvancedInsights(insights);\n        } catch (err) {\n            throw new Error(`Failed to load advanced insights: ${err instanceof Error ? err.message : String(err)}`);\n        } finally {\n            setIsLoadingInsights(false);\n        }\n    };\n    \n    // Actions\n    const refreshAnalytics = useCallback(async () => {\n        await loadInitialData();\n        if (advancedInsights) {\n            await loadAdvancedInsights();\n        }\n    }, [advancedInsights]);\n    \n    const recordPrediction = useCallback(async (\n        prediction: OraclePrediction,\n        actualResult?: number,\n        userPrediction?: number\n    ) => {\n        try {\n            await oracleHistoricalAnalyticsService.storeHistoricalRecord(\n                prediction,\n                actualResult,\n                userPrediction\n            );\n            \n            // Refresh data\n            await loadHistoricalRecords();\n            if (actualResult !== undefined) {\n                await loadTrendAnalysis();\n                await loadAccuracyBreakdown();\n            }\n        } catch (err) {\n            setError(`Failed to record prediction: ${err instanceof Error ? err.message : String(err)}`);\n        }\n    }, []);\n    \n    const exportData = useCallback(async (\n        format: ExportFormat = 'json',\n        filters?: any\n    ) => {\n        try {\n            return await oracleHistoricalAnalyticsService.exportHistoricalData(format, filters);\n        } catch (err) {\n            setError(`Failed to export data: ${err instanceof Error ? err.message : String(err)}`);\n            throw err;\n        }\n    }, []);\n    \n    const importData = useCallback(async (\n        data: string,\n        format: ExportFormat = 'json'\n    ) => {\n        try {\n            const result = await oracleHistoricalAnalyticsService.importHistoricalData(data, format);\n            await refreshAnalytics();\n            return result;\n        } catch (err) {\n            setError(`Failed to import data: ${err instanceof Error ? err.message : String(err)}`);\n            throw err;\n        }\n    }, [refreshAnalytics]);\n    \n    // Analysis functions\n    const analyzeTimeframe = useCallback(async (\n        timeframe: TimeframeType\n    ) => {\n        await loadTrendAnalysis(timeframe);\n    }, []);\n    \n    const comparePerformance = useCallback(async (\n        currentPeriod: string,\n        previousPeriod: string\n    ) => {\n        setIsLoadingComparison(true);\n        try {\n            const comparison = await oracleHistoricalAnalyticsService.getPerformanceComparison(\n                currentPeriod,\n                previousPeriod\n            );\n            setPerformanceComparison(comparison);\n        } catch (err) {\n            setError(`Failed to compare performance: ${err instanceof Error ? err.message : String(err)}`);\n        } finally {\n            setIsLoadingComparison(false);\n        }\n    }, []);\n    \n    // Filtering functions\n    const filterByType = useCallback((types: PredictionType[]) => {\n        return historicalRecords.filter(record => types.includes(record.type));\n    }, [historicalRecords]);\n    \n    const filterByDateRange = useCallback((startDate: string, endDate: string) => {\n        return historicalRecords.filter(record => {\n            const recordDate = new Date(record.recordedAt);\n            return recordDate >= new Date(startDate) && recordDate <= new Date(endDate);\n        });\n    }, [historicalRecords]);\n    \n    const filterByAccuracy = useCallback((minAccuracy: number) => {\n        return historicalRecords.filter(record => {\n            if (record.isCorrect === undefined) return false;\n            return record.isCorrect && record.confidence >= minAccuracy;\n        });\n    }, [historicalRecords]);\n    \n    // Metrics functions\n    const getOverallStats = useCallback(() => {\n        const completedRecords = historicalRecords.filter(r => r.actualResult !== undefined);\n        const correctPredictions = completedRecords.filter(r => r.isCorrect).length;\n        const totalPredictions = completedRecords.length;\n        const overallAccuracy = totalPredictions > 0 ? correctPredictions / totalPredictions : 0;\n        const averageConfidence = historicalRecords.reduce((sum, r) => sum + r.confidence, 0) / historicalRecords.length || 0;\n        \n        // Calculate streaks\n        const sortedRecords = [...completedRecords].sort((a, b) => \n            new Date(a.recordedAt).getTime() - new Date(b.recordedAt).getTime()\n        );\n        \n        let currentStreak = 0;\n        let longestStreak = 0;\n        let tempStreak = 0;\n        \n        // Current streak (from end)\n        for (let i = sortedRecords.length - 1; i >= 0; i--) {\n            if (sortedRecords[i].isCorrect) {\n                currentStreak++;\n            } else {\n                break;\n            }\n        }\n        \n        // Longest streak\n        for (const record of sortedRecords) {\n            if (record.isCorrect) {\n                tempStreak++;\n                longestStreak = Math.max(longestStreak, tempStreak);\n            } else {\n                tempStreak = 0;\n            }\n        }\n        \n        return {\n            totalPredictions,\n            overallAccuracy,\n            averageConfidence,\n            longestStreak,\n            currentStreak\n        };\n    }, [historicalRecords]);\n    \n    const getTypePerformance = useCallback(() => {\n        const result: Record<string, { accuracy: number; count: number }> = {};\n        const types = Array.from(new Set(historicalRecords.map(r => r.type)));\n        \n        for (const type of types) {\n            const typeRecords = historicalRecords.filter(r => r.type === type && r.actualResult !== undefined);\n            const correct = typeRecords.filter(r => r.isCorrect).length;\n            const total = typeRecords.length;\n            \n            result[type] = {\n                accuracy: total > 0 ? correct / total : 0,\n                count: total\n            };\n        }\n        \n        return result as Record<PredictionType, { accuracy: number; count: number }>;\n    }, [historicalRecords]);\n    \n    const getRecentPerformance = useCallback((days: number) => {\n        const cutoffDate = new Date();\n        cutoffDate.setDate(cutoffDate.getDate() - days);\n        \n        const recentRecords = historicalRecords.filter(record => {\n            const recordDate = new Date(record.recordedAt);\n            return recordDate >= cutoffDate && record.actualResult !== undefined;\n        });\n        \n        const olderRecords = historicalRecords.filter(record => {\n            const recordDate = new Date(record.recordedAt);\n            return recordDate < cutoffDate && record.actualResult !== undefined;\n        });\n        \n        const recentCorrect = recentRecords.filter(r => r.isCorrect).length;\n        const recentTotal = recentRecords.length;\n        const recentAccuracy = recentTotal > 0 ? recentCorrect / recentTotal : 0;\n        \n        const olderCorrect = olderRecords.filter(r => r.isCorrect).length;\n        const olderTotal = olderRecords.length;\n        const olderAccuracy = olderTotal > 0 ? olderCorrect / olderTotal : 0;\n        \n        return {\n            accuracy: recentAccuracy,\n            predictions: recentTotal,\n            improvement: recentAccuracy - olderAccuracy\n        };\n    }, [historicalRecords]);\n    \n    return {\n        // Data\n        trendAnalysis,\n        accuracyBreakdown,\n        performanceComparison,\n        advancedInsights,\n        historicalRecords,\n        \n        // Loading states\n        isLoading,\n        isLoadingTrends,\n        isLoadingBreakdown,\n        isLoadingComparison,\n        isLoadingInsights,\n        \n        // Error state\n        error,\n        \n        // Actions\n        refreshAnalytics,\n        recordPrediction,\n        exportData,\n        importData,\n        \n        // Analysis\n        analyzeTimeframe,\n        comparePerformance,\n        filterByType,\n        filterByDateRange,\n        filterByAccuracy,\n        \n        // Metrics\n        getOverallStats,\n        getTypePerformance,\n        getRecentPerformance\n    };\n}\n","/**\n * Oracle Historical Analytics - Core Components\n * Foundational UI components for historical analytics display\n */\n\nimport React from 'react';\nimport { motion } from 'framer-motion';\n\n// Simple SVG Icons\nexport const TrendingUpIcon = ({ className = \"w-4 h-4\" }: { className?: string }) => (\n    <svg className={className} fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 7h8m0 0v8m0-8l-8 8-4-4-6 6\" />\n    </svg>\n);\n\nexport const TrendingDownIcon = ({ className = \"w-4 h-4\" }: { className?: string }) => (\n    <svg className={className} fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 17h8m0 0V9m0 8l-8-8-4 4-6-6\" />\n    </svg>\n);\n\nexport const TargetIcon = ({ className = \"w-4 h-4\" }: { className?: string }) => (\n    <svg className={className} fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2z\" />\n        <circle cx=\"12\" cy=\"12\" r=\"3\" />\n    </svg>\n);\n\nexport const BrainIcon = ({ className = \"w-4 h-4\" }: { className?: string }) => (\n    <svg className={className} fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z\" />\n    </svg>\n);\n\nexport const ActivityIcon = ({ className = \"w-4 h-4\" }: { className?: string }) => (\n    <svg className={className} fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\" />\n    </svg>\n);\n\nexport const DownloadIcon = ({ className = \"w-4 h-4\" }: { className?: string }) => (\n    <svg className={className} fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4\" />\n    </svg>\n);\n\nexport const RefreshIcon = ({ className = \"w-4 h-4\" }: { className?: string }) => (\n    <svg className={className} fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\" />\n    </svg>\n);\n\nexport const AlertIcon = ({ className = \"w-4 h-4\" }: { className?: string }) => (\n    <svg className={className} fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.98-.833-2.75 0L3.134 16.5c-.77.833.192 2.5 1.732 2.5z\" />\n    </svg>\n);\n\nexport const ZapIcon = ({ className = \"w-4 h-4\" }: { className?: string }) => (\n    <svg className={className} fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 10V3L4 14h7v7l9-11h-7z\" />\n    </svg>\n);\n\nexport const CheckIcon = ({ className = \"w-4 h-4\" }: { className?: string }) => (\n    <svg className={className} fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\n    </svg>\n);\n\nexport const BarChartIcon = ({ className = \"w-4 h-4\" }: { className?: string }) => (\n    <svg className={className} fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\" />\n    </svg>\n);\n\nexport const PieChartIcon = ({ className = \"w-4 h-4\" }: { className?: string }) => (\n    <svg className={className} fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n        <circle cx=\"12\" cy=\"12\" r=\"10\" />\n        <path d=\"m12 2a10 10 0 0 1 10 10H12V2z\" />\n    </svg>\n);\n\n// Stat Card Component\ninterface StatCardProps {\n    title: string;\n    value: string;\n    change?: string;\n    changeType?: 'positive' | 'negative' | 'neutral';\n    icon: React.ReactNode;\n    iconBgColor: string;\n    delay?: number;\n}\n\nexport function StatCard({ \n    title, \n    value, \n    change, \n    changeType = 'neutral', \n    icon, \n    iconBgColor, \n    delay = 0 \n}: Readonly<StatCardProps>) {\n    let changeColorClass = 'text-gray-600';\n    if (changeType === 'positive') {\n        changeColorClass = 'text-green-600';\n    } else if (changeType === 'negative') {\n        changeColorClass = 'text-red-600';\n    }\n\n    return (\n        <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay }}\n            className=\"bg-white rounded-lg border border-gray-200 p-6\"\n        >\n            <div className=\"flex items-center justify-between\">\n                <div>\n                    <p className=\"text-sm font-medium text-gray-600\">{title}</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">{value}</p>\n                </div>\n                <div className={`h-12 w-12 ${iconBgColor} rounded-lg flex items-center justify-center`}>\n                    {icon}\n                </div>\n            </div>\n            {change && (\n                <div className=\"mt-4\">\n                    <span className={`text-sm ${changeColorClass}`}>\n                        {change}\n                    </span>\n                </div>\n            )}\n        </motion.div>\n    );\n}\n\n// Simple Progress Bar\ninterface ProgressBarProps {\n    value: number;\n    max: number;\n    color?: string;\n    height?: string;\n}\n\nexport function ProgressBar({ value, max, color = \"bg-purple-600\", height = \"h-2\" }: Readonly<ProgressBarProps>) {\n    const percentage = Math.min((value / max) * 100, 100);\n    \n    return (\n        <div className={`w-full bg-gray-200 rounded-full ${height}`}>\n            <div\n                className={`${height} ${color} rounded-full transition-all duration-300`}\n                style={{ width: `${percentage}%` }}\n            />\n        </div>\n    );\n}\n\n// Simple Trend Indicator\ninterface TrendIndicatorProps {\n    value: number;\n    label: string;\n    showIcon?: boolean;\n}\n\nexport function TrendIndicator({ value, label, showIcon = true }: Readonly<TrendIndicatorProps>) {\n    const isPositive = value > 0;\n    const isNegative = value < 0;\n    \n    let textColorClass = 'text-gray-600';\n    if (isPositive) {\n        textColorClass = 'text-green-600';\n    } else if (isNegative) {\n        textColorClass = 'text-red-600';\n    }\n    \n    return (\n        <div className=\"flex items-center space-x-2\">\n            {showIcon && (\n                <>\n                    {isPositive && <TrendingUpIcon className=\"w-4 h-4 text-green-500\" />}\n                    {isNegative && <TrendingDownIcon className=\"w-4 h-4 text-red-500\" />}\n                    {!isPositive && !isNegative && <div className=\"w-4 h-4\" />}\n                </>\n            )}\n            <span className={`text-sm font-medium ${textColorClass}`}>\n                {value > 0 ? '+' : ''}{(value * 100).toFixed(1)}%\n            </span>\n            <span className=\"text-sm text-gray-600\">{label}</span>\n        </div>\n    );\n}\n\n// Simple Line Chart (SVG-based)\ninterface SimpleLineChartProps {\n    data: { period: string; value: number }[];\n    height?: number;\n    color?: string;\n}\n\nexport function SimpleLineChart({ data, height = 200, color = \"#8B5CF6\" }: Readonly<SimpleLineChartProps>) {\n    if (!data || data.length === 0) {\n        return (\n            <div className=\"flex items-center justify-center h-48 text-gray-500\">\n                No data available\n            </div>\n        );\n    }\n\n    const maxValue = Math.max(...data.map((d: any) => d.value));\n    const minValue = Math.min(...data.map((d: any) => d.value));\n    const range = maxValue - minValue || 1;\n    \n    const width = 400;\n    const padding = 40;\n    const chartWidth = width - (padding * 2);\n    const chartHeight = height - (padding * 2);\n    \n    const points = data.map((d, i) => {\n        const x = padding + (i / (data.length - 1)) * chartWidth;\n        const y = padding + (1 - (d.value - minValue) / range) * chartHeight;\n        return `${x},${y}`;\n    }).join(' ');\n\n    return (\n        <div className=\"w-full\">\n            <svg width=\"100%\" height={height} viewBox={`0 0 ${width} ${height}`} className=\"overflow-visible\">\n                {/* Grid lines */}\n                <defs>\n                    <pattern id=\"grid\" width=\"40\" height=\"40\" patternUnits=\"userSpaceOnUse\">\n                        <path d=\"M 40 0 L 0 0 0 40\" fill=\"none\" stroke=\"#f3f4f6\" strokeWidth=\"1\"/>\n                    </pattern>\n                </defs>\n                <rect width=\"100%\" height=\"100%\" fill=\"url(#grid)\" />\n                \n                {/* Line */}\n                <polyline\n                    fill=\"none\"\n                    stroke={color}\n                    strokeWidth=\"2\"\n                    points={points}\n                />\n                \n                {/* Data points */}\n                {data.map((d, i) => {\n                    const x = padding + (i / (data.length - 1)) * chartWidth;\n                    const y = padding + (1 - (d.value - minValue) / range) * chartHeight;\n                    return (\n                        <circle\n                            key={`point-${d.period}-${i}`}\n                            cx={x}\n                            cy={y}\n                            r=\"4\"\n                            fill={color}\n                            stroke=\"white\"\n                            strokeWidth=\"2\"\n                        />\n                    );\n                })}\n                \n                {/* Labels */}\n                {data.map((d, i) => {\n                    const x = padding + (i / (data.length - 1)) * chartWidth;\n                    return (\n                        <text\n                            key={`label-${d.period}-${i}`}\n                            x={x}\n                            y={height - 10}\n                            textAnchor=\"middle\"\n                            className=\"text-xs fill-gray-600\"\n                        >\n                            {d.period}\n                        </text>\n                    );\n                })}\n            </svg>\n        </div>\n    );\n}\n\n// Simple Bar Chart\ninterface SimpleBarChartProps {\n    data: { label: string; value: number; color?: string }[];\n    height?: number;\n}\n\nexport function SimpleBarChart({ data, height = 200 }: Readonly<SimpleBarChartProps>) {\n    if (!data || data.length === 0) {\n        return (\n            <div className=\"flex items-center justify-center h-48 text-gray-500\">\n                No data available\n            </div>\n        );\n    }\n\n    const maxValue = Math.max(...data.map((d: any) => d.value));\n    \n    return (\n        <div className=\"space-y-3\">\n            {data.map((item, index) => (\n                <div key={`bar-${item.label}-${index}`} className=\"flex items-center space-x-3\">\n                    <div className=\"w-24 text-sm text-gray-600 text-right\">\n                        {item.label}\n                    </div>\n                    <div className=\"flex-1\">\n                        <div className=\"flex items-center space-x-2\">\n                            <div className=\"flex-1 bg-gray-200 rounded-full h-4\">\n                                <div\n                                    className={`h-4 rounded-full transition-all duration-500 ${\n                                        item.color || 'bg-purple-600'\n                                    }`}\n                                    style={{ width: `${(item.value / maxValue) * 100}%` }}\n                                />\n                            </div>\n                            <div className=\"text-sm font-medium text-gray-900 w-16 text-right\">\n                                {(item.value * 100).toFixed(1)}%\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            ))}\n        </div>\n    );\n}\n\n// Loading Spinner\nexport function LoadingSpinner({ size = \"h-8 w-8\" }: Readonly<{ size?: string }>) {\n    return (\n        <div className={`animate-spin rounded-full ${size} border-b-2 border-purple-600`} />\n    );\n}\n\n// Error Display\ninterface ErrorDisplayProps {\n    error: string;\n    onRetry?: () => void;\n}\n\nexport function ErrorDisplay({ error, onRetry }: Readonly<ErrorDisplayProps>) {\n    return (\n        <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n            <div className=\"flex items-center space-x-2 text-red-800\">\n                <AlertIcon className=\"h-5 w-5\" />\n                <span className=\"font-medium\">Error Loading Analytics</span>\n            </div>\n            <p className=\"text-red-600 mt-1\">{error}</p>\n            {onRetry && (\n                <button\n                    onClick={onRetry}\n                    className=\"mt-3 px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors\"\n                >\n                    Retry\n                </button>\n            )}\n        </div>\n    );\n}\n","/**\n * Oracle Historical Analytics Overview\n * Simplified overview component for historical analytics without external dependencies\n */\n\nimport React, { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { useHistoricalAnalytics, TimeframeType } from '../hooks/useHistoricalAnalytics';\nimport { PredictionType } from '../services/oraclePredictionService';\nimport {\n    StatCard,\n    SimpleLineChart,\n    SimpleBarChart,\n    LoadingSpinner,\n    ErrorDisplay,\n    TrendIndicator,\n    TargetIcon,\n    ActivityIcon,\n    ZapIcon,\n    BrainIcon,\n    BarChartIcon,\n    TrendingUpIcon,\n    DownloadIcon,\n    RefreshIcon\n} from '../components/analytics/AnalyticsComponents';\n\nconst PREDICTION_TYPE_COLORS: Record<PredictionType, string> = {\n    'PLAYER_PERFORMANCE': 'bg-purple-600',\n    'GAME_OUTCOME': 'bg-blue-600',\n    'WEEKLY_SCORING': 'bg-green-600',\n    'WEATHER_IMPACT': 'bg-yellow-600',\n    'INJURY_IMPACT': 'bg-red-600',\n    'TEAM_PERFORMANCE': 'bg-indigo-600'\n};\n\ninterface HistoricalAnalyticsOverviewProps {\n    className?: string;\n}\n\nexport function HistoricalAnalyticsOverview({ className = '' }: Readonly<HistoricalAnalyticsOverviewProps>) {\n    const {\n        trendAnalysis,\n        advancedInsights,\n        isLoading,\n        isLoadingTrends,\n        isLoadingInsights,\n        error,\n        refreshAnalytics,\n        analyzeTimeframe,\n        exportData,\n        getOverallStats,\n        getTypePerformance,\n        getRecentPerformance\n    } = useHistoricalAnalytics();\n\n    const [selectedTimeframe, setSelectedTimeframe] = useState<TimeframeType>('monthly');\n    const [activeTab, setActiveTab] = useState<'overview' | 'trends' | 'insights'>('overview');\n\n    const overallStats = getOverallStats();\n    const typePerformance = getTypePerformance();\n    const recentPerformance = getRecentPerformance(30);\n\n    const handleTimeframeChange = async (timeframe: TimeframeType) => {\n        setSelectedTimeframe(timeframe);\n        await analyzeTimeframe(timeframe);\n    };\n\n    const handleExport = async () => {\n        try {\n            const data = await exportData('json');\n            const blob = new Blob([data], { type: 'application/json' });\n            const url = URL.createObjectURL(blob);\n            const a = document.createElement('a');\n            a.href = url;\n            a.download = `oracle-analytics-${new Date().toISOString().split('T')[0]}.json`;\n            a.click();\n            URL.revokeObjectURL(url);\n        } catch (err) {\n            console.error('Export failed:', err);\n        }\n    };\n\n    const formatAccuracy = (accuracy: number) => `${(accuracy * 100).toFixed(1)}%`;\n    const formatChange = (change: number) => {\n        const prefix = change > 0 ? '+' : '';\n        return `${prefix}${(change * 100).toFixed(1)}%`;\n    };\n\n    const tabs = [\n        { id: 'overview', label: 'Overview', icon: BarChartIcon },\n        { id: 'trends', label: 'Trends', icon: TrendingUpIcon },\n        { id: 'insights', label: 'Insights', icon: BrainIcon }\n    ];\n\n    if (error) {\n        return (\n            <div className={`p-6 ${className}`}>\n                <ErrorDisplay error={error} onRetry={refreshAnalytics} />\n            </div>\n        );\n    }\n\n    return (\n        <div className={`space-y-6 ${className}`}>\n            {/* Header */}\n            <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between\">\n                <div>\n                    <h1 className=\"text-3xl font-bold text-gray-900\">Oracle Historical Analytics</h1>\n                    <p className=\"text-gray-600 mt-1\">\n                        Track prediction accuracy, analyze trends, and gain insights from historical performance\n                    </p>\n                </div>\n                \n                <div className=\"flex items-center space-x-3 mt-4 lg:mt-0\">\n                    <select\n                        value={selectedTimeframe}\n                        onChange={(e) => handleTimeframeChange(e.target.value as TimeframeType)}\n                        className=\"px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent\"\n                    >\n                        <option value=\"weekly\">Weekly</option>\n                        <option value=\"monthly\">Monthly</option>\n                        <option value=\"seasonal\">Seasonal</option>\n                        <option value=\"yearly\">Yearly</option>\n                    </select>\n                    \n                    <button\n                        onClick={handleExport}\n                        className=\"flex items-center space-x-2 px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors\"\n                    >\n                        <DownloadIcon />\n                        <span>Export</span>\n                    </button>\n                    \n                    <button\n                        onClick={refreshAnalytics}\n                        disabled={isLoading}\n                        className=\"flex items-center space-x-2 px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors disabled:opacity-50\"\n                    >\n                        <RefreshIcon className={isLoading ? 'animate-spin' : ''} />\n                        <span>Refresh</span>\n                    </button>\n                </div>\n            </div>\n\n            {/* Quick Stats */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n                <StatCard\n                    title=\"Overall Accuracy\"\n                    value={formatAccuracy(overallStats.overallAccuracy)}\n                    change={formatChange(recentPerformance.improvement) + \" from last 30 days\"}\n                    changeType={recentPerformance.improvement >= 0 ? 'positive' : 'negative'}\n                    icon={<TargetIcon className=\"h-6 w-6 text-purple-600\" />}\n                    iconBgColor=\"bg-purple-100\"\n                    delay={0}\n                />\n\n                <StatCard\n                    title=\"Total Predictions\"\n                    value={overallStats.totalPredictions.toLocaleString()}\n                    change={`${recentPerformance.predictions} in last 30 days`}\n                    changeType=\"neutral\"\n                    icon={<ActivityIcon className=\"h-6 w-6 text-blue-600\" />}\n                    iconBgColor=\"bg-blue-100\"\n                    delay={0.1}\n                />\n\n                <StatCard\n                    title=\"Current Streak\"\n                    value={overallStats.currentStreak.toString()}\n                    change={`Best: ${overallStats.longestStreak} correct`}\n                    changeType=\"neutral\"\n                    icon={<ZapIcon className=\"h-6 w-6 text-green-600\" />}\n                    iconBgColor=\"bg-green-100\"\n                    delay={0.2}\n                />\n\n                <StatCard\n                    title=\"Avg Confidence\"\n                    value={`${overallStats.averageConfidence.toFixed(0)}%`}\n                    change=\"Calibration pending analysis\"\n                    changeType=\"neutral\"\n                    icon={<BrainIcon className=\"h-6 w-6 text-orange-600\" />}\n                    iconBgColor=\"bg-orange-100\"\n                    delay={0.3}\n                />\n            </div>\n\n            {/* Tab Navigation */}\n            <div className=\"border-b border-gray-200\">\n                <nav className=\"-mb-px flex space-x-8\">\n                    {tabs.map((tab) => {\n                        const Icon = tab.icon;\n                        return (\n                            <button\n                                key={tab.id}\n                                onClick={() => setActiveTab(tab.id as any)}\n                                className={`py-2 px-1 border-b-2 font-medium text-sm flex items-center space-x-2 transition-colors ${\n                                    activeTab === tab.id\n                                        ? 'border-purple-500 text-purple-600'\n                                        : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                                }`}\n                            >\n                                <Icon />\n                                <span>{tab.label}</span>\n                            </button>\n                        );\n                    })}\n                </nav>\n            </div>\n\n            {/* Tab Content */}\n            <div className=\"space-y-6\">\n                {activeTab === 'overview' && (\n                    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                        {/* Accuracy Trend Chart */}\n                        <motion.div\n                            initial={{ opacity: 0, y: 20 }}\n                            animate={{ opacity: 1, y: 0 }}\n                            className=\"bg-white rounded-lg border border-gray-200 p-6\"\n                        >\n                            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Accuracy Trend</h3>\n                            {isLoadingTrends ? (\n                                <div className=\"h-64 flex items-center justify-center\">\n                                    <LoadingSpinner />\n                                </div>\n                            ) : (\n                                <>\n                                    {trendAnalysis ? (\n                                        <SimpleLineChart \n                                            data={trendAnalysis.accuracyTrend}\n                                            height={250}\n                                            color=\"#8B5CF6\"\n                                        />\n                                    ) : (\n                                        <div className=\"h-64 flex items-center justify-center text-gray-500\">\n                                            No trend data available\n                                        </div>\n                                    )}\n                                </>\n                            )}\n                        </motion.div>\n\n                        {/* Type Performance */}\n                        <motion.div\n                            initial={{ opacity: 0, y: 20 }}\n                            animate={{ opacity: 1, y: 0 }}\n                            transition={{ delay: 0.1 }}\n                            className=\"bg-white rounded-lg border border-gray-200 p-6\"\n                        >\n                            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Performance by Type</h3>\n                            <SimpleBarChart\n                                data={Object.entries(typePerformance).map(([type, stats]) => ({\n                                    label: type.replace('_', ' '),\n                                    value: stats.accuracy,\n                                    color: PREDICTION_TYPE_COLORS[type as PredictionType]\n                                }))}\n                                height={300}\n                            />\n                        </motion.div>\n                    </div>\n                )}\n\n                {activeTab === 'trends' && trendAnalysis && (\n                    <div className=\"space-y-6\">\n                        {/* Confidence Trend */}\n                        <motion.div\n                            initial={{ opacity: 0, y: 20 }}\n                            animate={{ opacity: 1, y: 0 }}\n                            className=\"bg-white rounded-lg border border-gray-200 p-6\"\n                        >\n                            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Confidence Trend</h3>\n                            <SimpleLineChart \n                                data={trendAnalysis.confidenceTrend}\n                                height={300}\n                                color=\"#06B6D4\"\n                            />\n                        </motion.div>\n\n                        {/* Type Performance Trends */}\n                        <motion.div\n                            initial={{ opacity: 0, y: 20 }}\n                            animate={{ opacity: 1, y: 0 }}\n                            transition={{ delay: 0.1 }}\n                            className=\"bg-white rounded-lg border border-gray-200 p-6\"\n                        >\n                            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Type Performance Trends</h3>\n                            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n                                {trendAnalysis.typesPerformance.map((typeData) => (\n                                    <div key={typeData.type} className=\"p-4 border border-gray-200 rounded-lg\">\n                                        <div className=\"flex items-center justify-between mb-3\">\n                                            <h4 className=\"font-medium text-gray-900\">\n                                                {typeData.type.replace('_', ' ')}\n                                            </h4>\n                                            <TrendIndicator \n                                                value={typeData.trendStrength}\n                                                label={typeData.overallTrend}\n                                                showIcon={false}\n                                            />\n                                        </div>\n                                        <SimpleLineChart\n                                            data={typeData.periods}\n                                            height={150}\n                                            color=\"#10B981\"\n                                        />\n                                    </div>\n                                ))}\n                            </div>\n                        </motion.div>\n                    </div>\n                )}\n\n                {activeTab === 'insights' && (\n                    <div className=\"space-y-6\">\n                        {isLoadingInsights ? (\n                            <div className=\"flex items-center justify-center h-64\">\n                                <LoadingSpinner />\n                            </div>\n                        ) : (\n                            <>\n                                {advancedInsights ? (\n                            <>\n                                {/* Recommendations */}\n                                <motion.div\n                                    initial={{ opacity: 0, y: 20 }}\n                                    animate={{ opacity: 1, y: 0 }}\n                                    className=\"bg-white rounded-lg border border-gray-200 p-6\"\n                                >\n                                    <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Recommendations</h3>\n                                    <div className=\"space-y-4\">\n                                        {advancedInsights.recommendations.map((rec, index) => {\n                                            let recBgClass: string;\n                                            switch (rec.type) {\n                                                case 'WARNING':\n                                                    recBgClass = 'bg-red-50 border-red-400';\n                                                    break;\n                                                case 'OPPORTUNITY':\n                                                    recBgClass = 'bg-green-50 border-green-400';\n                                                    break;\n                                                case 'IMPROVEMENT':\n                                                    recBgClass = 'bg-blue-50 border-blue-400';\n                                                    break;\n                                                default:\n                                                    recBgClass = 'bg-purple-50 border-purple-400';\n                                            }\n                                            \n                                            let priorityClass: string;\n                                            switch (rec.priority) {\n                                                case 'high':\n                                                    priorityClass = 'bg-red-100 text-red-800';\n                                                    break;\n                                                case 'medium':\n                                                    priorityClass = 'bg-yellow-100 text-yellow-800';\n                                                    break;\n                                                default:\n                                                    priorityClass = 'bg-gray-100 text-gray-800';\n                                            }\n                                            \n                                            return (\n                                                <div \n                                                    key={`recommendation-${rec.title}-${index}`}\n                                                    className={`p-4 rounded-lg border-l-4 ${recBgClass}`}\n                                                >\n                                                    <div className=\"flex items-start justify-between\">\n                                                        <div className=\"flex-1\">\n                                                            <h4 className=\"font-medium text-gray-900\">{rec.title}</h4>\n                                                            <p className=\"text-gray-600 mt-1\">{rec.description}</p>\n                                                            <div className=\"mt-2\">\n                                                                <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${priorityClass}`}>\n                                                                    {rec.priority} priority\n                                                                </span>\n                                                            </div>\n                                                        </div>\n                                                        <div className=\"text-right ml-4\">\n                                                            <div className=\"text-sm font-medium text-gray-900\">\n                                                                +{(rec.expectedImpact * 100).toFixed(0)}% impact\n                                                            </div>\n                                                            <div className=\"text-xs text-gray-600\">\n                                                                {rec.timeframe}\n                                                            </div>\n                                                        </div>\n                                                    </div>\n                                                    {rec.actionItems.length > 0 && (\n                                                        <div className=\"mt-3\">\n                                                            <p className=\"text-sm font-medium text-gray-700 mb-1\">Action Items:</p>\n                                                            <ul className=\"list-disc list-inside space-y-1\">\n                                                                {rec.actionItems.map((item, itemIndex) => (\n                                                                    <li key={`action-${rec.title}-${itemIndex}`} className=\"text-sm text-gray-600\">{item}</li>\n                                                                ))}\n                                                            </ul>\n                                                        </div>\n                                                    )}\n                                                </div>\n                                            );\n                                        })}\n                                    </div>\n                                </motion.div>\n\n                                {/* Streak Analysis */}\n                                <motion.div\n                                    initial={{ opacity: 0, y: 20 }}\n                                    animate={{ opacity: 1, y: 0 }}\n                                    transition={{ delay: 0.1 }}\n                                    className=\"bg-white rounded-lg border border-gray-200 p-6\"\n                                >\n                                    <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Streak Analysis</h3>\n                                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                                        <div className=\"text-center\">\n                                            <div className=\"text-3xl font-bold text-purple-600\">\n                                                {advancedInsights.streakAnalysis.currentStreak}\n                                            </div>\n                                            <div className=\"text-sm text-gray-600 mt-1\">Current Streak</div>\n                                        </div>\n                                        <div className=\"text-center\">\n                                            <div className=\"text-3xl font-bold text-green-600\">\n                                                {advancedInsights.streakAnalysis.longestStreak}\n                                            </div>\n                                            <div className=\"text-sm text-gray-600 mt-1\">Longest Streak</div>\n                                        </div>\n                                        <div className=\"text-center\">\n                                            <div className=\"text-3xl font-bold text-blue-600\">\n                                                {(advancedInsights.streakAnalysis.streakProbability * 100).toFixed(0)}%\n                                            </div>\n                                            <div className=\"text-sm text-gray-600 mt-1\">Continue Probability</div>\n                                        </div>\n                                    </div>\n                                </motion.div>\n                            </>\n                                ) : (\n                                    <div className=\"text-center py-12\">\n                                        <BrainIcon className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                                        <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Insights Available</h3>\n                                        <p className=\"text-gray-600\">Make more predictions to generate advanced insights.</p>\n                                    </div>\n                                )}\n                            </>\n                        )}\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n}\n\nexport default HistoricalAnalyticsOverview;"],"names":["OracleHistoricalAnalyticsService","__publicField","prediction","actualResult","userPrediction","metadata","records","historicalRecord","existingIndex","r","timeframe","cacheKey","cached","analysis","currentPeriod","previousPeriod","currentRecords","previousRecords","currentStats","previousStats","format","filters","record","data","merge","newRecords","errors","validRecords","validation","existingRecords","mergedRecords","error","key","timestamp","cacheItem","groupedRecords","trendPoints","period","periodRecords","correct","total","accuracy","current","previous","a","b","avgConfidence","sum","grouped","date","firstDayOfYear","pastDaysOfYear","month","correctPredictions","totalPredictions","confidences","averageConfidence","c","confidenceRange","calibrationScore","confidenceBuckets","bucket","bucketKey","totalError","totalRecords","bucketRecords","actualAccuracy","calibrationError","types","trends","type","typeRecords","periods","values","trendStrength","overallTrend","bestPeriod","best","worstPeriod","worst","patterns","seasonMap","week","pattern","weekFilter","seasonRecords","stats","typeStats","strongestTypes","sortedRecords","earlyRecords","recentRecords","earlyStats","recentStats","accuracyImprovement","confidenceCalibration","streakLength","consistencyScore","adaptabilityIndex","learningVelocity","volumeByPeriod","dailyAverage","weeklyAverage","sortedByVolume","peakPeriods","p","lowPeriods","volumes","volumeTrendDirection","volumeTrend","result","confidenceRanges","range","min","max","rangeRecords","weeks","weekRecords","contextualFactors","weatherRecords","goodWeatherRecords","badWeatherRecords","goodWeatherStats","badWeatherStats","lineMovementRecords","favorableMovement","unfavorableMovement","favorableStats","unfavorableStats","year","recordDate","changes","allTypes","currentAcc","previousAcc","improvements","confidenceImprovement","calibrationImprovement","concerns","accuracyChange","calibrationChange","currentStreak","longestStreak","streakType","streakProbability","calibrationCurve","overconfidenceIndex","underconfidenceIndex","optimalConfidenceRange","confidenceDistribution","reliabilityScore","sortedTypes","weakestTypes","specializationIndex","consistencyAcrossTypes","typeProgressions","crossTypeCorrelations","recommendations","strongestType","weakestType","firstHalf","secondHalf","firstAvg","val","secondAvg","change","insights","streak","i","maxStreak","correctCount","overallAccuracy","recentAccuracy","streakBreaks","contextAnalysis","strategies","weeklyAccuracy","accuracyValues","mean","variance","contextualAccuracy","segments","segmentAccuracies","start","end","segmentRecords","totalImprovement","sampleSize","bins","binStart","binEnd","binKey","overconfident","underconfident","headers","rows","value","csvData","lines","header","index","existing","merged","newRecord","oracleHistoricalAnalyticsService","useHistoricalAnalytics","trendAnalysis","setTrendAnalysis","useState","accuracyBreakdown","setAccuracyBreakdown","performanceComparison","setPerformanceComparison","advancedInsights","setAdvancedInsights","historicalRecords","setHistoricalRecords","isLoading","setIsLoading","isLoadingTrends","setIsLoadingTrends","isLoadingBreakdown","setIsLoadingBreakdown","isLoadingComparison","setIsLoadingComparison","isLoadingInsights","setIsLoadingInsights","setError","useEffect","loadInitialData","loadTrendAnalysis","loadAccuracyBreakdown","loadHistoricalRecords","err","breakdown","loadAdvancedInsights","refreshAnalytics","useCallback","recordPrediction","exportData","importData","analyzeTimeframe","comparePerformance","comparison","filterByType","filterByDateRange","startDate","endDate","filterByAccuracy","minAccuracy","getOverallStats","completedRecords","tempStreak","getTypePerformance","getRecentPerformance","days","cutoffDate","olderRecords","recentCorrect","recentTotal","olderCorrect","olderTotal","olderAccuracy","TrendingUpIcon","className","jsxDEV","this","TrendingDownIcon","TargetIcon","BrainIcon","ActivityIcon","DownloadIcon","RefreshIcon","AlertIcon","ZapIcon","BarChartIcon","StatCard","title","changeType","icon","iconBgColor","delay","changeColorClass","motion","TrendIndicator","label","showIcon","isPositive","isNegative","textColorClass","Fragment","SimpleLineChart","height","color","maxValue","d","minValue","width","padding","chartWidth","chartHeight","points","y","SimpleBarChart","item","LoadingSpinner","size","ErrorDisplay","onRetry","PREDICTION_TYPE_COLORS","HistoricalAnalyticsOverview","selectedTimeframe","setSelectedTimeframe","activeTab","setActiveTab","overallStats","typePerformance","recentPerformance","handleTimeframeChange","handleExport","blob","url","formatAccuracy","formatChange","tabs","e","tab","Icon","typeData","rec","recBgClass","priorityClass","itemIndex"],"mappings":"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"}